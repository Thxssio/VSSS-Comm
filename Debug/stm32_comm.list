
stm32_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b738  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800b8d8  0800b8d8  0000c8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be18  0800be18  0000d2d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be18  0800be18  0000ce18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be20  0800be20  0000d2d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be20  0800be20  0000ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be24  0800be24  0000ce24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  0800be28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e74  200002d4  0800c0fc  0000d2d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  0800c0fc  0000e148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111ae  00000000  00000000  0000d304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349f  00000000  00000000  0001e4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00021958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b6a  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195cb  00000000  00000000  00023422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a87  00000000  00000000  0003c9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b580  00000000  00000000  0004f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004db0  00000000  00000000  000daa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000df7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8c0 	.word	0x0800b8c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	0800b8c0 	.word	0x0800b8c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e030      	b.n	8000f1a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	441a      	add	r2, r3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	440b      	add	r3, r1
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	441a      	add	r2, r3
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	3301      	adds	r3, #1
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	440b      	add	r3, r1
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	3302      	adds	r3, #2
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	441a      	add	r2, r3
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	440b      	add	r3, r1
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	3303      	adds	r3, #3
 8000f02:	683a      	ldr	r2, [r7, #0]
 8000f04:	441a      	add	r2, r3
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	440b      	add	r3, r1
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	3301      	adds	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d9cb      	bls.n	8000eb8 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000f20:	2304      	movs	r3, #4
 8000f22:	61fb      	str	r3, [r7, #28]
 8000f24:	e081      	b.n	800102a <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4413      	add	r3, r2
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	3302      	adds	r3, #2
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	3303      	adds	r3, #3
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d125      	bne.n	8000fb2 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 8000f66:	7b3b      	ldrb	r3, [r7, #12]
 8000f68:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
 8000f6c:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8000f6e:	7bbb      	ldrb	r3, [r7, #14]
 8000f70:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000f7a:	7b3b      	ldrb	r3, [r7, #12]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <KeyExpansion+0x198>)
 8000f80:	5c9b      	ldrb	r3, [r3, r2]
 8000f82:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <KeyExpansion+0x198>)
 8000f8a:	5c9b      	ldrb	r3, [r3, r2]
 8000f8c:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <KeyExpansion+0x198>)
 8000f94:	5c9b      	ldrb	r3, [r3, r2]
 8000f96:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b28      	ldr	r3, [pc, #160]	@ (8001040 <KeyExpansion+0x198>)
 8000f9e:	5c9b      	ldrb	r3, [r3, r2]
 8000fa0:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 8000fa2:	7b3a      	ldrb	r2, [r7, #12]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	4926      	ldr	r1, [pc, #152]	@ (8001044 <KeyExpansion+0x19c>)
 8000faa:	5ccb      	ldrb	r3, [r1, r3]
 8000fac:	4053      	eors	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	7819      	ldrb	r1, [r3, #0]
 8000fc8:	7b3a      	ldrb	r2, [r7, #12]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4403      	add	r3, r0
 8000fd0:	404a      	eors	r2, r1
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	7819      	ldrb	r1, [r3, #0]
 8000fe0:	7b7a      	ldrb	r2, [r7, #13]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	4403      	add	r3, r0
 8000fea:	404a      	eors	r2, r1
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	7819      	ldrb	r1, [r3, #0]
 8000ffa:	7bba      	ldrb	r2, [r7, #14]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	3302      	adds	r3, #2
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	4403      	add	r3, r0
 8001004:	404a      	eors	r2, r1
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	3303      	adds	r3, #3
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	7819      	ldrb	r1, [r3, #0]
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	3303      	adds	r3, #3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4403      	add	r3, r0
 800101e:	404a      	eors	r2, r1
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	3301      	adds	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	2b2b      	cmp	r3, #43	@ 0x2b
 800102e:	f67f af7a 	bls.w	8000f26 <KeyExpansion+0x7e>
  }
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3724      	adds	r7, #36	@ 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	0800b97c 	.word	0x0800b97c
 8001044:	0800ba7c 	.word	0x0800ba7c

08001048 <AES_init_ctx_iv>:
{
  KeyExpansion(ctx->RoundKey, key);
}
#if (defined(CBC) && (CBC == 1)) || (defined(CTR) && (CTR == 1))
void AES_init_ctx_iv(struct AES_ctx* ctx, const uint8_t* key, const uint8_t* iv)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  KeyExpansion(ctx->RoundKey, key);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff25 	bl	8000ea8 <KeyExpansion>
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	33b0      	adds	r3, #176	@ 0xb0
 8001062:	2210      	movs	r2, #16
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f008 fe4f 	bl	8009d0a <memcpy>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <AES_ctx_set_iv>:
void AES_ctx_set_iv(struct AES_ctx* ctx, const uint8_t* iv)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  memcpy (ctx->Iv, iv, AES_BLOCKLEN);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	33b0      	adds	r3, #176	@ 0xb0
 8001082:	2210      	movs	r2, #16
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f008 fe3f 	bl	8009d0a <memcpy>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	e027      	b.n	80010f8 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80010a8:	2300      	movs	r3, #0
 80010aa:	75bb      	strb	r3, [r7, #22]
 80010ac:	e01e      	b.n	80010ec <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80010ae:	7dfa      	ldrb	r2, [r7, #23]
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	440a      	add	r2, r1
 80010b8:	4413      	add	r3, r2
 80010ba:	7818      	ldrb	r0, [r3, #0]
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	009a      	lsls	r2, r3, #2
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	4413      	add	r3, r2
 80010c4:	009a      	lsls	r2, r3, #2
 80010c6:	7dbb      	ldrb	r3, [r7, #22]
 80010c8:	4413      	add	r3, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	7819      	ldrb	r1, [r3, #0]
 80010d2:	7dfa      	ldrb	r2, [r7, #23]
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	4041      	eors	r1, r0
 80010d8:	b2c8      	uxtb	r0, r1
 80010da:	68b9      	ldr	r1, [r7, #8]
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	440a      	add	r2, r1
 80010e0:	4413      	add	r3, r2
 80010e2:	4602      	mov	r2, r0
 80010e4:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80010e6:	7dbb      	ldrb	r3, [r7, #22]
 80010e8:	3301      	adds	r3, #1
 80010ea:	75bb      	strb	r3, [r7, #22]
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d9dd      	bls.n	80010ae <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75fb      	strb	r3, [r7, #23]
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d9d4      	bls.n	80010a8 <AddRoundKey+0x14>
    }
  }
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e01d      	b.n	8001156 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]
 800111e:	e014      	b.n	800114a <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8001120:	7bba      	ldrb	r2, [r7, #14]
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	440a      	add	r2, r1
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	7bba      	ldrb	r2, [r7, #14]
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	490d      	ldr	r1, [pc, #52]	@ (800116c <SubBytes+0x60>)
 8001136:	5c08      	ldrb	r0, [r1, r0]
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	440a      	add	r2, r1
 800113e:	4413      	add	r3, r2
 8001140:	4602      	mov	r2, r0
 8001142:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8001144:	7bbb      	ldrb	r3, [r7, #14]
 8001146:	3301      	adds	r3, #1
 8001148:	73bb      	strb	r3, [r7, #14]
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d9e7      	bls.n	8001120 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3301      	adds	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d9de      	bls.n	800111a <SubBytes+0xe>
    }
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	0800b97c 	.word	0x0800b97c

08001170 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left
  temp           = (*state)[0][1];
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	795a      	ldrb	r2, [r3, #5]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a5a      	ldrb	r2, [r3, #9]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b5a      	ldrb	r2, [r3, #13]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left
  temp           = (*state)[0][2];
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7a9a      	ldrb	r2, [r3, #10]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	799b      	ldrb	r3, [r3, #6]
 80011b4:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7b9a      	ldrb	r2, [r3, #14]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7bda      	ldrb	r2, [r3, #15]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7ada      	ldrb	r2, [r3, #11]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	79da      	ldrb	r2, [r3, #7]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	71da      	strb	r2, [r3, #7]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <xtime>:

static uint8_t xtime(uint8_t x)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	b25a      	sxtb	r2, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	09db      	lsrs	r3, r3, #7
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4619      	mov	r1, r3
 800120c:	0049      	lsls	r1, r1, #1
 800120e:	440b      	add	r3, r1
 8001210:	4619      	mov	r1, r3
 8001212:	00c8      	lsls	r0, r1, #3
 8001214:	4619      	mov	r1, r3
 8001216:	4603      	mov	r3, r0
 8001218:	440b      	add	r3, r1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4053      	eors	r3, r2
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2db      	uxtb	r3, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e0a4      	b.n	8001388 <MixColumns+0x158>
  {
    t   = (*state)[i][0];
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001246:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8001248:	7bfa      	ldrb	r2, [r7, #15]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	785b      	ldrb	r3, [r3, #1]
 800125a:	4053      	eors	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	440b      	add	r3, r1
 8001266:	789b      	ldrb	r3, [r3, #2]
 8001268:	4053      	eors	r3, r2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	78db      	ldrb	r3, [r3, #3]
 8001276:	4053      	eors	r3, r2
 8001278:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	440b      	add	r3, r1
 800128a:	785b      	ldrb	r3, [r3, #1]
 800128c:	4053      	eors	r3, r2
 800128e:	733b      	strb	r3, [r7, #12]
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffae 	bl	80011f4 <xtime>
 8001298:	4603      	mov	r3, r0
 800129a:	733b      	strb	r3, [r7, #12]
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80012a4:	7b3a      	ldrb	r2, [r7, #12]
 80012a6:	7b7b      	ldrb	r3, [r7, #13]
 80012a8:	4053      	eors	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	404b      	eors	r3, r1
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	785a      	ldrb	r2, [r3, #1]
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	4053      	eors	r3, r2
 80012ce:	733b      	strb	r3, [r7, #12]
 80012d0:	7b3b      	ldrb	r3, [r7, #12]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff8e 	bl	80011f4 <xtime>
 80012d8:	4603      	mov	r3, r0
 80012da:	733b      	strb	r3, [r7, #12]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	7859      	ldrb	r1, [r3, #1]
 80012e6:	7b3a      	ldrb	r2, [r7, #12]
 80012e8:	7b7b      	ldrb	r3, [r7, #13]
 80012ea:	4053      	eors	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	404a      	eors	r2, r1
 80012f2:	b2d1      	uxtb	r1, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	460a      	mov	r2, r1
 80012fc:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	789a      	ldrb	r2, [r3, #2]
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	78db      	ldrb	r3, [r3, #3]
 8001312:	4053      	eors	r3, r2
 8001314:	733b      	strb	r3, [r7, #12]
 8001316:	7b3b      	ldrb	r3, [r7, #12]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff6b 	bl	80011f4 <xtime>
 800131e:	4603      	mov	r3, r0
 8001320:	733b      	strb	r3, [r7, #12]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	7899      	ldrb	r1, [r3, #2]
 800132c:	7b3a      	ldrb	r2, [r7, #12]
 800132e:	7b7b      	ldrb	r3, [r7, #13]
 8001330:	4053      	eors	r3, r2
 8001332:	b2da      	uxtb	r2, r3
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	404a      	eors	r2, r1
 8001338:	b2d1      	uxtb	r1, r2
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	460a      	mov	r2, r1
 8001342:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	78da      	ldrb	r2, [r3, #3]
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	4053      	eors	r3, r2
 8001352:	733b      	strb	r3, [r7, #12]
 8001354:	7b3b      	ldrb	r3, [r7, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff4c 	bl	80011f4 <xtime>
 800135c:	4603      	mov	r3, r0
 800135e:	733b      	strb	r3, [r7, #12]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	78d9      	ldrb	r1, [r3, #3]
 800136a:	7b3a      	ldrb	r2, [r7, #12]
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	4053      	eors	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	404a      	eors	r2, r1
 8001376:	b2d1      	uxtb	r1, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	460a      	mov	r2, r1
 8001380:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	3301      	adds	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b03      	cmp	r3, #3
 800138c:	f67f af57 	bls.w	800123e <MixColumns+0xe>
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fe71 	bl	8001094 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fea8 	bl	800110c <SubBytes>
    ShiftRows(state);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fed7 	bl	8001170 <ShiftRows>
    if (round == Nr) {
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b0a      	cmp	r3, #10
 80013c6:	d00c      	beq.n	80013e2 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff31 	bl	8001230 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe5d 	bl	8001094 <AddRoundKey>
  for (round = 1; ; ++round)
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	3301      	adds	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 80013e0:	e7e9      	b.n	80013b6 <Cipher+0x1c>
      break;
 80013e2:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	200a      	movs	r0, #10
 80013ea:	f7ff fe53 	bl	8001094 <AddRoundKey>
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf, const uint8_t* Iv)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b085      	sub	sp, #20
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e010      	b.n	8001428 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	7819      	ldrb	r1, [r3, #0]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	4413      	add	r3, r2
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4403      	add	r3, r0
 800141c:	404a      	eors	r2, r1
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCKLEN; ++i) // The block in AES is always 128bit no matter the key size
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	3301      	adds	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d9eb      	bls.n	8001406 <XorWithIv+0x10>
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <AES_CBC_encrypt_buffer>:

void AES_CBC_encrypt_buffer(struct AES_ctx *ctx, uint8_t* buf, size_t length)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  size_t i;
  uint8_t *Iv = ctx->Iv;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	33b0      	adds	r3, #176	@ 0xb0
 800144c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e010      	b.n	8001476 <AES_CBC_encrypt_buffer+0x3a>
  {
    XorWithIv(buf, Iv);
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	68b8      	ldr	r0, [r7, #8]
 8001458:	f7ff ffcd 	bl	80013f6 <XorWithIv>
    Cipher((state_t*)buf, ctx->RoundKey);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4619      	mov	r1, r3
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f7ff ff9a 	bl	800139a <Cipher>
    Iv = buf;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	613b      	str	r3, [r7, #16]
    buf += AES_BLOCKLEN;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3310      	adds	r3, #16
 800146e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < length; i += AES_BLOCKLEN)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3310      	adds	r3, #16
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d3ea      	bcc.n	8001454 <AES_CBC_encrypt_buffer+0x18>
  }
  /* store Iv in ctx for next call */
  memcpy(ctx->Iv, Iv, AES_BLOCKLEN);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	33b0      	adds	r3, #176	@ 0xb0
 8001482:	2210      	movs	r2, #16
 8001484:	6939      	ldr	r1, [r7, #16]
 8001486:	4618      	mov	r0, r3
 8001488:	f008 fc3f 	bl	8009d0a <memcpy>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <process_USB_data>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void process_USB_data(void) {
 8001494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001498:	b089      	sub	sp, #36	@ 0x24
 800149a:	af00      	add	r7, sp, #0
    if (recData != NULL && recDataSize > 0) {
 800149c:	4b51      	ldr	r3, [pc, #324]	@ (80015e4 <process_USB_data+0x150>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8099 	beq.w	80015d8 <process_USB_data+0x144>
 80014a6:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <process_USB_data+0x154>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8094 	beq.w	80015d8 <process_USB_data+0x144>
 80014b0:	466b      	mov	r3, sp
 80014b2:	607b      	str	r3, [r7, #4]

        size_t msg_len = recDataSize;
 80014b4:	4b4c      	ldr	r3, [pc, #304]	@ (80015e8 <process_USB_data+0x154>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	61fb      	str	r3, [r7, #28]
        size_t padded_len = ((msg_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	330f      	adds	r3, #15
 80014be:	f023 030f 	bic.w	r3, r3, #15
 80014c2:	61bb      	str	r3, [r7, #24]

        uint8_t buffer[padded_len];
 80014c4:	69be      	ldr	r6, [r7, #24]
 80014c6:	4633      	mov	r3, r6
 80014c8:	3b01      	subs	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	2300      	movs	r3, #0
 80014ce:	46b2      	mov	sl, r6
 80014d0:	469b      	mov	fp, r3
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014e6:	2300      	movs	r3, #0
 80014e8:	4630      	mov	r0, r6
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	f04f 0300 	mov.w	r3, #0
 80014f4:	00cb      	lsls	r3, r1, #3
 80014f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014fa:	00c2      	lsls	r2, r0, #3
 80014fc:	1df3      	adds	r3, r6, #7
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	ebad 0d03 	sub.w	sp, sp, r3
 8001506:	466b      	mov	r3, sp
 8001508:	3300      	adds	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
        memset(buffer, AES_BLOCK_SIZE - (msg_len % AES_BLOCK_SIZE), padded_len);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	f1c3 0310 	rsb	r3, r3, #16
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4619      	mov	r1, r3
 800151a:	6938      	ldr	r0, [r7, #16]
 800151c:	f008 fb65 	bl	8009bea <memset>
        memcpy(buffer, recData, msg_len);
 8001520:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <process_USB_data+0x150>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	4619      	mov	r1, r3
 8001528:	6938      	ldr	r0, [r7, #16]
 800152a:	f008 fbee 	bl	8009d0a <memcpy>

        AES_ctx_set_iv(&ctx, iv);
 800152e:	492f      	ldr	r1, [pc, #188]	@ (80015ec <process_USB_data+0x158>)
 8001530:	482f      	ldr	r0, [pc, #188]	@ (80015f0 <process_USB_data+0x15c>)
 8001532:	f7ff fd9f 	bl	8001074 <AES_ctx_set_iv>
        AES_CBC_encrypt_buffer(&ctx, buffer, padded_len);
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	482d      	ldr	r0, [pc, #180]	@ (80015f0 <process_USB_data+0x15c>)
 800153c:	f7ff ff7e 	bl	800143c <AES_CBC_encrypt_buffer>

        uint8_t tx_data[padded_len + 1];
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	1c59      	adds	r1, r3, #1
 8001544:	460b      	mov	r3, r1
 8001546:	3b01      	subs	r3, #1
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	2300      	movs	r3, #0
 800154c:	4688      	mov	r8, r1
 800154e:	4699      	mov	r9, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800155c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001560:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001564:	2300      	movs	r3, #0
 8001566:	460c      	mov	r4, r1
 8001568:	461d      	mov	r5, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	00eb      	lsls	r3, r5, #3
 8001574:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001578:	00e2      	lsls	r2, r4, #3
 800157a:	1dcb      	adds	r3, r1, #7
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	ebad 0d03 	sub.w	sp, sp, r3
 8001584:	466b      	mov	r3, sp
 8001586:	3300      	adds	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
        tx_data[0] = (uint8_t)msg_len;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	701a      	strb	r2, [r3, #0]
        memcpy(&tx_data[1], buffer, padded_len);
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	6939      	ldr	r1, [r7, #16]
 800159a:	4618      	mov	r0, r3
 800159c:	f008 fbb5 	bl	8009d0a <memcpy>

        if (NRF24_Transmit(tx_data)) {
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f000 fb19 	bl	8001bd8 <NRF24_Transmit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <process_USB_data+0x122>
            CDC_Transmit_FS((uint8_t *)"Data Sent Successfully\r\n", 25);
 80015ac:	2119      	movs	r1, #25
 80015ae:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <process_USB_data+0x160>)
 80015b0:	f007 f8ae 	bl	8008710 <CDC_Transmit_FS>
 80015b4:	e003      	b.n	80015be <process_USB_data+0x12a>
        } else {
            CDC_Transmit_FS((uint8_t *)"Data Transmission Failed\r\n", 27);
 80015b6:	211b      	movs	r1, #27
 80015b8:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <process_USB_data+0x164>)
 80015ba:	f007 f8a9 	bl	8008710 <CDC_Transmit_FS>
        }

        free(recData);
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <process_USB_data+0x150>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f007 fcfe 	bl	8008fc4 <free>
        recData = NULL;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <process_USB_data+0x150>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
        recDataSize = 0;
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <process_USB_data+0x154>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	f8d7 d004 	ldr.w	sp, [r7, #4]
    }
}
 80015d8:	bf00      	nop
 80015da:	3724      	adds	r7, #36	@ 0x24
 80015dc:	46bd      	mov	sp, r7
 80015de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015e2:	bf00      	nop
 80015e4:	20000348 	.word	0x20000348
 80015e8:	2000034c 	.word	0x2000034c
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000350 	.word	0x20000350
 80015f4:	0800b8d8 	.word	0x0800b8d8
 80015f8:	0800b8f4 	.word	0x0800b8f4

080015fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001602:	f000 fcd3 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001606:	f000 f82b 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160a:	f000 f8c7 	bl	800179c <MX_GPIO_Init>
  MX_SPI1_Init();
 800160e:	f000 f88f 	bl	8001730 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001612:	f006 ff7f 	bl	8008514 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  AES_init_ctx_iv(&ctx, aes_key, iv);
 8001616:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <main+0x50>)
 8001618:	490d      	ldr	r1, [pc, #52]	@ (8001650 <main+0x54>)
 800161a:	480e      	ldr	r0, [pc, #56]	@ (8001654 <main+0x58>)
 800161c:	f7ff fd14 	bl	8001048 <AES_init_ctx_iv>
  NRF24_Init();
 8001620:	f000 fa8c 	bl	8001b3c <NRF24_Init>
  uint8_t tx_address[5] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
 8001624:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <main+0x5c>)
 8001626:	463b      	mov	r3, r7
 8001628:	e892 0003 	ldmia.w	r2, {r0, r1}
 800162c:	6018      	str	r0, [r3, #0]
 800162e:	3304      	adds	r3, #4
 8001630:	7019      	strb	r1, [r3, #0]
  NRF24_TxMode(tx_address, 125);
 8001632:	463b      	mov	r3, r7
 8001634:	217d      	movs	r1, #125	@ 0x7d
 8001636:	4618      	mov	r0, r3
 8001638:	f000 faa7 	bl	8001b8a <NRF24_TxMode>
  CDC_Transmit_FS((uint8_t *)"USB Ready\r\n", 11);
 800163c:	210b      	movs	r1, #11
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <main+0x60>)
 8001640:	f007 f866 	bl	8008710 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_USB_data();
 8001644:	f7ff ff26 	bl	8001494 <process_USB_data>
 8001648:	e7fc      	b.n	8001644 <main+0x48>
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000
 8001650:	0800ba88 	.word	0x0800ba88
 8001654:	20000350 	.word	0x20000350
 8001658:	0800b91c 	.word	0x0800b91c
 800165c:	0800b910 	.word	0x0800b910

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0320 	add.w	r3, r7, #32
 800166a:	2230      	movs	r2, #48	@ 0x30
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f008 fabb 	bl	8009bea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <SystemClock_Config+0xc8>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168c:	4a26      	ldr	r2, [pc, #152]	@ (8001728 <SystemClock_Config+0xc8>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001692:	6413      	str	r3, [r2, #64]	@ 0x40
 8001694:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <SystemClock_Config+0xc8>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	4b21      	ldr	r3, [pc, #132]	@ (800172c <SystemClock_Config+0xcc>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a20      	ldr	r2, [pc, #128]	@ (800172c <SystemClock_Config+0xcc>)
 80016aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <SystemClock_Config+0xcc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016bc:	2302      	movs	r3, #2
 80016be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c0:	2301      	movs	r3, #1
 80016c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c4:	2310      	movs	r3, #16
 80016c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2302      	movs	r3, #2
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80016d4:	2364      	movs	r3, #100	@ 0x64
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	2302      	movs	r3, #2
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016dc:	2304      	movs	r3, #4
 80016de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 f9f9 	bl	8003adc <HAL_RCC_OscConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f0:	f000 f8ca 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f4:	230f      	movs	r3, #15
 80016f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	2302      	movs	r3, #2
 80016fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001700:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2103      	movs	r1, #3
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fc5b 	bl	8003fcc <HAL_RCC_ClockConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800171c:	f000 f8b4 	bl	8001888 <Error_Handler>
  }
}
 8001720:	bf00      	nop
 8001722:	3750      	adds	r7, #80	@ 0x50
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001736:	4a18      	ldr	r2, [pc, #96]	@ (8001798 <MX_SPI1_Init+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800173a:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <MX_SPI1_Init+0x64>)
 800173c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001740:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001742:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <MX_SPI1_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_SPI1_Init+0x64>)
 800175c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001760:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001764:	2218      	movs	r2, #24
 8001766:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_SPI1_Init+0x64>)
 800177c:	220a      	movs	r2, #10
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	@ (8001794 <MX_SPI1_Init+0x64>)
 8001782:	f002 fddb 	bl	800433c <HAL_SPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800178c:	f000 f87c 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200002f0 	.word	0x200002f0
 8001798:	40013000 	.word	0x40013000

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a30      	ldr	r2, [pc, #192]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b2e      	ldr	r3, [pc, #184]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a29      	ldr	r2, [pc, #164]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b27      	ldr	r3, [pc, #156]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b23      	ldr	r3, [pc, #140]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a22      	ldr	r2, [pc, #136]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <MX_GPIO_Init+0xe0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b1c      	ldr	r3, [pc, #112]	@ (800187c <MX_GPIO_Init+0xe0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <MX_GPIO_Init+0xe0>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <MX_GPIO_Init+0xe0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001828:	4815      	ldr	r0, [pc, #84]	@ (8001880 <MX_GPIO_Init+0xe4>)
 800182a:	f000 feeb 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2103      	movs	r1, #3
 8001832:	4814      	ldr	r0, [pc, #80]	@ (8001884 <MX_GPIO_Init+0xe8>)
 8001834:	f000 fee6 	bl	8002604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	480b      	ldr	r0, [pc, #44]	@ (8001880 <MX_GPIO_Init+0xe4>)
 8001852:	f000 fd53 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001856:	2303      	movs	r3, #3
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_GPIO_Init+0xe8>)
 800186e:	f000 fd45 	bl	80022fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	@ 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40020800 	.word	0x40020800
 8001884:	40020400 	.word	0x40020400

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <Error_Handler+0x8>

08001894 <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2101      	movs	r1, #1
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <CS_Select+0x14>)
 800189e:	f000 feb1 	bl	8002604 <HAL_GPIO_WritePin>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40020400 	.word	0x40020400

080018ac <CS_UnSelect>:

void CS_UnSelect (void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	2101      	movs	r1, #1
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <CS_UnSelect+0x14>)
 80018b6:	f000 fea5 	bl	8002604 <HAL_GPIO_WritePin>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40020400 	.word	0x40020400

080018c4 <CE_Enable>:


void CE_Enable (void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2102      	movs	r1, #2
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <CE_Enable+0x14>)
 80018ce:	f000 fe99 	bl	8002604 <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40020400 	.word	0x40020400

080018dc <CE_Disable>:

void CE_Disable (void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2102      	movs	r1, #2
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <CE_Disable+0x14>)
 80018e6:	f000 fe8d 	bl	8002604 <HAL_GPIO_WritePin>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020400 	.word	0x40020400

080018f4 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f043 0320 	orr.w	r3, r3, #32
 800190a:	b2db      	uxtb	r3, r3
 800190c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001912:	f7ff ffbf 	bl	8001894 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8001916:	f107 010c 	add.w	r1, r7, #12
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	2202      	movs	r2, #2
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <nrf24_WriteReg+0x40>)
 8001922:	f002 fd94 	bl	800444e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001926:	f7ff ffc1 	bl	80018ac <CS_UnSelect>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200002f0 	.word	0x200002f0

08001938 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	f043 0320 	orr.w	r3, r3, #32
 800194c:	b2db      	uxtb	r3, r3
 800194e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001950:	f7ff ffa0 	bl	8001894 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001954:	f107 0114 	add.w	r1, r7, #20
 8001958:	2364      	movs	r3, #100	@ 0x64
 800195a:	2201      	movs	r2, #1
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <nrf24_WriteRegMulti+0x48>)
 800195e:	f002 fd76 	bl	800444e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	b29a      	uxth	r2, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <nrf24_WriteRegMulti+0x48>)
 800196e:	f002 fd6e 	bl	800444e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001972:	f7ff ff9b 	bl	80018ac <CS_UnSelect>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002f0 	.word	0x200002f0

08001984 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001992:	f7ff ff7f 	bl	8001894 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001996:	1df9      	adds	r1, r7, #7
 8001998:	2364      	movs	r3, #100	@ 0x64
 800199a:	2201      	movs	r2, #1
 800199c:	4808      	ldr	r0, [pc, #32]	@ (80019c0 <nrf24_ReadReg+0x3c>)
 800199e:	f002 fd56 	bl	800444e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80019a2:	f107 010f 	add.w	r1, r7, #15
 80019a6:	2364      	movs	r3, #100	@ 0x64
 80019a8:	2201      	movs	r2, #1
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <nrf24_ReadReg+0x3c>)
 80019ac:	f002 fe93 	bl	80046d6 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80019b0:	f7ff ff7c 	bl	80018ac <CS_UnSelect>

	return data;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200002f0 	.word	0x200002f0

080019c4 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80019ce:	f7ff ff61 	bl	8001894 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80019d2:	1df9      	adds	r1, r7, #7
 80019d4:	2364      	movs	r3, #100	@ 0x64
 80019d6:	2201      	movs	r2, #1
 80019d8:	4804      	ldr	r0, [pc, #16]	@ (80019ec <nrfsendCmd+0x28>)
 80019da:	f002 fd38 	bl	800444e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80019de:	f7ff ff65 	bl	80018ac <CS_UnSelect>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200002f0 	.word	0x200002f0

080019f0 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d104      	bne.n	8001a0a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8001a00:	2100      	movs	r1, #0
 8001a02:	2007      	movs	r0, #7
 8001a04:	f7ff ff76 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001a08:	e090      	b.n	8001b2c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b17      	cmp	r3, #23
 8001a0e:	d104      	bne.n	8001a1a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001a10:	2111      	movs	r1, #17
 8001a12:	2017      	movs	r0, #23
 8001a14:	f7ff ff6e 	bl	80018f4 <nrf24_WriteReg>
}
 8001a18:	e088      	b.n	8001b2c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001a1a:	2108      	movs	r1, #8
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ff69 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001a22:	213f      	movs	r1, #63	@ 0x3f
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff ff65 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f7ff ff61 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001a32:	2103      	movs	r1, #3
 8001a34:	2003      	movs	r0, #3
 8001a36:	f7ff ff5d 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	2004      	movs	r0, #4
 8001a3e:	f7ff ff59 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001a42:	2102      	movs	r1, #2
 8001a44:	2005      	movs	r0, #5
 8001a46:	f7ff ff55 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001a4a:	210e      	movs	r1, #14
 8001a4c:	2006      	movs	r0, #6
 8001a4e:	f7ff ff51 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001a52:	2100      	movs	r1, #0
 8001a54:	2007      	movs	r0, #7
 8001a56:	f7ff ff4d 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2008      	movs	r0, #8
 8001a5e:	f7ff ff49 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2009      	movs	r0, #9
 8001a66:	f7ff ff45 	bl	80018f4 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001a6a:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <nrf24_reset+0x144>)
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a74:	6018      	str	r0, [r3, #0]
 8001a76:	3304      	adds	r3, #4
 8001a78:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001a7a:	f107 0318 	add.w	r3, r7, #24
 8001a7e:	2205      	movs	r2, #5
 8001a80:	4619      	mov	r1, r3
 8001a82:	200a      	movs	r0, #10
 8001a84:	f7ff ff58 	bl	8001938 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001a88:	4a2b      	ldr	r2, [pc, #172]	@ (8001b38 <nrf24_reset+0x148>)
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a92:	6018      	str	r0, [r3, #0]
 8001a94:	3304      	adds	r3, #4
 8001a96:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	200b      	movs	r0, #11
 8001aa2:	f7ff ff49 	bl	8001938 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8001aa6:	21c3      	movs	r1, #195	@ 0xc3
 8001aa8:	200c      	movs	r0, #12
 8001aaa:	f7ff ff23 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8001aae:	21c4      	movs	r1, #196	@ 0xc4
 8001ab0:	200d      	movs	r0, #13
 8001ab2:	f7ff ff1f 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8001ab6:	21c5      	movs	r1, #197	@ 0xc5
 8001ab8:	200e      	movs	r0, #14
 8001aba:	f7ff ff1b 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8001abe:	21c6      	movs	r1, #198	@ 0xc6
 8001ac0:	200f      	movs	r0, #15
 8001ac2:	f7ff ff17 	bl	80018f4 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b34 <nrf24_reset+0x144>)
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad0:	6018      	str	r0, [r3, #0]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2205      	movs	r2, #5
 8001adc:	4619      	mov	r1, r3
 8001ade:	2010      	movs	r0, #16
 8001ae0:	f7ff ff2a 	bl	8001938 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2011      	movs	r0, #17
 8001ae8:	f7ff ff04 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001aec:	2100      	movs	r1, #0
 8001aee:	2012      	movs	r0, #18
 8001af0:	f7ff ff00 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8001af4:	2100      	movs	r1, #0
 8001af6:	2013      	movs	r0, #19
 8001af8:	f7ff fefc 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001afc:	2100      	movs	r1, #0
 8001afe:	2014      	movs	r0, #20
 8001b00:	f7ff fef8 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8001b04:	2100      	movs	r1, #0
 8001b06:	2015      	movs	r0, #21
 8001b08:	f7ff fef4 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2016      	movs	r0, #22
 8001b10:	f7ff fef0 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001b14:	2111      	movs	r1, #17
 8001b16:	2017      	movs	r0, #23
 8001b18:	f7ff feec 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	201c      	movs	r0, #28
 8001b20:	f7ff fee8 	bl	80018f4 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001b24:	2100      	movs	r1, #0
 8001b26:	201d      	movs	r0, #29
 8001b28:	f7ff fee4 	bl	80018f4 <nrf24_WriteReg>
}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0800b924 	.word	0x0800b924
 8001b38:	0800b92c 	.word	0x0800b92c

08001b3c <NRF24_Init>:




void NRF24_Init (void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001b40:	f7ff fecc 	bl	80018dc <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff ff53 	bl	80019f0 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fed1 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001b52:	2100      	movs	r1, #0
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff fecd 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7ff fec9 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001b62:	2103      	movs	r1, #3
 8001b64:	2003      	movs	r0, #3
 8001b66:	f7ff fec5 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	f7ff fec1 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001b72:	2100      	movs	r1, #0
 8001b74:	2005      	movs	r0, #5
 8001b76:	f7ff febd 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001b7a:	210e      	movs	r1, #14
 8001b7c:	2006      	movs	r0, #6
 8001b7e:	f7ff feb9 	bl	80018f4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001b82:	f7ff fe9f 	bl	80018c4 <CE_Enable>

}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8001b96:	f7ff fea1 	bl	80018dc <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2005      	movs	r0, #5
 8001ba0:	f7ff fea8 	bl	80018f4 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	2010      	movs	r0, #16
 8001baa:	f7ff fec5 	bl	8001938 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f7ff fee8 	bl	8001984 <nrf24_ReadReg>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	73fb      	strb	r3, [r7, #15]
//	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff fe95 	bl	80018f4 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001bca:	f7ff fe7b 	bl	80018c4 <CE_Enable>
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 8001be4:	f7ff fe56 	bl	8001894 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8001be8:	23a0      	movs	r3, #160	@ 0xa0
 8001bea:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001bec:	f107 010e 	add.w	r1, r7, #14
 8001bf0:	2364      	movs	r3, #100	@ 0x64
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4816      	ldr	r0, [pc, #88]	@ (8001c50 <NRF24_Transmit+0x78>)
 8001bf6:	f002 fc2a 	bl	800444e <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	2220      	movs	r2, #32
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <NRF24_Transmit+0x78>)
 8001c04:	f002 fc23 	bl	800444e <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8001c08:	f7ff fe50 	bl	80018ac <CS_UnSelect>

	HAL_Delay(1);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 fa3f 	bl	8002090 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8001c12:	2017      	movs	r0, #23
 8001c14:	f7ff feb6 	bl	8001984 <nrf24_ReadReg>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00f      	beq.n	8001c46 <NRF24_Transmit+0x6e>
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 8001c30:	23e1      	movs	r3, #225	@ 0xe1
 8001c32:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fec4 	bl	80019c4 <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8001c3c:	2017      	movs	r0, #23
 8001c3e:	f7ff fed7 	bl	80019f0 <nrf24_reset>

		return 1;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <NRF24_Transmit+0x70>
	}

	return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200002f0 	.word	0x200002f0

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca0 <HAL_MspInit+0x4c>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <HAL_MspInit+0x4c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ca0 <HAL_MspInit+0x4c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	@ (8001d28 <HAL_SPI_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12b      	bne.n	8001d1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <HAL_SPI_MspInit+0x88>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	4a17      	ldr	r2, [pc, #92]	@ (8001d2c <HAL_SPI_MspInit+0x88>)
 8001cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_SPI_MspInit+0x88>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_SPI_MspInit+0x88>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_SPI_MspInit+0x88>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_SPI_MspInit+0x88>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cfe:	23e0      	movs	r3, #224	@ 0xe0
 8001d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <HAL_SPI_MspInit+0x8c>)
 8001d1a:	f000 faef 	bl	80022fc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	@ 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40013000 	.word	0x40013000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <NMI_Handler+0x4>

08001d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d8a:	f000 f961 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <OTG_FS_IRQHandler+0x10>)
 8001d9a:	f000 fd90 	bl	80028be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200018f8 	.word	0x200018f8

08001da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_kill>:

int _kill(int pid, int sig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc2:	f007 ff75 	bl	8009cb0 <__errno>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2216      	movs	r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
  return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_exit>:

void _exit (int status)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffe7 	bl	8001db8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dea:	bf00      	nop
 8001dec:	e7fd      	b.n	8001dea <_exit+0x12>

08001dee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e00a      	b.n	8001e16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e00:	f3af 8000 	nop.w
 8001e04:	4601      	mov	r1, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	60ba      	str	r2, [r7, #8]
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dbf0      	blt.n	8001e00 <_read+0x12>
  }

  return len;
 8001e1e:	687b      	ldr	r3, [r7, #4]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e009      	b.n	8001e4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbf1      	blt.n	8001e3a <_write+0x12>
  }
  return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_close>:

int _close(int file)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e88:	605a      	str	r2, [r3, #4]
  return 0;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <_isatty>:

int _isatty(int file)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <_sbrk+0x5c>)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <_sbrk+0x60>)
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <_sbrk+0x64>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <_sbrk+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef8:	f007 feda 	bl	8009cb0 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	220c      	movs	r2, #12
 8001f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f06:	e009      	b.n	8001f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a05      	ldr	r2, [pc, #20]	@ (8001f2c <_sbrk+0x64>)
 8001f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20020000 	.word	0x20020000
 8001f28:	00000400 	.word	0x00000400
 8001f2c:	20000410 	.word	0x20000410
 8001f30:	20002148 	.word	0x20002148

08001f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f38:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <SystemInit+0x20>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <SystemInit+0x20>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5c:	f7ff ffea 	bl	8001f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	@ (8001f98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f007 fe99 	bl	8009cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8a:	f7ff fb37 	bl	80015fc <main>
  bx  lr    
 8001f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001f9c:	0800be28 	.word	0x0800be28
  ldr r2, =_sbss
 8001fa0:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8001fa4:	20002148 	.word	0x20002148

08001fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC_IRQHandler>
	...

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <HAL_Init+0x40>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fec <HAL_Init+0x40>)
 8001fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	@ (8001fec <HAL_Init+0x40>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f94f 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7ff fe38 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f967 	bl	80022e2 <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800202c:	f000 f92f 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	@ (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000010 	.word	0x20000010
 8002048:	20000018 	.word	0x20000018
 800204c:	20000014 	.word	0x20000014

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000018 	.word	0x20000018
 8002074:	20000414 	.word	0x20000414

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000414 	.word	0x20000414

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff ffee 	bl	8002078 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020a8:	d005      	beq.n	80020b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_Delay+0x44>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020b6:	bf00      	nop
 80020b8:	f7ff ffde 	bl	8002078 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d8f7      	bhi.n	80020b8 <HAL_Delay+0x28>
  {
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000018 	.word	0x20000018

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	@ (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	@ (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	@ (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	@ (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	@ 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	@ 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff29 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff3e 	bl	8002120 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff31 	bl	800213c <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	e159      	b.n	80025cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	429a      	cmp	r2, r3
 8002332:	f040 8148 	bne.w	80025c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d005      	beq.n	800234e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234a:	2b02      	cmp	r3, #2
 800234c:	d130      	bne.n	80023b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	2203      	movs	r2, #3
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002384:	2201      	movs	r2, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 0201 	and.w	r2, r3, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d017      	beq.n	80023ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d123      	bne.n	8002440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3208      	adds	r2, #8
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	69b9      	ldr	r1, [r7, #24]
 800243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0203 	and.w	r2, r3, #3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a2 	beq.w	80025c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b57      	ldr	r3, [pc, #348]	@ (80025e4 <HAL_GPIO_Init+0x2e8>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248a:	4a56      	ldr	r2, [pc, #344]	@ (80025e4 <HAL_GPIO_Init+0x2e8>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002490:	6453      	str	r3, [r2, #68]	@ 0x44
 8002492:	4b54      	ldr	r3, [pc, #336]	@ (80025e4 <HAL_GPIO_Init+0x2e8>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249e:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_GPIO_Init+0x2ec>)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	3302      	adds	r3, #2
 80024a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	220f      	movs	r2, #15
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a49      	ldr	r2, [pc, #292]	@ (80025ec <HAL_GPIO_Init+0x2f0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d019      	beq.n	80024fe <HAL_GPIO_Init+0x202>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a48      	ldr	r2, [pc, #288]	@ (80025f0 <HAL_GPIO_Init+0x2f4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d013      	beq.n	80024fa <HAL_GPIO_Init+0x1fe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a47      	ldr	r2, [pc, #284]	@ (80025f4 <HAL_GPIO_Init+0x2f8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_GPIO_Init+0x1fa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a46      	ldr	r2, [pc, #280]	@ (80025f8 <HAL_GPIO_Init+0x2fc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <HAL_GPIO_Init+0x1f6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a45      	ldr	r2, [pc, #276]	@ (80025fc <HAL_GPIO_Init+0x300>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_GPIO_Init+0x1f2>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e008      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024f2:	2303      	movs	r3, #3
 80024f4:	e004      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_GPIO_Init+0x204>
 80024fe:	2300      	movs	r3, #0
 8002500:	69fa      	ldr	r2, [r7, #28]
 8002502:	f002 0203 	and.w	r2, r2, #3
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	4093      	lsls	r3, r2
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002510:	4935      	ldr	r1, [pc, #212]	@ (80025e8 <HAL_GPIO_Init+0x2ec>)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251e:	4b38      	ldr	r3, [pc, #224]	@ (8002600 <HAL_GPIO_Init+0x304>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002542:	4a2f      	ldr	r2, [pc, #188]	@ (8002600 <HAL_GPIO_Init+0x304>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002548:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <HAL_GPIO_Init+0x304>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800256c:	4a24      	ldr	r2, [pc, #144]	@ (8002600 <HAL_GPIO_Init+0x304>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002572:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <HAL_GPIO_Init+0x304>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002596:	4a1a      	ldr	r2, [pc, #104]	@ (8002600 <HAL_GPIO_Init+0x304>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259c:	4b18      	ldr	r3, [pc, #96]	@ (8002600 <HAL_GPIO_Init+0x304>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002600 <HAL_GPIO_Init+0x304>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b0f      	cmp	r3, #15
 80025d0:	f67f aea2 	bls.w	8002318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3724      	adds	r7, #36	@ 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40013800 	.word	0x40013800
 80025ec:	40020000 	.word	0x40020000
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40021000 	.word	0x40021000
 8002600:	40013c00 	.word	0x40013c00

08002604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002614:	787b      	ldrb	r3, [r7, #1]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261a:	887a      	ldrh	r2, [r7, #2]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002620:	e003      	b.n	800262a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	619a      	str	r2, [r3, #24]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af02      	add	r7, sp, #8
 800263c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e101      	b.n	800284c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f006 f99c 	bl	80089a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002676:	d102      	bne.n	800267e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fd43 	bl	800510e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7c1a      	ldrb	r2, [r3, #16]
 8002690:	f88d 2000 	strb.w	r2, [sp]
 8002694:	3304      	adds	r3, #4
 8002696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002698:	f002 fc22 	bl	8004ee0 <USB_CoreInit>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0ce      	b.n	800284c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fd3b 	bl	8005130 <USB_SetCurrentMode>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0bf      	b.n	800284c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e04a      	b.n	8002768 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3315      	adds	r3, #21
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3314      	adds	r3, #20
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	b298      	uxth	r0, r3
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	332e      	adds	r3, #46	@ 0x2e
 800270e:	4602      	mov	r2, r0
 8002710:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3318      	adds	r3, #24
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	331c      	adds	r3, #28
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3320      	adds	r3, #32
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	3324      	adds	r3, #36	@ 0x24
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	3301      	adds	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	791b      	ldrb	r3, [r3, #4]
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	429a      	cmp	r2, r3
 8002770:	d3af      	bcc.n	80026d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
 8002776:	e044      	b.n	8002802 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027a0:	7bfa      	ldrb	r2, [r7, #15]
 80027a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
 80027fe:	3301      	adds	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	791b      	ldrb	r3, [r3, #4]
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	429a      	cmp	r2, r3
 800280a:	d3b5      	bcc.n	8002778 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7c1a      	ldrb	r2, [r3, #16]
 8002814:	f88d 2000 	strb.w	r2, [sp]
 8002818:	3304      	adds	r3, #4
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	f002 fcd4 	bl	80051c8 <USB_DevInit>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e00c      	b.n	800284c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fd1e 	bl	8006286 <USB_DevDisconnect>

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_PCD_Start+0x1c>
 800286c:	2302      	movs	r3, #2
 800286e:	e022      	b.n	80028b6 <HAL_PCD_Start+0x62>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002890:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fc25 	bl	80050ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fccc 	bl	8006244 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028be:	b590      	push	{r4, r7, lr}
 80028c0:	b08d      	sub	sp, #52	@ 0x34
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fd8a 	bl	80063ee <USB_GetMode>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f040 848c 	bne.w	80031fa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fcee 	bl	80062c8 <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8482 	beq.w	80031f8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f003 fcdb 	bl	80062c8 <USB_ReadInterrupts>
 8002912:	4603      	mov	r3, r0
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d107      	bne.n	800292c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f002 0202 	and.w	r2, r2, #2
 800292a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fcc9 	bl	80062c8 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b10      	cmp	r3, #16
 800293e:	d161      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0210 	bic.w	r2, r2, #16
 800294e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	2b02      	cmp	r3, #2
 800297a:	d124      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d035      	beq.n	80029f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	6a38      	ldr	r0, [r7, #32]
 800299c:	f003 fb00 	bl	8005fa0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ac:	441a      	add	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029be:	441a      	add	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	e016      	b.n	80029f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	0c5b      	lsrs	r3, r3, #17
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d110      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029d8:	2208      	movs	r2, #8
 80029da:	4619      	mov	r1, r3
 80029dc:	6a38      	ldr	r0, [r7, #32]
 80029de:	f003 fadf 	bl	8005fa0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ee:	441a      	add	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0210 	orr.w	r2, r2, #16
 8002a02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 fc5d 	bl	80062c8 <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a18:	f040 80a7 	bne.w	8002b6a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fc62 	bl	80062ee <USB_ReadDevAllOutEpInterrupt>
 8002a2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a2c:	e099      	b.n	8002b62 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 808e 	beq.w	8002b56 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fc86 	bl	8006356 <USB_ReadDevOutEPInterrupt>
 8002a4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00c      	beq.n	8002a70 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	2301      	movs	r3, #1
 8002a66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 fea4 	bl	80037b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	015a      	lsls	r2, r3, #5
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	4413      	add	r3, r2
 8002a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a86:	461a      	mov	r2, r3
 8002a88:	2308      	movs	r3, #8
 8002a8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 ff7a 	bl	8003988 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2310      	movs	r3, #16
 8002aae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d030      	beq.n	8002b1c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	2b80      	cmp	r3, #128	@ 0x80
 8002ac4:	d109      	bne.n	8002ada <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ad4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ad8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	78db      	ldrb	r3, [r3, #3]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d108      	bne.n	8002b0a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2200      	movs	r2, #0
 8002afc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f006 f847 	bl	8008b98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b16:	461a      	mov	r2, r3
 8002b18:	2302      	movs	r3, #2
 8002b1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b32:	461a      	mov	r2, r3
 8002b34:	2320      	movs	r3, #32
 8002b36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af62 	bne.w	8002a2e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fbaa 	bl	80062c8 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b7e:	f040 80db 	bne.w	8002d38 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fbcb 	bl	8006322 <USB_ReadDevAllInEpInterrupt>
 8002b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b92:	e0cd      	b.n	8002d30 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80c2 	beq.w	8002d24 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fbf1 	bl	8006392 <USB_ReadDevInEPInterrupt>
 8002bb0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d057      	beq.n	8002c6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69f9      	ldr	r1, [r7, #28]
 8002bd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002bdc:	4013      	ands	r3, r2
 8002bde:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bec:	461a      	mov	r2, r3
 8002bee:	2301      	movs	r3, #1
 8002bf0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	799b      	ldrb	r3, [r3, #6]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d132      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	3320      	adds	r3, #32
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4403      	add	r3, r0
 8002c1a:	331c      	adds	r3, #28
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4419      	add	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4403      	add	r3, r0
 8002c2e:	3320      	adds	r3, #32
 8002c30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d113      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x3a2>
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	3324      	adds	r3, #36	@ 0x24
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d108      	bne.n	8002c60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	f003 fbf8 	bl	8006450 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f005 ff1b 	bl	8008aa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c82:	461a      	mov	r2, r3
 8002c84:	2308      	movs	r3, #8
 8002c86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2340      	movs	r3, #64	@ 0x40
 8002cbe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d023      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ccc:	6a38      	ldr	r0, [r7, #32]
 8002cce:	f002 fbdf 	bl	8005490 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	3310      	adds	r3, #16
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f005 ff5e 	bl	8008bbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2302      	movs	r3, #2
 8002d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fcbd 	bl	800369e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	3301      	adds	r3, #1
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f47f af2e 	bne.w	8002b94 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fac3 	bl	80062c8 <USB_ReadInterrupts>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d4c:	d122      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d108      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d74:	2100      	movs	r1, #0
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fea4 	bl	8003ac4 <HAL_PCDEx_LPM_Callback>
 8002d7c:	e002      	b.n	8002d84 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f005 fefc 	bl	8008b7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fa95 	bl	80062c8 <USB_ReadInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002da8:	d112      	bne.n	8002dd0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d102      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f005 feb8 	bl	8008b30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002dce:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fa77 	bl	80062c8 <USB_ReadInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de4:	f040 80b7 	bne.w	8002f56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2110      	movs	r1, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f002 fb44 	bl	8005490 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0c:	e046      	b.n	8002e9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e32:	0151      	lsls	r1, r2, #5
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	440a      	add	r2, r1
 8002e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e3c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e66:	0151      	lsls	r1, r2, #5
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	440a      	add	r2, r1
 8002e6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	69fa      	ldr	r2, [r7, #28]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e98:	3301      	adds	r3, #1
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	791b      	ldrb	r3, [r3, #4]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d3b2      	bcc.n	8002e0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eb6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002eba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7bdb      	ldrb	r3, [r3, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d016      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed4:	f043 030b 	orr.w	r3, r3, #11
 8002ed8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eea:	f043 030b 	orr.w	r3, r3, #11
 8002eee:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef0:	e015      	b.n	8002f1e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f04:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f18:	f043 030b 	orr.w	r3, r3, #11
 8002f1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f2c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f40:	461a      	mov	r2, r3
 8002f42:	f003 fa85 	bl	8006450 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f003 f9b4 	bl	80062c8 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f6a:	d123      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f003 fa4a 	bl	800640a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fb01 	bl	8005582 <USB_GetDevSpeed>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681c      	ldr	r4, [r3, #0]
 8002f8c:	f001 f9ca 	bl	8004324 <HAL_RCC_GetHCLKFreq>
 8002f90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f96:	461a      	mov	r2, r3
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f002 f805 	bl	8004fa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f005 fda7 	bl	8008af2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 f985 	bl	80062c8 <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d10a      	bne.n	8002fde <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f005 fd84 	bl	8008ad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f002 0208 	and.w	r2, r2, #8
 8002fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f970 	bl	80062c8 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	2b80      	cmp	r3, #128	@ 0x80
 8002ff0:	d123      	bne.n	800303a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
 8003002:	e014      	b.n	800302e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003008:	4613      	mov	r3, r2
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fb0a 	bl	800363c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	3301      	adds	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	791b      	ldrb	r3, [r3, #4]
 8003032:	461a      	mov	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	4293      	cmp	r3, r2
 8003038:	d3e4      	bcc.n	8003004 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f003 f942 	bl	80062c8 <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800304a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800304e:	d13c      	bne.n	80030ca <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003050:	2301      	movs	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	@ 0x24
 8003054:	e02b      	b.n	80030ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3318      	adds	r3, #24
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d115      	bne.n	80030a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800307c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800307e:	2b00      	cmp	r3, #0
 8003080:	da12      	bge.n	80030a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3317      	adds	r3, #23
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 faca 	bl	800363c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	3301      	adds	r3, #1
 80030ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	791b      	ldrb	r3, [r3, #4]
 80030b2:	461a      	mov	r2, r3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d3cd      	bcc.n	8003056 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 f8fa 	bl	80062c8 <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030de:	d156      	bne.n	800318e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e0:	2301      	movs	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	e045      	b.n	8003172 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d12e      	bne.n	800316c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800310e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003110:	2b00      	cmp	r3, #0
 8003112:	da2b      	bge.n	800316c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003120:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003124:	429a      	cmp	r2, r3
 8003126:	d121      	bne.n	800316c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003164:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003168:	6053      	str	r3, [r2, #4]
            break;
 800316a:	e008      	b.n	800317e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	3301      	adds	r3, #1
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	791b      	ldrb	r3, [r3, #4]
 8003176:	461a      	mov	r2, r3
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	4293      	cmp	r3, r2
 800317c:	d3b3      	bcc.n	80030e6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800318c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f003 f898 	bl	80062c8 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a2:	d10a      	bne.n	80031ba <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f005 fd1b 	bl	8008be0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 f882 	bl	80062c8 <USB_ReadInterrupts>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d115      	bne.n	80031fa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f005 fd0b 	bl	8008bfc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	e000      	b.n	80031fa <HAL_PCD_IRQHandler+0x93c>
      return;
 80031f8:	bf00      	nop
    }
  }
}
 80031fa:	3734      	adds	r7, #52	@ 0x34
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd90      	pop	{r4, r7, pc}

08003200 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_PCD_SetAddress+0x1a>
 8003216:	2302      	movs	r3, #2
 8003218:	e012      	b.n	8003240 <HAL_PCD_SetAddress+0x40>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f002 ffe1 	bl	80061f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	70fb      	strb	r3, [r7, #3]
 800325a:	460b      	mov	r3, r1
 800325c:	803b      	strh	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326a:	2b00      	cmp	r3, #0
 800326c:	da0f      	bge.n	800328e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	3310      	adds	r3, #16
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	705a      	strb	r2, [r3, #1]
 800328c:	e00f      	b.n	80032ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032ba:	883b      	ldrh	r3, [r7, #0]
 80032bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	78ba      	ldrb	r2, [r7, #2]
 80032c8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	461a      	mov	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032dc:	78bb      	ldrb	r3, [r7, #2]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d102      	bne.n	80032e8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_PCD_EP_Open+0xae>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e00e      	b.n	8003314 <HAL_PCD_EP_Open+0xcc>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68f9      	ldr	r1, [r7, #12]
 8003304:	4618      	mov	r0, r3
 8003306:	f002 f961 	bl	80055cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003312:	7afb      	ldrb	r3, [r7, #11]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003328:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da0f      	bge.n	8003350 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	3310      	adds	r3, #16
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4413      	add	r3, r2
 8003344:	3304      	adds	r3, #4
 8003346:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	705a      	strb	r2, [r3, #1]
 800334e:	e00f      	b.n	8003370 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	3304      	adds	r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_PCD_EP_Close+0x6e>
 8003386:	2302      	movs	r3, #2
 8003388:	e00e      	b.n	80033a8 <HAL_PCD_EP_Close+0x8c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68f9      	ldr	r1, [r7, #12]
 8003398:	4618      	mov	r0, r3
 800339a:	f002 f99f 	bl	80056dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	460b      	mov	r3, r1
 80033be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2200      	movs	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2200      	movs	r2, #0
 80033f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f2:	7afb      	ldrb	r3, [r7, #11]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	799b      	ldrb	r3, [r3, #6]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	799b      	ldrb	r3, [r3, #6]
 8003414:	461a      	mov	r2, r3
 8003416:	6979      	ldr	r1, [r7, #20]
 8003418:	f002 fa3c 	bl	8005894 <USB_EPStartXfer>

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 020f 	and.w	r2, r3, #15
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003448:	681b      	ldr	r3, [r3, #0]
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	460b      	mov	r3, r1
 8003464:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	3310      	adds	r3, #16
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2201      	movs	r2, #1
 8003494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	b2da      	uxtb	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	799b      	ldrb	r3, [r3, #6]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	799b      	ldrb	r3, [r3, #6]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6979      	ldr	r1, [r7, #20]
 80034bc:	f002 f9ea 	bl	8005894 <USB_EPStartXfer>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	7912      	ldrb	r2, [r2, #4]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04f      	b.n	8003588 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da0f      	bge.n	8003510 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	3310      	adds	r3, #16
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	3304      	adds	r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	705a      	strb	r2, [r3, #1]
 800350e:	e00d      	b.n	800352c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	4413      	add	r3, r2
 8003522:	3304      	adds	r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2201      	movs	r2, #1
 8003530:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003532:	78fb      	ldrb	r3, [r7, #3]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_PCD_EP_SetStall+0x82>
 8003548:	2302      	movs	r3, #2
 800354a:	e01d      	b.n	8003588 <HAL_PCD_EP_SetStall+0xbe>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68f9      	ldr	r1, [r7, #12]
 800355a:	4618      	mov	r0, r3
 800355c:	f002 fd78 	bl	8006050 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7999      	ldrb	r1, [r3, #6]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003578:	461a      	mov	r2, r3
 800357a:	f002 ff69 	bl	8006450 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	7912      	ldrb	r2, [r2, #4]
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e042      	b.n	8003634 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da0f      	bge.n	80035d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	78fb      	ldrb	r3, [r7, #3]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3310      	adds	r3, #16
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2201      	movs	r2, #1
 80035d2:	705a      	strb	r2, [r3, #1]
 80035d4:	e00f      	b.n	80035f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 020f 	and.w	r2, r3, #15
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_PCD_EP_ClrStall+0x86>
 8003612:	2302      	movs	r3, #2
 8003614:	e00e      	b.n	8003634 <HAL_PCD_EP_ClrStall+0xa4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	4618      	mov	r0, r3
 8003626:	f002 fd81 	bl	800612c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364c:	2b00      	cmp	r3, #0
 800364e:	da0c      	bge.n	800366a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	3310      	adds	r3, #16
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	3304      	adds	r3, #4
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e00c      	b.n	8003684 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68f9      	ldr	r1, [r7, #12]
 800368a:	4618      	mov	r0, r3
 800368c:	f002 fba0 	bl	8005dd0 <USB_EPStopXfer>
 8003690:	4603      	mov	r3, r0
 8003692:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003694:	7afb      	ldrb	r3, [r7, #11]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b08a      	sub	sp, #40	@ 0x28
 80036a2:	af02      	add	r7, sp, #8
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	3310      	adds	r3, #16
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	3304      	adds	r3, #4
 80036c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d901      	bls.n	80036d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e06b      	b.n	80037ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d902      	bls.n	80036f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3303      	adds	r3, #3
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036fa:	e02a      	b.n	8003752 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	429a      	cmp	r2, r3
 8003710:	d902      	bls.n	8003718 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3303      	adds	r3, #3
 800371c:	089b      	lsrs	r3, r3, #2
 800371e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68d9      	ldr	r1, [r3, #12]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4603      	mov	r3, r0
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f002 fbf5 	bl	8005f24 <USB_WritePacket>

    ep->xfer_buff  += len;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	441a      	add	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695a      	ldr	r2, [r3, #20]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d809      	bhi.n	800377c <PCD_WriteEmptyTxFifo+0xde>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003770:	429a      	cmp	r2, r3
 8003772:	d203      	bcs.n	800377c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1bf      	bne.n	80036fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	429a      	cmp	r2, r3
 8003786:	d811      	bhi.n	80037ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	2201      	movs	r2, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800379c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	6939      	ldr	r1, [r7, #16]
 80037a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037a8:	4013      	ands	r3, r2
 80037aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	333c      	adds	r3, #60	@ 0x3c
 80037d0:	3304      	adds	r3, #4
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	799b      	ldrb	r3, [r3, #6]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d17b      	bne.n	80038e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	4a61      	ldr	r2, [pc, #388]	@ (8003980 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	f240 80b9 	bls.w	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80b3 	beq.w	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381a:	461a      	mov	r2, r3
 800381c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003820:	6093      	str	r3, [r2, #8]
 8003822:	e0a7      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0320 	and.w	r3, r3, #32
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	2320      	movs	r3, #32
 800383e:	6093      	str	r3, [r2, #8]
 8003840:	e098      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 8093 	bne.w	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a4b      	ldr	r2, [pc, #300]	@ (8003980 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d90f      	bls.n	8003876 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003872:	6093      	str	r3, [r2, #8]
 8003874:	e07e      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4413      	add	r3, r2
 8003888:	3304      	adds	r3, #4
 800388a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	0159      	lsls	r1, r3, #5
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	440b      	add	r3, r1
 8003898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038a2:	1ad2      	subs	r2, r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d114      	bne.n	80038d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038c0:	461a      	mov	r2, r3
 80038c2:	2101      	movs	r1, #1
 80038c4:	f002 fdc4 	bl	8006450 <USB_EP0_OutStart>
 80038c8:	e006      	b.n	80038d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	441a      	add	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f005 f8c4 	bl	8008a6c <HAL_PCD_DataOutStageCallback>
 80038e4:	e046      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4a26      	ldr	r2, [pc, #152]	@ (8003984 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d124      	bne.n	8003938 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800390a:	6093      	str	r3, [r2, #8]
 800390c:	e032      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	2320      	movs	r3, #32
 8003928:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	4619      	mov	r1, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f005 f89b 	bl	8008a6c <HAL_PCD_DataOutStageCallback>
 8003936:	e01d      	b.n	8003974 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d114      	bne.n	8003968 <PCD_EP_OutXfrComplete_int+0x1b0>
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003960:	461a      	mov	r2, r3
 8003962:	2100      	movs	r1, #0
 8003964:	f002 fd74 	bl	8006450 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	b2db      	uxtb	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f005 f87c 	bl	8008a6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	4f54300a 	.word	0x4f54300a
 8003984:	4f54310a 	.word	0x4f54310a

08003988 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	333c      	adds	r3, #60	@ 0x3c
 80039a0:	3304      	adds	r3, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a15      	ldr	r2, [pc, #84]	@ (8003a10 <PCD_EP_OutSetupPacket_int+0x88>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d90e      	bls.n	80039dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d4:	461a      	mov	r2, r3
 80039d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f005 f833 	bl	8008a48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a10 <PCD_EP_OutSetupPacket_int+0x88>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d90c      	bls.n	8003a04 <PCD_EP_OutSetupPacket_int+0x7c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	799b      	ldrb	r3, [r3, #6]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d108      	bne.n	8003a04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039fc:	461a      	mov	r2, r3
 80039fe:	2101      	movs	r1, #1
 8003a00:	f002 fd26 	bl	8006450 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	4f54300a 	.word	0x4f54300a

08003a14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
 8003a20:	4613      	mov	r3, r2
 8003a22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a32:	883b      	ldrh	r3, [r7, #0]
 8003a34:	0419      	lsls	r1, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a40:	e028      	b.n	8003a94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e00d      	b.n	8003a72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	3340      	adds	r3, #64	@ 0x40
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3ec      	bcc.n	8003a56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a7c:	883b      	ldrh	r3, [r7, #0]
 8003a7e:	0418      	lsls	r0, r3, #16
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	4302      	orrs	r2, r0
 8003a8c:	3340      	adds	r3, #64	@ 0x40
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	887a      	ldrh	r2, [r7, #2]
 8003ab4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e267      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d075      	beq.n	8003be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003afa:	4b88      	ldr	r3, [pc, #544]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d00c      	beq.n	8003b20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	4b85      	ldr	r3, [pc, #532]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d112      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b12:	4b82      	ldr	r3, [pc, #520]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	4b7e      	ldr	r3, [pc, #504]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d05b      	beq.n	8003be4 <HAL_RCC_OscConfig+0x108>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d157      	bne.n	8003be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e242      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b40:	d106      	bne.n	8003b50 <HAL_RCC_OscConfig+0x74>
 8003b42:	4b76      	ldr	r3, [pc, #472]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a75      	ldr	r2, [pc, #468]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e01d      	b.n	8003b8c <HAL_RCC_OscConfig+0xb0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x98>
 8003b5a:	4b70      	ldr	r3, [pc, #448]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	4b6d      	ldr	r3, [pc, #436]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6c      	ldr	r2, [pc, #432]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0xb0>
 8003b74:	4b69      	ldr	r3, [pc, #420]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a68      	ldr	r2, [pc, #416]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a65      	ldr	r2, [pc, #404]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003b86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fa70 	bl	8002078 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fa6c 	bl	8002078 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e207      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b5b      	ldr	r3, [pc, #364]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xc0>
 8003bba:	e014      	b.n	8003be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fa5c 	bl	8002078 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fa58 	bl	8002078 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	@ 0x64
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1f3      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	4b51      	ldr	r3, [pc, #324]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xe8>
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d063      	beq.n	8003cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfe:	4b47      	ldr	r3, [pc, #284]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d11c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c0a:	4b44      	ldr	r3, [pc, #272]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d116      	bne.n	8003c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x152>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e1c7      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4937      	ldr	r1, [pc, #220]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c42:	e03a      	b.n	8003cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c4c:	4b34      	ldr	r3, [pc, #208]	@ (8003d20 <HAL_RCC_OscConfig+0x244>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fe fa11 	bl	8002078 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fa0d 	bl	8002078 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e1a8      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c78:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4925      	ldr	r1, [pc, #148]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	600b      	str	r3, [r1, #0]
 8003c8c:	e015      	b.n	8003cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8e:	4b24      	ldr	r3, [pc, #144]	@ (8003d20 <HAL_RCC_OscConfig+0x244>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe f9f0 	bl	8002078 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9c:	f7fe f9ec 	bl	8002078 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e187      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d036      	beq.n	8003d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cce:	4b15      	ldr	r3, [pc, #84]	@ (8003d24 <HAL_RCC_OscConfig+0x248>)
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fe f9d0 	bl	8002078 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fe f9cc 	bl	8002078 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e167      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	4b0b      	ldr	r3, [pc, #44]	@ (8003d1c <HAL_RCC_OscConfig+0x240>)
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x200>
 8003cfa:	e01b      	b.n	8003d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <HAL_RCC_OscConfig+0x248>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d02:	f7fe f9b9 	bl	8002078 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d08:	e00e      	b.n	8003d28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0a:	f7fe f9b5 	bl	8002078 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d907      	bls.n	8003d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e150      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	42470000 	.word	0x42470000
 8003d24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	4b88      	ldr	r3, [pc, #544]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1ea      	bne.n	8003d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 8097 	beq.w	8003e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d42:	2300      	movs	r3, #0
 8003d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d46:	4b81      	ldr	r3, [pc, #516]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10f      	bne.n	8003d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	4b7d      	ldr	r3, [pc, #500]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d62:	4b7a      	ldr	r3, [pc, #488]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4b77      	ldr	r3, [pc, #476]	@ (8003f50 <HAL_RCC_OscConfig+0x474>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d118      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4b74      	ldr	r3, [pc, #464]	@ (8003f50 <HAL_RCC_OscConfig+0x474>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a73      	ldr	r2, [pc, #460]	@ (8003f50 <HAL_RCC_OscConfig+0x474>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8a:	f7fe f975 	bl	8002078 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fe f971 	bl	8002078 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e10c      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f50 <HAL_RCC_OscConfig+0x474>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x2ea>
 8003db8:	4b64      	ldr	r3, [pc, #400]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	4a63      	ldr	r2, [pc, #396]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc4:	e01c      	b.n	8003e00 <HAL_RCC_OscConfig+0x324>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x30c>
 8003dce:	4b5f      	ldr	r3, [pc, #380]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 0304 	orr.w	r3, r3, #4
 8003dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dda:	4b5c      	ldr	r3, [pc, #368]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	4a5b      	ldr	r2, [pc, #364]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0x324>
 8003de8:	4b58      	ldr	r3, [pc, #352]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a57      	ldr	r2, [pc, #348]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df4:	4b55      	ldr	r3, [pc, #340]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	4a54      	ldr	r2, [pc, #336]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003dfa:	f023 0304 	bic.w	r3, r3, #4
 8003dfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fe f936 	bl	8002078 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e10:	f7fe f932 	bl	8002078 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e0cb      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e26:	4b49      	ldr	r3, [pc, #292]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ee      	beq.n	8003e10 <HAL_RCC_OscConfig+0x334>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e34:	f7fe f920 	bl	8002078 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fe f91c 	bl	8002078 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e0b5      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e52:	4b3e      	ldr	r3, [pc, #248]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1ee      	bne.n	8003e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e64:	4b39      	ldr	r3, [pc, #228]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	4a38      	ldr	r2, [pc, #224]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003e6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80a1 	beq.w	8003fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7a:	4b34      	ldr	r3, [pc, #208]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d05c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d141      	bne.n	8003f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8e:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <HAL_RCC_OscConfig+0x478>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe f8f0 	bl	8002078 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe f8ec 	bl	8002078 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e087      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	4b27      	ldr	r3, [pc, #156]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	019b      	lsls	r3, r3, #6
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed0:	085b      	lsrs	r3, r3, #1
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	041b      	lsls	r3, r3, #16
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	491b      	ldr	r1, [pc, #108]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f54 <HAL_RCC_OscConfig+0x478>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe f8c5 	bl	8002078 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fe f8c1 	bl	8002078 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e05c      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f04:	4b11      	ldr	r3, [pc, #68]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x416>
 8003f10:	e054      	b.n	8003fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f12:	4b10      	ldr	r3, [pc, #64]	@ (8003f54 <HAL_RCC_OscConfig+0x478>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe f8ae 	bl	8002078 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f8aa 	bl	8002078 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e045      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_RCC_OscConfig+0x470>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x444>
 8003f3e:	e03d      	b.n	8003fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e038      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40007000 	.word	0x40007000
 8003f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f58:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCC_OscConfig+0x4ec>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d028      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d121      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d11a      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d111      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800

08003fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0cc      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe0:	4b68      	ldr	r3, [pc, #416]	@ (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d90c      	bls.n	8004008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fee:	4b65      	ldr	r3, [pc, #404]	@ (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b63      	ldr	r3, [pc, #396]	@ (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0b8      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004020:	4b59      	ldr	r3, [pc, #356]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a58      	ldr	r2, [pc, #352]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800402a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004038:	4b53      	ldr	r3, [pc, #332]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a52      	ldr	r2, [pc, #328]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b50      	ldr	r3, [pc, #320]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	494d      	ldr	r1, [pc, #308]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d044      	beq.n	80040ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d119      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e07f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d003      	beq.n	800408a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004086:	2b03      	cmp	r3, #3
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	4b3f      	ldr	r3, [pc, #252]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e06f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409a:	4b3b      	ldr	r3, [pc, #236]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e067      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040aa:	4b37      	ldr	r3, [pc, #220]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f023 0203 	bic.w	r2, r3, #3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4934      	ldr	r1, [pc, #208]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040bc:	f7fd ffdc 	bl	8002078 <HAL_GetTick>
 80040c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	e00a      	b.n	80040da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c4:	f7fd ffd8 	bl	8002078 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e04f      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040da:	4b2b      	ldr	r3, [pc, #172]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 020c 	and.w	r2, r3, #12
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d1eb      	bne.n	80040c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ec:	4b25      	ldr	r3, [pc, #148]	@ (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d20c      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b22      	ldr	r3, [pc, #136]	@ (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e032      	b.n	800417a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004120:	4b19      	ldr	r3, [pc, #100]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4916      	ldr	r1, [pc, #88]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	490e      	ldr	r1, [pc, #56]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004152:	f000 f821 	bl	8004198 <HAL_RCC_GetSysClockFreq>
 8004156:	4602      	mov	r2, r0
 8004158:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	490a      	ldr	r1, [pc, #40]	@ (800418c <HAL_RCC_ClockConfig+0x1c0>)
 8004164:	5ccb      	ldrb	r3, [r1, r3]
 8004166:	fa22 f303 	lsr.w	r3, r2, r3
 800416a:	4a09      	ldr	r2, [pc, #36]	@ (8004190 <HAL_RCC_ClockConfig+0x1c4>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800416e:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd ff3c 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023c00 	.word	0x40023c00
 8004188:	40023800 	.word	0x40023800
 800418c:	0800ba98 	.word	0x0800ba98
 8004190:	20000010 	.word	0x20000010
 8004194:	20000014 	.word	0x20000014

08004198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800419c:	b090      	sub	sp, #64	@ 0x40
 800419e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b0:	4b59      	ldr	r3, [pc, #356]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d00d      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x40>
 80041bc:	2b08      	cmp	r3, #8
 80041be:	f200 80a1 	bhi.w	8004304 <HAL_RCC_GetSysClockFreq+0x16c>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x34>
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d003      	beq.n	80041d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80041ca:	e09b      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041cc:	4b53      	ldr	r3, [pc, #332]	@ (800431c <HAL_RCC_GetSysClockFreq+0x184>)
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041d0:	e09b      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041d2:	4b53      	ldr	r3, [pc, #332]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x188>)
 80041d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041d6:	e098      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041d8:	4b4f      	ldr	r3, [pc, #316]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x180>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d028      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	2200      	movs	r2, #0
 80041f6:	623b      	str	r3, [r7, #32]
 80041f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004200:	2100      	movs	r1, #0
 8004202:	4b47      	ldr	r3, [pc, #284]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x188>)
 8004204:	fb03 f201 	mul.w	r2, r3, r1
 8004208:	2300      	movs	r3, #0
 800420a:	fb00 f303 	mul.w	r3, r0, r3
 800420e:	4413      	add	r3, r2
 8004210:	4a43      	ldr	r2, [pc, #268]	@ (8004320 <HAL_RCC_GetSysClockFreq+0x188>)
 8004212:	fba0 1202 	umull	r1, r2, r0, r2
 8004216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004218:	460a      	mov	r2, r1
 800421a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800421c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800421e:	4413      	add	r3, r2
 8004220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	2200      	movs	r2, #0
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	61fa      	str	r2, [r7, #28]
 800422a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800422e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004232:	f7fc fcc1 	bl	8000bb8 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4613      	mov	r3, r2
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800423e:	e053      	b.n	80042e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004240:	4b35      	ldr	r3, [pc, #212]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x180>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	2200      	movs	r2, #0
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	617a      	str	r2, [r7, #20]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004252:	f04f 0b00 	mov.w	fp, #0
 8004256:	4652      	mov	r2, sl
 8004258:	465b      	mov	r3, fp
 800425a:	f04f 0000 	mov.w	r0, #0
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	0159      	lsls	r1, r3, #5
 8004264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004268:	0150      	lsls	r0, r2, #5
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	ebb2 080a 	subs.w	r8, r2, sl
 8004272:	eb63 090b 	sbc.w	r9, r3, fp
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004282:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004286:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800428a:	ebb2 0408 	subs.w	r4, r2, r8
 800428e:	eb63 0509 	sbc.w	r5, r3, r9
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	00eb      	lsls	r3, r5, #3
 800429c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042a0:	00e2      	lsls	r2, r4, #3
 80042a2:	4614      	mov	r4, r2
 80042a4:	461d      	mov	r5, r3
 80042a6:	eb14 030a 	adds.w	r3, r4, sl
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	eb45 030b 	adc.w	r3, r5, fp
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042be:	4629      	mov	r1, r5
 80042c0:	028b      	lsls	r3, r1, #10
 80042c2:	4621      	mov	r1, r4
 80042c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c8:	4621      	mov	r1, r4
 80042ca:	028a      	lsls	r2, r1, #10
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d2:	2200      	movs	r2, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	60fa      	str	r2, [r7, #12]
 80042d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042dc:	f7fc fc6c 	bl	8000bb8 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4613      	mov	r3, r2
 80042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	3301      	adds	r3, #1
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004302:	e002      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_GetSysClockFreq+0x184>)
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800430c:	4618      	mov	r0, r3
 800430e:	3740      	adds	r7, #64	@ 0x40
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004316:	bf00      	nop
 8004318:	40023800 	.word	0x40023800
 800431c:	00f42400 	.word	0x00f42400
 8004320:	017d7840 	.word	0x017d7840

08004324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004328:	4b03      	ldr	r3, [pc, #12]	@ (8004338 <HAL_RCC_GetHCLKFreq+0x14>)
 800432a:	681b      	ldr	r3, [r3, #0]
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000010 	.word	0x20000010

0800433c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07b      	b.n	8004446 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435e:	d009      	beq.n	8004374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	61da      	str	r2, [r3, #28]
 8004366:	e005      	b.n	8004374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fd fc88 	bl	8001ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f8:	ea42 0103 	orr.w	r1, r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0104 	and.w	r1, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	f003 0210 	and.w	r2, r3, #16
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b088      	sub	sp, #32
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800445e:	f7fd fe0b 	bl	8002078 <HAL_GetTick>
 8004462:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004464:	88fb      	ldrh	r3, [r7, #6]
 8004466:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
 8004476:	e12a      	b.n	80046ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_SPI_Transmit+0x36>
 800447e:	88fb      	ldrh	r3, [r7, #6]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e122      	b.n	80046ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_SPI_Transmit+0x48>
 8004492:	2302      	movs	r3, #2
 8004494:	e11b      	b.n	80046ce <HAL_SPI_Transmit+0x280>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2203      	movs	r2, #3
 80044a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e4:	d10f      	bne.n	8004506 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004510:	2b40      	cmp	r3, #64	@ 0x40
 8004512:	d007      	beq.n	8004524 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452c:	d152      	bne.n	80045d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_SPI_Transmit+0xee>
 8004536:	8b7b      	ldrh	r3, [r7, #26]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d145      	bne.n	80045c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004560:	e032      	b.n	80045c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b02      	cmp	r3, #2
 800456e:	d112      	bne.n	8004596 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004574:	881a      	ldrh	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004594:	e018      	b.n	80045c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004596:	f7fd fd6f 	bl	8002078 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d803      	bhi.n	80045ae <HAL_SPI_Transmit+0x160>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ac:	d102      	bne.n	80045b4 <HAL_SPI_Transmit+0x166>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e082      	b.n	80046ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1c7      	bne.n	8004562 <HAL_SPI_Transmit+0x114>
 80045d2:	e053      	b.n	800467c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <HAL_SPI_Transmit+0x194>
 80045dc:	8b7b      	ldrh	r3, [r7, #26]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d147      	bne.n	8004672 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004608:	e033      	b.n	8004672 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	d113      	bne.n	8004640 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	7812      	ldrb	r2, [r2, #0]
 8004624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800463e:	e018      	b.n	8004672 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004640:	f7fd fd1a 	bl	8002078 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d803      	bhi.n	8004658 <HAL_SPI_Transmit+0x20a>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004656:	d102      	bne.n	800465e <HAL_SPI_Transmit+0x210>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e02d      	b.n	80046ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1c6      	bne.n	800460a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800467c:	69fa      	ldr	r2, [r7, #28]
 800467e:	6839      	ldr	r1, [r7, #0]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 fbd9 	bl	8004e38 <SPI_EndRxTxTransaction>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10a      	bne.n	80046b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b088      	sub	sp, #32
 80046da:	af02      	add	r7, sp, #8
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d001      	beq.n	80046f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	e104      	b.n	8004900 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046fe:	d112      	bne.n	8004726 <HAL_SPI_Receive+0x50>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10e      	bne.n	8004726 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2204      	movs	r2, #4
 800470c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f8f3 	bl	8004908 <HAL_SPI_TransmitReceive>
 8004722:	4603      	mov	r3, r0
 8004724:	e0ec      	b.n	8004900 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004726:	f7fd fca7 	bl	8002078 <HAL_GetTick>
 800472a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_SPI_Receive+0x62>
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0e1      	b.n	8004900 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <HAL_SPI_Receive+0x74>
 8004746:	2302      	movs	r3, #2
 8004748:	e0da      	b.n	8004900 <HAL_SPI_Receive+0x22a>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2204      	movs	r2, #4
 8004756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	88fa      	ldrh	r2, [r7, #6]
 800476a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004798:	d10f      	bne.n	80047ba <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c4:	2b40      	cmp	r3, #64	@ 0x40
 80047c6:	d007      	beq.n	80047d8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d170      	bne.n	80048c2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047e0:	e035      	b.n	800484e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d115      	bne.n	800481c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f103 020c 	add.w	r2, r3, #12
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800481a:	e018      	b.n	800484e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800481c:	f7fd fc2c 	bl	8002078 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d803      	bhi.n	8004834 <HAL_SPI_Receive+0x15e>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004832:	d102      	bne.n	800483a <HAL_SPI_Receive+0x164>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e058      	b.n	8004900 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004852:	b29b      	uxth	r3, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1c4      	bne.n	80047e2 <HAL_SPI_Receive+0x10c>
 8004858:	e038      	b.n	80048cc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d113      	bne.n	8004890 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	b292      	uxth	r2, r2
 8004874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	1c9a      	adds	r2, r3, #2
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800488e:	e018      	b.n	80048c2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004890:	f7fd fbf2 	bl	8002078 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d803      	bhi.n	80048a8 <HAL_SPI_Receive+0x1d2>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Receive+0x1d8>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e01e      	b.n	8004900 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1c6      	bne.n	800485a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	6839      	ldr	r1, [r7, #0]
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fa4b 	bl	8004d6c <SPI_EndRxTransaction>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004916:	2301      	movs	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800491a:	f7fd fbad 	bl	8002078 <HAL_GetTick>
 800491e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004926:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d00c      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x4a>
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800493e:	d106      	bne.n	800494e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <HAL_SPI_TransmitReceive+0x46>
 8004948:	7ffb      	ldrb	r3, [r7, #31]
 800494a:	2b04      	cmp	r3, #4
 800494c:	d001      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	e17f      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x5c>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x5c>
 800495e:	887b      	ldrh	r3, [r7, #2]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e174      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_SPI_TransmitReceive+0x6e>
 8004972:	2302      	movs	r3, #2
 8004974:	e16d      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b04      	cmp	r3, #4
 8004988:	d003      	beq.n	8004992 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2205      	movs	r2, #5
 800498e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	887a      	ldrh	r2, [r7, #2]
 80049a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	887a      	ldrh	r2, [r7, #2]
 80049ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d007      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ee:	d17e      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_TransmitReceive+0xf6>
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d16c      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a22:	e059      	b.n	8004ad8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d11b      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x162>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d016      	beq.n	8004a6a <HAL_SPI_TransmitReceive+0x162>
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d113      	bne.n	8004a6a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a46:	881a      	ldrh	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d119      	bne.n	8004aac <HAL_SPI_TransmitReceive+0x1a4>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d014      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	b292      	uxth	r2, r2
 8004a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	1c9a      	adds	r2, r3, #2
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004aac:	f7fd fae4 	bl	8002078 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d80d      	bhi.n	8004ad8 <HAL_SPI_TransmitReceive+0x1d0>
 8004abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ac2:	d009      	beq.n	8004ad8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0bc      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1a0      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x11c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d19b      	bne.n	8004a24 <HAL_SPI_TransmitReceive+0x11c>
 8004aec:	e082      	b.n	8004bf4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d002      	beq.n	8004afc <HAL_SPI_TransmitReceive+0x1f4>
 8004af6:	8afb      	ldrh	r3, [r7, #22]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d171      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b22:	e05d      	b.n	8004be0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d11c      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x264>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d017      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x264>
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d114      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d119      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x2a6>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d014      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004baa:	2301      	movs	r3, #1
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bae:	f7fd fa63 	bl	8002078 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d803      	bhi.n	8004bc6 <HAL_SPI_TransmitReceive+0x2be>
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_TransmitReceive+0x2c4>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e038      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d19c      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x21c>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d197      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf4:	6a3a      	ldr	r2, [r7, #32]
 8004bf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f91d 	bl	8004e38 <SPI_EndRxTxTransaction>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e01d      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004c50:	2300      	movs	r3, #0
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3728      	adds	r7, #40	@ 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c6c:	f7fd fa04 	bl	8002078 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	4413      	add	r3, r2
 8004c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c7c:	f7fd f9fc 	bl	8002078 <HAL_GetTick>
 8004c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c82:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	015b      	lsls	r3, r3, #5
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c92:	e054      	b.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c9a:	d050      	beq.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c9c:	f7fd f9ec 	bl	8002078 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d902      	bls.n	8004cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d13d      	bne.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cca:	d111      	bne.n	8004cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd4:	d004      	beq.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cde:	d107      	bne.n	8004cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf8:	d10f      	bne.n	8004d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e017      	b.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d19b      	bne.n	8004c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000010 	.word	0x20000010

08004d6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d80:	d111      	bne.n	8004da6 <SPI_EndRxTransaction+0x3a>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d8a:	d004      	beq.n	8004d96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d94:	d107      	bne.n	8004da6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dae:	d12a      	bne.n	8004e06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db8:	d012      	beq.n	8004de0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2180      	movs	r1, #128	@ 0x80
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff ff49 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02d      	beq.n	8004e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd4:	f043 0220 	orr.w	r2, r3, #32
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e026      	b.n	8004e2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2200      	movs	r2, #0
 8004de8:	2101      	movs	r1, #1
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff ff36 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01a      	beq.n	8004e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e013      	b.n	8004e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2101      	movs	r1, #1
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff ff23 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d007      	beq.n	8004e2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e20:	f043 0220 	orr.w	r2, r3, #32
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e000      	b.n	8004e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff ff04 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e032      	b.n	8004ed0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <SPI_EndRxTxTransaction+0xa0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <SPI_EndRxTxTransaction+0xa4>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	0d5b      	lsrs	r3, r3, #21
 8004e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e88:	d112      	bne.n	8004eb0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2180      	movs	r1, #128	@ 0x80
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fee1 	bl	8004c5c <SPI_WaitFlagStateUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d016      	beq.n	8004ece <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e00f      	b.n	8004ed0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec6:	2b80      	cmp	r3, #128	@ 0x80
 8004ec8:	d0f2      	beq.n	8004eb0 <SPI_EndRxTxTransaction+0x78>
 8004eca:	e000      	b.n	8004ece <SPI_EndRxTxTransaction+0x96>
        break;
 8004ecc:	bf00      	nop
  }

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000010 	.word	0x20000010
 8004edc:	165e9f81 	.word	0x165e9f81

08004ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	f107 001c 	add.w	r0, r7, #28
 8004eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ef2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d123      	bne.n	8004f42 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d105      	bne.n	8004f36 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fae8 	bl	800650c <USB_CoreReset>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	e01b      	b.n	8004f7a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 fadc 	bl	800650c <USB_CoreReset>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f6c:	e005      	b.n	8004f7a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f7a:	7fbb      	ldrb	r3, [r7, #30]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10b      	bne.n	8004f98 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f043 0206 	orr.w	r2, r3, #6
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f043 0220 	orr.w	r2, r3, #32
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa4:	b004      	add	sp, #16
 8004fa6:	4770      	bx	lr

08004fa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d165      	bne.n	8005088 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4a41      	ldr	r2, [pc, #260]	@ (80050c4 <USB_SetTurnaroundTime+0x11c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d906      	bls.n	8004fd2 <USB_SetTurnaroundTime+0x2a>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <USB_SetTurnaroundTime+0x120>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d202      	bcs.n	8004fd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fcc:	230f      	movs	r3, #15
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	e062      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80050c8 <USB_SetTurnaroundTime+0x120>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d306      	bcc.n	8004fe8 <USB_SetTurnaroundTime+0x40>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80050cc <USB_SetTurnaroundTime+0x124>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d202      	bcs.n	8004fe8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004fe2:	230e      	movs	r3, #14
 8004fe4:	617b      	str	r3, [r7, #20]
 8004fe6:	e057      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4a38      	ldr	r2, [pc, #224]	@ (80050cc <USB_SetTurnaroundTime+0x124>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d306      	bcc.n	8004ffe <USB_SetTurnaroundTime+0x56>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	4a37      	ldr	r2, [pc, #220]	@ (80050d0 <USB_SetTurnaroundTime+0x128>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d202      	bcs.n	8004ffe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ff8:	230d      	movs	r3, #13
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e04c      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4a33      	ldr	r2, [pc, #204]	@ (80050d0 <USB_SetTurnaroundTime+0x128>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d306      	bcc.n	8005014 <USB_SetTurnaroundTime+0x6c>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4a32      	ldr	r2, [pc, #200]	@ (80050d4 <USB_SetTurnaroundTime+0x12c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d802      	bhi.n	8005014 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800500e:	230c      	movs	r3, #12
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e041      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4a2f      	ldr	r2, [pc, #188]	@ (80050d4 <USB_SetTurnaroundTime+0x12c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d906      	bls.n	800502a <USB_SetTurnaroundTime+0x82>
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4a2e      	ldr	r2, [pc, #184]	@ (80050d8 <USB_SetTurnaroundTime+0x130>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d802      	bhi.n	800502a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005024:	230b      	movs	r3, #11
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	e036      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4a2a      	ldr	r2, [pc, #168]	@ (80050d8 <USB_SetTurnaroundTime+0x130>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d906      	bls.n	8005040 <USB_SetTurnaroundTime+0x98>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4a29      	ldr	r2, [pc, #164]	@ (80050dc <USB_SetTurnaroundTime+0x134>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d802      	bhi.n	8005040 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800503a:	230a      	movs	r3, #10
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e02b      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a26      	ldr	r2, [pc, #152]	@ (80050dc <USB_SetTurnaroundTime+0x134>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d906      	bls.n	8005056 <USB_SetTurnaroundTime+0xae>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4a25      	ldr	r2, [pc, #148]	@ (80050e0 <USB_SetTurnaroundTime+0x138>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d202      	bcs.n	8005056 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005050:	2309      	movs	r3, #9
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e020      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a21      	ldr	r2, [pc, #132]	@ (80050e0 <USB_SetTurnaroundTime+0x138>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d306      	bcc.n	800506c <USB_SetTurnaroundTime+0xc4>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4a20      	ldr	r2, [pc, #128]	@ (80050e4 <USB_SetTurnaroundTime+0x13c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d802      	bhi.n	800506c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005066:	2308      	movs	r3, #8
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e015      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <USB_SetTurnaroundTime+0x13c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d906      	bls.n	8005082 <USB_SetTurnaroundTime+0xda>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <USB_SetTurnaroundTime+0x140>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d202      	bcs.n	8005082 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800507c:	2307      	movs	r3, #7
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	e00a      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005082:	2306      	movs	r3, #6
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e007      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005088:	79fb      	ldrb	r3, [r7, #7]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800508e:	2309      	movs	r3, #9
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e001      	b.n	8005098 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005094:	2309      	movs	r3, #9
 8005096:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	029b      	lsls	r3, r3, #10
 80050ac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	00d8acbf 	.word	0x00d8acbf
 80050c8:	00e4e1c0 	.word	0x00e4e1c0
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	01067380 	.word	0x01067380
 80050d4:	011a499f 	.word	0x011a499f
 80050d8:	01312cff 	.word	0x01312cff
 80050dc:	014ca43f 	.word	0x014ca43f
 80050e0:	016e3600 	.word	0x016e3600
 80050e4:	01a6ab1f 	.word	0x01a6ab1f
 80050e8:	01e84800 	.word	0x01e84800

080050ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f043 0201 	orr.w	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d115      	bne.n	800517e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800515e:	200a      	movs	r0, #10
 8005160:	f7fc ff96 	bl	8002090 <HAL_Delay>
      ms += 10U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	330a      	adds	r3, #10
 8005168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f001 f93f 	bl	80063ee <USB_GetMode>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d01e      	beq.n	80051b4 <USB_SetCurrentMode+0x84>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2bc7      	cmp	r3, #199	@ 0xc7
 800517a:	d9f0      	bls.n	800515e <USB_SetCurrentMode+0x2e>
 800517c:	e01a      	b.n	80051b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d115      	bne.n	80051b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005190:	200a      	movs	r0, #10
 8005192:	f7fc ff7d 	bl	8002090 <HAL_Delay>
      ms += 10U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	330a      	adds	r3, #10
 800519a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f001 f926 	bl	80063ee <USB_GetMode>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <USB_SetCurrentMode+0x84>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80051ac:	d9f0      	bls.n	8005190 <USB_SetCurrentMode+0x60>
 80051ae:	e001      	b.n	80051b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e005      	b.n	80051c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2bc8      	cmp	r3, #200	@ 0xc8
 80051b8:	d101      	bne.n	80051be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c8:	b084      	sub	sp, #16
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80051d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e009      	b.n	80051fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	3340      	adds	r3, #64	@ 0x40
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3301      	adds	r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0e      	cmp	r3, #14
 8005200:	d9f2      	bls.n	80051e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005202:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11c      	bne.n	8005244 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005218:	f043 0302 	orr.w	r3, r3, #2
 800521c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	639a      	str	r2, [r3, #56]	@ 0x38
 8005242:	e00b      	b.n	800525c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005262:	461a      	mov	r2, r3
 8005264:	2300      	movs	r3, #0
 8005266:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005268:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800526c:	2b01      	cmp	r3, #1
 800526e:	d10d      	bne.n	800528c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005278:	2100      	movs	r1, #0
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f968 	bl	8005550 <USB_SetDevSpeed>
 8005280:	e008      	b.n	8005294 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005282:	2101      	movs	r1, #1
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f963 	bl	8005550 <USB_SetDevSpeed>
 800528a:	e003      	b.n	8005294 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800528c:	2103      	movs	r1, #3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f95e 	bl	8005550 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005294:	2110      	movs	r1, #16
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f8fa 	bl	8005490 <USB_FlushTxFifo>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f924 	bl	80054f4 <USB_FlushRxFifo>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c8:	461a      	mov	r2, r3
 80052ca:	2300      	movs	r3, #0
 80052cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d4:	461a      	mov	r2, r3
 80052d6:	2300      	movs	r3, #0
 80052d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e043      	b.n	8005368 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052f6:	d118      	bne.n	800532a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530a:	461a      	mov	r2, r3
 800530c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e013      	b.n	800533c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005320:	461a      	mov	r2, r3
 8005322:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005326:	6013      	str	r3, [r2, #0]
 8005328:	e008      	b.n	800533c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005336:	461a      	mov	r2, r3
 8005338:	2300      	movs	r3, #0
 800533a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005348:	461a      	mov	r2, r3
 800534a:	2300      	movs	r3, #0
 800534c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535a:	461a      	mov	r2, r3
 800535c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005360:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	3301      	adds	r3, #1
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800536c:	461a      	mov	r2, r3
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4293      	cmp	r3, r2
 8005372:	d3b5      	bcc.n	80052e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005374:	2300      	movs	r3, #0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e043      	b.n	8005402 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005390:	d118      	bne.n	80053c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10a      	bne.n	80053ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a4:	461a      	mov	r2, r3
 80053a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e013      	b.n	80053d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ba:	461a      	mov	r2, r3
 80053bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e008      	b.n	80053d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d0:	461a      	mov	r2, r3
 80053d2:	2300      	movs	r3, #0
 80053d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	461a      	mov	r2, r3
 80053e4:	2300      	movs	r3, #0
 80053e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	461a      	mov	r2, r3
 80053f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	3301      	adds	r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005406:	461a      	mov	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4293      	cmp	r3, r2
 800540c:	d3b5      	bcc.n	800537a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800541c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005420:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800542e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005430:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005434:	2b00      	cmp	r3, #0
 8005436:	d105      	bne.n	8005444 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f043 0210 	orr.w	r2, r3, #16
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699a      	ldr	r2, [r3, #24]
 8005448:	4b10      	ldr	r3, [pc, #64]	@ (800548c <USB_DevInit+0x2c4>)
 800544a:	4313      	orrs	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005450:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f043 0208 	orr.w	r2, r3, #8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005464:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005474:	f043 0304 	orr.w	r3, r3, #4
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800547c:	7dfb      	ldrb	r3, [r7, #23]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005488:	b004      	add	sp, #16
 800548a:	4770      	bx	lr
 800548c:	803c3800 	.word	0x803c3800

08005490 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054aa:	d901      	bls.n	80054b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e01b      	b.n	80054e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	daf2      	bge.n	800549e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	019b      	lsls	r3, r3, #6
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054d4:	d901      	bls.n	80054da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e006      	b.n	80054e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	d0f0      	beq.n	80054c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800550c:	d901      	bls.n	8005512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e018      	b.n	8005544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	daf2      	bge.n	8005500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2210      	movs	r2, #16
 8005522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005530:	d901      	bls.n	8005536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e006      	b.n	8005544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d0f0      	beq.n	8005524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b087      	sub	sp, #28
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f003 0306 	and.w	r3, r3, #6
 800559a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d102      	bne.n	80055a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055a2:	2300      	movs	r3, #0
 80055a4:	75fb      	strb	r3, [r7, #23]
 80055a6:	e00a      	b.n	80055be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d002      	beq.n	80055b4 <USB_GetDevSpeed+0x32>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b06      	cmp	r3, #6
 80055b2:	d102      	bne.n	80055ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055b4:	2302      	movs	r3, #2
 80055b6:	75fb      	strb	r3, [r7, #23]
 80055b8:	e001      	b.n	80055be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055ba:	230f      	movs	r3, #15
 80055bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	785b      	ldrb	r3, [r3, #1]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d13a      	bne.n	800565e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	b29b      	uxth	r3, r3
 8005600:	68f9      	ldr	r1, [r7, #12]
 8005602:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005606:	4313      	orrs	r3, r2
 8005608:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d155      	bne.n	80056cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	791b      	ldrb	r3, [r3, #4]
 800563a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800563c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	059b      	lsls	r3, r3, #22
 8005642:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005644:	4313      	orrs	r3, r2
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	e036      	b.n	80056cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	2101      	movs	r1, #1
 8005670:	fa01 f303 	lsl.w	r3, r1, r3
 8005674:	041b      	lsls	r3, r3, #16
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800567c:	4313      	orrs	r3, r2
 800567e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d11a      	bne.n	80056cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	791b      	ldrb	r3, [r3, #4]
 80056b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056b2:	430b      	orrs	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d161      	bne.n	80057bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800570a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800570e:	d11f      	bne.n	8005750 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800572a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800572e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	0151      	lsls	r1, r2, #5
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	440a      	add	r2, r1
 8005746:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800574a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800574e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005756:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	2101      	movs	r1, #1
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005770:	4013      	ands	r3, r2
 8005772:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	b29b      	uxth	r3, r3
 800578c:	43db      	mvns	r3, r3
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005794:	4013      	ands	r3, r2
 8005796:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	0159      	lsls	r1, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	440b      	add	r3, r1
 80057ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b2:	4619      	mov	r1, r3
 80057b4:	4b35      	ldr	r3, [pc, #212]	@ (800588c <USB_DeactivateEndpoint+0x1b0>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	600b      	str	r3, [r1, #0]
 80057ba:	e060      	b.n	800587e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057d2:	d11f      	bne.n	8005814 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68ba      	ldr	r2, [r7, #8]
 8005804:	0151      	lsls	r1, r2, #5
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	440a      	add	r2, r1
 800580a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800580e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005812:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	43db      	mvns	r3, r3
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005834:	4013      	ands	r3, r2
 8005836:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	2101      	movs	r1, #1
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	43db      	mvns	r3, r3
 8005852:	68f9      	ldr	r1, [r7, #12]
 8005854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005858:	4013      	ands	r3, r2
 800585a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	0159      	lsls	r1, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	440b      	add	r3, r1
 8005872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005876:	4619      	mov	r1, r3
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <USB_DeactivateEndpoint+0x1b4>)
 800587a:	4013      	ands	r3, r2
 800587c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	ec337800 	.word	0xec337800
 8005890:	eff37800 	.word	0xeff37800

08005894 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	@ 0x28
 8005898:	af02      	add	r7, sp, #8
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	f040 817f 	bne.w	8005bb4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d132      	bne.n	8005924 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800591c:	0cdb      	lsrs	r3, r3, #19
 800591e:	04db      	lsls	r3, r3, #19
 8005920:	6113      	str	r3, [r2, #16]
 8005922:	e097      	b.n	8005a54 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800593e:	0cdb      	lsrs	r3, r3, #19
 8005940:	04db      	lsls	r3, r3, #19
 8005942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005962:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005966:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11a      	bne.n	80059a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d903      	bls.n	8005982 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	440a      	add	r2, r1
 8005998:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800599c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80059a0:	6113      	str	r3, [r2, #16]
 80059a2:	e044      	b.n	8005a2e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4413      	add	r3, r2
 80059ae:	1e5a      	subs	r2, r3, #1
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	8afb      	ldrh	r3, [r7, #22]
 80059ca:	04d9      	lsls	r1, r3, #19
 80059cc:	4ba4      	ldr	r3, [pc, #656]	@ (8005c60 <USB_EPStartXfer+0x3cc>)
 80059ce:	400b      	ands	r3, r1
 80059d0:	69b9      	ldr	r1, [r7, #24]
 80059d2:	0148      	lsls	r0, r1, #5
 80059d4:	69f9      	ldr	r1, [r7, #28]
 80059d6:	4401      	add	r1, r0
 80059d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80059dc:	4313      	orrs	r3, r2
 80059de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	791b      	ldrb	r3, [r3, #4]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d122      	bne.n	8005a2e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a02:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005a06:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	8afb      	ldrh	r3, [r7, #22]
 8005a18:	075b      	lsls	r3, r3, #29
 8005a1a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005a1e:	69b9      	ldr	r1, [r7, #24]
 8005a20:	0148      	lsls	r0, r1, #5
 8005a22:	69f9      	ldr	r1, [r7, #28]
 8005a24:	4401      	add	r1, r0
 8005a26:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a44:	69b9      	ldr	r1, [r7, #24]
 8005a46:	0148      	lsls	r0, r1, #5
 8005a48:	69f9      	ldr	r1, [r7, #28]
 8005a4a:	4401      	add	r1, r0
 8005a4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a50:	4313      	orrs	r3, r2
 8005a52:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d14b      	bne.n	8005af2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	791b      	ldrb	r3, [r3, #4]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d128      	bne.n	8005ad0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d110      	bne.n	8005ab0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e00f      	b.n	8005ad0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ace:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	e166      	b.n	8005dc0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b0c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b10:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	791b      	ldrb	r3, [r3, #4]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d015      	beq.n	8005b46 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 814e 	beq.w	8005dc0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	2101      	movs	r1, #1
 8005b36:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3a:	69f9      	ldr	r1, [r7, #28]
 8005b3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b40:	4313      	orrs	r3, r2
 8005b42:	634b      	str	r3, [r1, #52]	@ 0x34
 8005b44:	e13c      	b.n	8005dc0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d110      	bne.n	8005b78 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e00f      	b.n	8005b98 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68d9      	ldr	r1, [r3, #12]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781a      	ldrb	r2, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	b298      	uxth	r0, r3
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4603      	mov	r3, r0
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f9b9 	bl	8005f24 <USB_WritePacket>
 8005bb2:	e105      	b.n	8005dc0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	0151      	lsls	r1, r2, #5
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	440a      	add	r2, r1
 8005bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bce:	0cdb      	lsrs	r3, r3, #19
 8005bd0:	04db      	lsls	r3, r3, #19
 8005bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bf2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bf6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d132      	bne.n	8005c64 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	0148      	lsls	r0, r1, #5
 8005c30:	69f9      	ldr	r1, [r7, #28]
 8005c32:	4401      	add	r1, r0
 8005c34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c5a:	6113      	str	r3, [r2, #16]
 8005c5c:	e062      	b.n	8005d24 <USB_EPStartXfer+0x490>
 8005c5e:	bf00      	nop
 8005c60:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d123      	bne.n	8005cb4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	691a      	ldr	r2, [r3, #16]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c82:	69b9      	ldr	r1, [r7, #24]
 8005c84:	0148      	lsls	r0, r1, #5
 8005c86:	69f9      	ldr	r1, [r7, #28]
 8005c88:	4401      	add	r1, r0
 8005c8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cb0:	6113      	str	r3, [r2, #16]
 8005cb2:	e037      	b.n	8005d24 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	1e5a      	subs	r2, r3, #1
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	8afa      	ldrh	r2, [r7, #22]
 8005cd0:	fb03 f202 	mul.w	r2, r3, r2
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	8afb      	ldrh	r3, [r7, #22]
 8005ce8:	04d9      	lsls	r1, r3, #19
 8005cea:	4b38      	ldr	r3, [pc, #224]	@ (8005dcc <USB_EPStartXfer+0x538>)
 8005cec:	400b      	ands	r3, r1
 8005cee:	69b9      	ldr	r1, [r7, #24]
 8005cf0:	0148      	lsls	r0, r1, #5
 8005cf2:	69f9      	ldr	r1, [r7, #28]
 8005cf4:	4401      	add	r1, r0
 8005cf6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d14:	69b9      	ldr	r1, [r7, #24]
 8005d16:	0148      	lsls	r0, r1, #5
 8005d18:	69f9      	ldr	r1, [r7, #28]
 8005d1a:	4401      	add	r1, r0
 8005d1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d20:	4313      	orrs	r3, r2
 8005d22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d10d      	bne.n	8005d46 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	68d9      	ldr	r1, [r3, #12]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d42:	460a      	mov	r2, r1
 8005d44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d128      	bne.n	8005da0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d110      	bne.n	8005d80 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e00f      	b.n	8005da0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005dbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	1ff80000 	.word	0x1ff80000

08005dd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d14a      	bne.n	8005e84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e06:	f040 8086 	bne.w	8005f16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d902      	bls.n	8005e68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
          break;
 8005e66:	e056      	b.n	8005f16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e80:	d0e7      	beq.n	8005e52 <USB_EPStopXfer+0x82>
 8005e82:	e048      	b.n	8005f16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e9c:	d13b      	bne.n	8005f16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ebc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005ec0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ee4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d902      	bls.n	8005efc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8005efa:	e00c      	b.n	8005f16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f14:	d0e7      	beq.n	8005ee6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b089      	sub	sp, #36	@ 0x24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4611      	mov	r1, r2
 8005f30:	461a      	mov	r2, r3
 8005f32:	460b      	mov	r3, r1
 8005f34:	71fb      	strb	r3, [r7, #7]
 8005f36:	4613      	mov	r3, r2
 8005f38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d123      	bne.n	8005f92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f4a:	88bb      	ldrh	r3, [r7, #4]
 8005f4c:	3303      	adds	r3, #3
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f52:	2300      	movs	r3, #0
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	e018      	b.n	8005f8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	031a      	lsls	r2, r3, #12
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f64:	461a      	mov	r2, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	3301      	adds	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	3301      	adds	r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d3e2      	bcc.n	8005f58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3724      	adds	r7, #36	@ 0x24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b08b      	sub	sp, #44	@ 0x2c
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	089b      	lsrs	r3, r3, #2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	f003 0303 	and.w	r3, r3, #3
 8005fc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	e014      	b.n	8005ff6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	3301      	adds	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fec:	3301      	adds	r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	623b      	str	r3, [r7, #32]
 8005ff6:	6a3a      	ldr	r2, [r7, #32]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d3e6      	bcc.n	8005fcc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ffe:	8bfb      	ldrh	r3, [r7, #30]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01e      	beq.n	8006042 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800600e:	461a      	mov	r2, r3
 8006010:	f107 0310 	add.w	r3, r7, #16
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	b2da      	uxtb	r2, r3
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	701a      	strb	r2, [r3, #0]
      i++;
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	3301      	adds	r3, #1
 800602e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	3301      	adds	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006036:	8bfb      	ldrh	r3, [r7, #30]
 8006038:	3b01      	subs	r3, #1
 800603a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800603c:	8bfb      	ldrh	r3, [r7, #30]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ea      	bne.n	8006018 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006044:	4618      	mov	r0, r3
 8006046:	372c      	adds	r7, #44	@ 0x2c
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d12c      	bne.n	80060c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	db12      	blt.n	80060a4 <USB_EPSetStall+0x54>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800609e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e02b      	b.n	800611e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	db12      	blt.n	80060fe <USB_EPSetStall+0xae>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00f      	beq.n	80060fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800611c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d128      	bne.n	800619a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0151      	lsls	r1, r2, #5
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	440a      	add	r2, r1
 800615e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006162:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006166:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	791b      	ldrb	r3, [r3, #4]
 800616c:	2b03      	cmp	r3, #3
 800616e:	d003      	beq.n	8006178 <USB_EPClearStall+0x4c>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	791b      	ldrb	r3, [r3, #4]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d138      	bne.n	80061ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	e027      	b.n	80061ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	791b      	ldrb	r3, [r3, #4]
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d003      	beq.n	80061ca <USB_EPClearStall+0x9e>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	791b      	ldrb	r3, [r3, #4]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d10f      	bne.n	80061ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006216:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800621a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800622c:	68f9      	ldr	r1, [r7, #12]
 800622e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006232:	4313      	orrs	r3, r2
 8006234:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006272:	f023 0302 	bic.w	r3, r3, #2
 8006276:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006286:	b480      	push	{r7}
 8006288:	b085      	sub	sp, #20
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062a0:	f023 0303 	bic.w	r3, r3, #3
 80062a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062e0:	68fb      	ldr	r3, [r7, #12]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b085      	sub	sp, #20
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	4013      	ands	r3, r2
 8006310:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	0c1b      	lsrs	r3, r3, #16
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633e:	69db      	ldr	r3, [r3, #28]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	b29b      	uxth	r3, r3
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	4013      	ands	r3, r2
 8006382:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006384:	68bb      	ldr	r3, [r7, #8]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006392:	b480      	push	{r7}
 8006394:	b087      	sub	sp, #28
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 030f 	and.w	r3, r3, #15
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	01db      	lsls	r3, r3, #7
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4013      	ands	r3, r2
 80063de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063e0:	68bb      	ldr	r3, [r7, #8]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0301 	and.w	r3, r3, #1
}
 80063fe:	4618      	mov	r0, r3
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800640a:	b480      	push	{r7}
 800640c:	b085      	sub	sp, #20
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006424:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006428:	f023 0307 	bic.w	r3, r3, #7
 800642c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800643c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	460b      	mov	r3, r1
 800645a:	607a      	str	r2, [r7, #4]
 800645c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	333c      	adds	r3, #60	@ 0x3c
 8006466:	3304      	adds	r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4a26      	ldr	r2, [pc, #152]	@ (8006508 <USB_EP0_OutStart+0xb8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d90a      	bls.n	800648a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006480:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006484:	d101      	bne.n	800648a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e037      	b.n	80064fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006490:	461a      	mov	r2, r3
 8006492:	2300      	movs	r3, #0
 8006494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b8:	f043 0318 	orr.w	r3, r3, #24
 80064bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80064d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064d2:	7afb      	ldrb	r3, [r7, #11]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10f      	bne.n	80064f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064de:	461a      	mov	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80064f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	4f54300a 	.word	0x4f54300a

0800650c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006524:	d901      	bls.n	800652a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e01b      	b.n	8006562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	daf2      	bge.n	8006518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f043 0201 	orr.w	r2, r3, #1
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800654e:	d901      	bls.n	8006554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e006      	b.n	8006562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d0f0      	beq.n	8006542 <USB_CoreReset+0x36>

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800657c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006580:	f002 fcd4 	bl	8008f2c <USBD_static_malloc>
 8006584:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d109      	bne.n	80065a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	32b0      	adds	r2, #176	@ 0xb0
 8006596:	2100      	movs	r1, #0
 8006598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800659c:	2302      	movs	r3, #2
 800659e:	e0d4      	b.n	800674a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80065a4:	2100      	movs	r1, #0
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f003 fb1f 	bl	8009bea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32b0      	adds	r2, #176	@ 0xb0
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	32b0      	adds	r2, #176	@ 0xb0
 80065c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7c1b      	ldrb	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d138      	bne.n	800664a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006754 <USBD_CDC_Init+0x1e4>)
 80065da:	7819      	ldrb	r1, [r3, #0]
 80065dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065e0:	2202      	movs	r2, #2
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f002 fb7f 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006754 <USBD_CDC_Init+0x1e4>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 020f 	and.w	r2, r3, #15
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	3324      	adds	r3, #36	@ 0x24
 80065fe:	2201      	movs	r2, #1
 8006600:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006602:	4b55      	ldr	r3, [pc, #340]	@ (8006758 <USBD_CDC_Init+0x1e8>)
 8006604:	7819      	ldrb	r1, [r3, #0]
 8006606:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800660a:	2202      	movs	r2, #2
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f002 fb6a 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006612:	4b51      	ldr	r3, [pc, #324]	@ (8006758 <USBD_CDC_Init+0x1e8>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	f003 020f 	and.w	r2, r3, #15
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800662a:	2201      	movs	r2, #1
 800662c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800662e:	4b4b      	ldr	r3, [pc, #300]	@ (800675c <USBD_CDC_Init+0x1ec>)
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f003 020f 	and.w	r2, r3, #15
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	3326      	adds	r3, #38	@ 0x26
 8006644:	2210      	movs	r2, #16
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e035      	b.n	80066b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800664a:	4b42      	ldr	r3, [pc, #264]	@ (8006754 <USBD_CDC_Init+0x1e4>)
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	2340      	movs	r3, #64	@ 0x40
 8006650:	2202      	movs	r2, #2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 fb47 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006658:	4b3e      	ldr	r3, [pc, #248]	@ (8006754 <USBD_CDC_Init+0x1e4>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3324      	adds	r3, #36	@ 0x24
 800666e:	2201      	movs	r2, #1
 8006670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006672:	4b39      	ldr	r3, [pc, #228]	@ (8006758 <USBD_CDC_Init+0x1e8>)
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	2340      	movs	r3, #64	@ 0x40
 8006678:	2202      	movs	r2, #2
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fb33 	bl	8008ce6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006680:	4b35      	ldr	r3, [pc, #212]	@ (8006758 <USBD_CDC_Init+0x1e8>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 020f 	and.w	r2, r3, #15
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006698:	2201      	movs	r2, #1
 800669a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800669c:	4b2f      	ldr	r3, [pc, #188]	@ (800675c <USBD_CDC_Init+0x1ec>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	f003 020f 	and.w	r2, r3, #15
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	4613      	mov	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	440b      	add	r3, r1
 80066b0:	3326      	adds	r3, #38	@ 0x26
 80066b2:	2210      	movs	r2, #16
 80066b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066b6:	4b29      	ldr	r3, [pc, #164]	@ (800675c <USBD_CDC_Init+0x1ec>)
 80066b8:	7819      	ldrb	r1, [r3, #0]
 80066ba:	2308      	movs	r3, #8
 80066bc:	2203      	movs	r2, #3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fb11 	bl	8008ce6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066c4:	4b25      	ldr	r3, [pc, #148]	@ (800675c <USBD_CDC_Init+0x1ec>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3324      	adds	r3, #36	@ 0x24
 80066da:	2201      	movs	r2, #1
 80066dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	33b0      	adds	r3, #176	@ 0xb0
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006714:	2302      	movs	r3, #2
 8006716:	e018      	b.n	800674a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7c1b      	ldrb	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006720:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <USBD_CDC_Init+0x1e8>)
 8006722:	7819      	ldrb	r1, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800672a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fbc8 	bl	8008ec4 <USBD_LL_PrepareReceive>
 8006734:	e008      	b.n	8006748 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006736:	4b08      	ldr	r3, [pc, #32]	@ (8006758 <USBD_CDC_Init+0x1e8>)
 8006738:	7819      	ldrb	r1, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006740:	2340      	movs	r3, #64	@ 0x40
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f002 fbbe 	bl	8008ec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200000a3 	.word	0x200000a3
 8006758:	200000a4 	.word	0x200000a4
 800675c:	200000a5 	.word	0x200000a5

08006760 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800676c:	4b3a      	ldr	r3, [pc, #232]	@ (8006858 <USBD_CDC_DeInit+0xf8>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f002 fadd 	bl	8008d32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006778:	4b37      	ldr	r3, [pc, #220]	@ (8006858 <USBD_CDC_DeInit+0xf8>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f003 020f 	and.w	r2, r3, #15
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3324      	adds	r3, #36	@ 0x24
 800678e:	2200      	movs	r2, #0
 8006790:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006792:	4b32      	ldr	r3, [pc, #200]	@ (800685c <USBD_CDC_DeInit+0xfc>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f002 faca 	bl	8008d32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800679e:	4b2f      	ldr	r3, [pc, #188]	@ (800685c <USBD_CDC_DeInit+0xfc>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f003 020f 	and.w	r2, r3, #15
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067b6:	2200      	movs	r2, #0
 80067b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067ba:	4b29      	ldr	r3, [pc, #164]	@ (8006860 <USBD_CDC_DeInit+0x100>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 fab6 	bl	8008d32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067c6:	4b26      	ldr	r3, [pc, #152]	@ (8006860 <USBD_CDC_DeInit+0x100>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f003 020f 	and.w	r2, r3, #15
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	3324      	adds	r3, #36	@ 0x24
 80067dc:	2200      	movs	r2, #0
 80067de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006860 <USBD_CDC_DeInit+0x100>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	6879      	ldr	r1, [r7, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	3326      	adds	r3, #38	@ 0x26
 80067f6:	2200      	movs	r2, #0
 80067f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	32b0      	adds	r2, #176	@ 0xb0
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01f      	beq.n	800684c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	33b0      	adds	r3, #176	@ 0xb0
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	32b0      	adds	r2, #176	@ 0xb0
 800682a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800682e:	4618      	mov	r0, r3
 8006830:	f002 fb8a 	bl	8008f48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	32b0      	adds	r2, #176	@ 0xb0
 800683e:	2100      	movs	r1, #0
 8006840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200000a3 	.word	0x200000a3
 800685c:	200000a4 	.word	0x200000a4
 8006860:	200000a5 	.word	0x200000a5

08006864 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	32b0      	adds	r2, #176	@ 0xb0
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	e0bf      	b.n	8006a14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800689c:	2b00      	cmp	r3, #0
 800689e:	d050      	beq.n	8006942 <USBD_CDC_Setup+0xde>
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	f040 80af 	bne.w	8006a04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	88db      	ldrh	r3, [r3, #6]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d03a      	beq.n	8006924 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	da1b      	bge.n	80068f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	33b0      	adds	r3, #176	@ 0xb0
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068d0:	683a      	ldr	r2, [r7, #0]
 80068d2:	88d2      	ldrh	r2, [r2, #6]
 80068d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b07      	cmp	r3, #7
 80068dc:	bf28      	it	cs
 80068de:	2307      	movcs	r3, #7
 80068e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	89fa      	ldrh	r2, [r7, #14]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 fd93 	bl	8008414 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068ee:	e090      	b.n	8006a12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	785a      	ldrb	r2, [r3, #1]
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	88db      	ldrh	r3, [r3, #6]
 80068fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8006900:	d803      	bhi.n	800690a <USBD_CDC_Setup+0xa6>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	e000      	b.n	800690c <USBD_CDC_Setup+0xa8>
 800690a:	2240      	movs	r2, #64	@ 0x40
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006912:	6939      	ldr	r1, [r7, #16]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800691a:	461a      	mov	r2, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 fda5 	bl	800846c <USBD_CtlPrepareRx>
      break;
 8006922:	e076      	b.n	8006a12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	33b0      	adds	r3, #176	@ 0xb0
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	7850      	ldrb	r0, [r2, #1]
 800693a:	2200      	movs	r2, #0
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	4798      	blx	r3
      break;
 8006940:	e067      	b.n	8006a12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b0b      	cmp	r3, #11
 8006948:	d851      	bhi.n	80069ee <USBD_CDC_Setup+0x18a>
 800694a:	a201      	add	r2, pc, #4	@ (adr r2, 8006950 <USBD_CDC_Setup+0xec>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006981 	.word	0x08006981
 8006954:	080069fd 	.word	0x080069fd
 8006958:	080069ef 	.word	0x080069ef
 800695c:	080069ef 	.word	0x080069ef
 8006960:	080069ef 	.word	0x080069ef
 8006964:	080069ef 	.word	0x080069ef
 8006968:	080069ef 	.word	0x080069ef
 800696c:	080069ef 	.word	0x080069ef
 8006970:	080069ef 	.word	0x080069ef
 8006974:	080069ef 	.word	0x080069ef
 8006978:	080069ab 	.word	0x080069ab
 800697c:	080069d5 	.word	0x080069d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b03      	cmp	r3, #3
 800698a:	d107      	bne.n	800699c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800698c:	f107 030a 	add.w	r3, r7, #10
 8006990:	2202      	movs	r2, #2
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fd3d 	bl	8008414 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800699a:	e032      	b.n	8006a02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fcbb 	bl	800831a <USBD_CtlError>
            ret = USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	75fb      	strb	r3, [r7, #23]
          break;
 80069a8:	e02b      	b.n	8006a02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d107      	bne.n	80069c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069b6:	f107 030d 	add.w	r3, r7, #13
 80069ba:	2201      	movs	r2, #1
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fd28 	bl	8008414 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c4:	e01d      	b.n	8006a02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fca6 	bl	800831a <USBD_CtlError>
            ret = USBD_FAIL;
 80069ce:	2303      	movs	r3, #3
 80069d0:	75fb      	strb	r3, [r7, #23]
          break;
 80069d2:	e016      	b.n	8006a02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d00f      	beq.n	8006a00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fc99 	bl	800831a <USBD_CtlError>
            ret = USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069ec:	e008      	b.n	8006a00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fc92 	bl	800831a <USBD_CtlError>
          ret = USBD_FAIL;
 80069f6:	2303      	movs	r3, #3
 80069f8:	75fb      	strb	r3, [r7, #23]
          break;
 80069fa:	e002      	b.n	8006a02 <USBD_CDC_Setup+0x19e>
          break;
 80069fc:	bf00      	nop
 80069fe:	e008      	b.n	8006a12 <USBD_CDC_Setup+0x1ae>
          break;
 8006a00:	bf00      	nop
      }
      break;
 8006a02:	e006      	b.n	8006a12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 fc87 	bl	800831a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a10:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	32b0      	adds	r2, #176	@ 0xb0
 8006a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e065      	b.n	8006b12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	32b0      	adds	r2, #176	@ 0xb0
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 020f 	and.w	r2, r3, #15
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	3318      	adds	r3, #24
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02f      	beq.n	8006ad0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a70:	78fb      	ldrb	r3, [r7, #3]
 8006a72:	f003 020f 	and.w	r2, r3, #15
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	3318      	adds	r3, #24
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 010f 	and.w	r1, r3, #15
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	440b      	add	r3, r1
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4403      	add	r3, r0
 8006a98:	331c      	adds	r3, #28
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d112      	bne.n	8006ad0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	3318      	adds	r3, #24
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ac2:	78f9      	ldrb	r1, [r7, #3]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 f9da 	bl	8008e82 <USBD_LL_Transmit>
 8006ace:	e01f      	b.n	8006b10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	33b0      	adds	r3, #176	@ 0xb0
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d010      	beq.n	8006b10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	33b0      	adds	r3, #176	@ 0xb0
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	32b0      	adds	r2, #176	@ 0xb0
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	32b0      	adds	r2, #176	@ 0xb0
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e01a      	b.n	8006b82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f002 f9d8 	bl	8008f06 <USBD_LL_GetRxDataSize>
 8006b56:	4602      	mov	r2, r0
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	33b0      	adds	r3, #176	@ 0xb0
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	32b0      	adds	r2, #176	@ 0xb0
 8006b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e024      	b.n	8006bf6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	33b0      	adds	r3, #176	@ 0xb0
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d019      	beq.n	8006bf4 <USBD_CDC_EP0_RxReady+0x6a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006bc6:	2bff      	cmp	r3, #255	@ 0xff
 8006bc8:	d014      	beq.n	8006bf4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	33b0      	adds	r3, #176	@ 0xb0
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006be2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	22ff      	movs	r2, #255	@ 0xff
 8006bf0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c08:	2182      	movs	r1, #130	@ 0x82
 8006c0a:	4818      	ldr	r0, [pc, #96]	@ (8006c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c0c:	f000 fd4f 	bl	80076ae <USBD_GetEpDesc>
 8006c10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c12:	2101      	movs	r1, #1
 8006c14:	4815      	ldr	r0, [pc, #84]	@ (8006c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c16:	f000 fd4a 	bl	80076ae <USBD_GetEpDesc>
 8006c1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c1c:	2181      	movs	r1, #129	@ 0x81
 8006c1e:	4813      	ldr	r0, [pc, #76]	@ (8006c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c20:	f000 fd45 	bl	80076ae <USBD_GetEpDesc>
 8006c24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d006      	beq.n	8006c46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c40:	711a      	strb	r2, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d006      	beq.n	8006c5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c54:	711a      	strb	r2, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2243      	movs	r2, #67	@ 0x43
 8006c5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c60:	4b02      	ldr	r3, [pc, #8]	@ (8006c6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000060 	.word	0x20000060

08006c70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c78:	2182      	movs	r1, #130	@ 0x82
 8006c7a:	4818      	ldr	r0, [pc, #96]	@ (8006cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c7c:	f000 fd17 	bl	80076ae <USBD_GetEpDesc>
 8006c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c82:	2101      	movs	r1, #1
 8006c84:	4815      	ldr	r0, [pc, #84]	@ (8006cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c86:	f000 fd12 	bl	80076ae <USBD_GetEpDesc>
 8006c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c8c:	2181      	movs	r1, #129	@ 0x81
 8006c8e:	4813      	ldr	r0, [pc, #76]	@ (8006cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c90:	f000 fd0d 	bl	80076ae <USBD_GetEpDesc>
 8006c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	711a      	strb	r2, [r3, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f042 0202 	orr.w	r2, r2, #2
 8006cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	711a      	strb	r2, [r3, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f042 0202 	orr.w	r2, r2, #2
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2243      	movs	r2, #67	@ 0x43
 8006cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cd0:	4b02      	ldr	r3, [pc, #8]	@ (8006cdc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000060 	.word	0x20000060

08006ce0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ce8:	2182      	movs	r1, #130	@ 0x82
 8006cea:	4818      	ldr	r0, [pc, #96]	@ (8006d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cec:	f000 fcdf 	bl	80076ae <USBD_GetEpDesc>
 8006cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4815      	ldr	r0, [pc, #84]	@ (8006d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cf6:	f000 fcda 	bl	80076ae <USBD_GetEpDesc>
 8006cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cfc:	2181      	movs	r1, #129	@ 0x81
 8006cfe:	4813      	ldr	r0, [pc, #76]	@ (8006d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d00:	f000 fcd5 	bl	80076ae <USBD_GetEpDesc>
 8006d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d20:	711a      	strb	r2, [r3, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d34:	711a      	strb	r2, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2243      	movs	r2, #67	@ 0x43
 8006d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d40:	4b02      	ldr	r3, [pc, #8]	@ (8006d4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000060 	.word	0x20000060

08006d50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d5e:	4b03      	ldr	r3, [pc, #12]	@ (8006d6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	2000001c 	.word	0x2000001c

08006d70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e009      	b.n	8006d98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	33b0      	adds	r3, #176	@ 0xb0
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	32b0      	adds	r2, #176	@ 0xb0
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e008      	b.n	8006ddc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32b0      	adds	r2, #176	@ 0xb0
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e004      	b.n	8006e16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32b0      	adds	r2, #176	@ 0xb0
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e025      	b.n	8006e96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11f      	bne.n	8006e94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e5c:	4b10      	ldr	r3, [pc, #64]	@ (8006ea0 <USBD_CDC_TransmitPacket+0x7c>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4403      	add	r3, r0
 8006e76:	3318      	adds	r3, #24
 8006e78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <USBD_CDC_TransmitPacket+0x7c>)
 8006e7c:	7819      	ldrb	r1, [r3, #0]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fff9 	bl	8008e82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	200000a3 	.word	0x200000a3

08006ea4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32b0      	adds	r2, #176	@ 0xb0
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32b0      	adds	r2, #176	@ 0xb0
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e018      	b.n	8006f04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7c1b      	ldrb	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eda:	4b0c      	ldr	r3, [pc, #48]	@ (8006f0c <USBD_CDC_ReceivePacket+0x68>)
 8006edc:	7819      	ldrb	r1, [r3, #0]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 ffeb 	bl	8008ec4 <USBD_LL_PrepareReceive>
 8006eee:	e008      	b.n	8006f02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ef0:	4b06      	ldr	r3, [pc, #24]	@ (8006f0c <USBD_CDC_ReceivePacket+0x68>)
 8006ef2:	7819      	ldrb	r1, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006efa:	2340      	movs	r3, #64	@ 0x40
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 ffe1 	bl	8008ec4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200000a4 	.word	0x200000a4

08006f10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e01f      	b.n	8006f68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	79fa      	ldrb	r2, [r7, #7]
 8006f5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f001 fe5b 	bl	8008c18 <USBD_LL_Init>
 8006f62:	4603      	mov	r3, r0
 8006f64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e025      	b.n	8006fd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	32ae      	adds	r2, #174	@ 0xae
 8006f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00f      	beq.n	8006fc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	32ae      	adds	r2, #174	@ 0xae
 8006fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb4:	f107 020e 	add.w	r2, r7, #14
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4798      	blx	r3
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fe63 	bl	8008cb0 <USBD_LL_Start>
 8006fea:	4603      	mov	r3, r0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ffc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	460b      	mov	r3, r1
 8007014:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	4611      	mov	r1, r2
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	4611      	mov	r1, r2
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	4798      	blx	r3
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007068:	2303      	movs	r3, #3
 800706a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	4618      	mov	r0, r3
 800708a:	f001 f90c 	bl	80082a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800709c:	461a      	mov	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070aa:	f003 031f 	and.w	r3, r3, #31
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d01a      	beq.n	80070e8 <USBD_LL_SetupStage+0x72>
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d822      	bhi.n	80070fc <USBD_LL_SetupStage+0x86>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <USBD_LL_SetupStage+0x4a>
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d00a      	beq.n	80070d4 <USBD_LL_SetupStage+0x5e>
 80070be:	e01d      	b.n	80070fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb63 	bl	8007794 <USBD_StdDevReq>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73fb      	strb	r3, [r7, #15]
      break;
 80070d2:	e020      	b.n	8007116 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fbcb 	bl	8007878 <USBD_StdItfReq>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
      break;
 80070e6:	e016      	b.n	8007116 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fc2d 	bl	8007950 <USBD_StdEPReq>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]
      break;
 80070fa:	e00c      	b.n	8007116 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007102:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007106:	b2db      	uxtb	r3, r3
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f001 fe30 	bl	8008d70 <USBD_LL_StallEP>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]
      break;
 8007114:	bf00      	nop
  }

  return ret;
 8007116:	7bfb      	ldrb	r3, [r7, #15]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	460b      	mov	r3, r1
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d16e      	bne.n	8007216 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800713e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007146:	2b03      	cmp	r3, #3
 8007148:	f040 8098 	bne.w	800727c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	429a      	cmp	r2, r3
 8007156:	d913      	bls.n	8007180 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	1ad2      	subs	r2, r2, r3
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	4293      	cmp	r3, r2
 8007170:	bf28      	it	cs
 8007172:	4613      	movcs	r3, r2
 8007174:	461a      	mov	r2, r3
 8007176:	6879      	ldr	r1, [r7, #4]
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f001 f994 	bl	80084a6 <USBD_CtlContinueRx>
 800717e:	e07d      	b.n	800727c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	2b02      	cmp	r3, #2
 800718c:	d014      	beq.n	80071b8 <USBD_LL_DataOutStage+0x98>
 800718e:	2b02      	cmp	r3, #2
 8007190:	d81d      	bhi.n	80071ce <USBD_LL_DataOutStage+0xae>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <USBD_LL_DataOutStage+0x7c>
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <USBD_LL_DataOutStage+0x82>
 800719a:	e018      	b.n	80071ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	75bb      	strb	r3, [r7, #22]
            break;
 80071a0:	e018      	b.n	80071d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	4619      	mov	r1, r3
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fa64 	bl	800767a <USBD_CoreFindIF>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75bb      	strb	r3, [r7, #22]
            break;
 80071b6:	e00d      	b.n	80071d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fa66 	bl	8007694 <USBD_CoreFindEP>
 80071c8:	4603      	mov	r3, r0
 80071ca:	75bb      	strb	r3, [r7, #22]
            break;
 80071cc:	e002      	b.n	80071d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	75bb      	strb	r3, [r7, #22]
            break;
 80071d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071d4:	7dbb      	ldrb	r3, [r7, #22]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d119      	bne.n	800720e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d113      	bne.n	800720e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071e6:	7dba      	ldrb	r2, [r7, #22]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	32ae      	adds	r2, #174	@ 0xae
 80071ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80071f6:	7dba      	ldrb	r2, [r7, #22]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071fe:	7dba      	ldrb	r2, [r7, #22]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	32ae      	adds	r2, #174	@ 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f001 f95a 	bl	80084c8 <USBD_CtlSendStatus>
 8007214:	e032      	b.n	800727c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fa37 	bl	8007694 <USBD_CoreFindEP>
 8007226:	4603      	mov	r3, r0
 8007228:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800722a:	7dbb      	ldrb	r3, [r7, #22]
 800722c:	2bff      	cmp	r3, #255	@ 0xff
 800722e:	d025      	beq.n	800727c <USBD_LL_DataOutStage+0x15c>
 8007230:	7dbb      	ldrb	r3, [r7, #22]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d122      	bne.n	800727c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b03      	cmp	r3, #3
 8007240:	d117      	bne.n	8007272 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007242:	7dba      	ldrb	r2, [r7, #22]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	32ae      	adds	r2, #174	@ 0xae
 8007248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00f      	beq.n	8007272 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007252:	7dba      	ldrb	r2, [r7, #22]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800725a:	7dba      	ldrb	r2, [r7, #22]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	32ae      	adds	r2, #174	@ 0xae
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	7afa      	ldrb	r2, [r7, #11]
 8007268:	4611      	mov	r1, r2
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	4798      	blx	r3
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	e000      	b.n	800727e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	460b      	mov	r3, r1
 8007290:	607a      	str	r2, [r7, #4]
 8007292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007294:	7afb      	ldrb	r3, [r7, #11]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d16f      	bne.n	800737a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3314      	adds	r3, #20
 800729e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d15a      	bne.n	8007360 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d914      	bls.n	80072e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	1ad2      	subs	r2, r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f001 f8bc 	bl	800844a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d2:	2300      	movs	r3, #0
 80072d4:	2200      	movs	r2, #0
 80072d6:	2100      	movs	r1, #0
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 fdf3 	bl	8008ec4 <USBD_LL_PrepareReceive>
 80072de:	e03f      	b.n	8007360 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d11c      	bne.n	8007326 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d316      	bcc.n	8007326 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007302:	429a      	cmp	r2, r3
 8007304:	d20f      	bcs.n	8007326 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007306:	2200      	movs	r2, #0
 8007308:	2100      	movs	r1, #0
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f001 f89d 	bl	800844a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007318:	2300      	movs	r3, #0
 800731a:	2200      	movs	r2, #0
 800731c:	2100      	movs	r1, #0
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f001 fdd0 	bl	8008ec4 <USBD_LL_PrepareReceive>
 8007324:	e01c      	b.n	8007360 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b03      	cmp	r3, #3
 8007330:	d10f      	bne.n	8007352 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007352:	2180      	movs	r1, #128	@ 0x80
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f001 fd0b 	bl	8008d70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f001 f8c7 	bl	80084ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d03a      	beq.n	80073e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f7ff fe42 	bl	8006ff4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007378:	e032      	b.n	80073e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007380:	b2db      	uxtb	r3, r3
 8007382:	4619      	mov	r1, r3
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f985 	bl	8007694 <USBD_CoreFindEP>
 800738a:	4603      	mov	r3, r0
 800738c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	2bff      	cmp	r3, #255	@ 0xff
 8007392:	d025      	beq.n	80073e0 <USBD_LL_DataInStage+0x15a>
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d122      	bne.n	80073e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d11c      	bne.n	80073e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073a6:	7dfa      	ldrb	r2, [r7, #23]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	32ae      	adds	r2, #174	@ 0xae
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d014      	beq.n	80073e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073b6:	7dfa      	ldrb	r2, [r7, #23]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073be:	7dfa      	ldrb	r2, [r7, #23]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	32ae      	adds	r2, #174	@ 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	7afa      	ldrb	r2, [r7, #11]
 80073cc:	4611      	mov	r1, r2
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	4798      	blx	r3
 80073d2:	4603      	mov	r3, r0
 80073d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073d6:	7dbb      	ldrb	r3, [r7, #22]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073dc:	7dbb      	ldrb	r3, [r7, #22]
 80073de:	e000      	b.n	80073e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d014      	beq.n	8007450 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00e      	beq.n	8007450 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6852      	ldr	r2, [r2, #4]
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	4611      	mov	r1, r2
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007450:	2340      	movs	r3, #64	@ 0x40
 8007452:	2200      	movs	r2, #0
 8007454:	2100      	movs	r1, #0
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 fc45 	bl	8008ce6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2240      	movs	r2, #64	@ 0x40
 8007468:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800746c:	2340      	movs	r3, #64	@ 0x40
 800746e:	2200      	movs	r2, #0
 8007470:	2180      	movs	r1, #128	@ 0x80
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 fc37 	bl	8008ce6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2240      	movs	r2, #64	@ 0x40
 8007482:	621a      	str	r2, [r3, #32]

  return ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d006      	beq.n	80074d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2204      	movs	r2, #4
 80074d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d106      	bne.n	8007508 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b03      	cmp	r3, #3
 8007528:	d110      	bne.n	800754c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32ae      	adds	r2, #174	@ 0xae
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e01c      	b.n	80075b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b03      	cmp	r3, #3
 8007582:	d115      	bne.n	80075b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	@ 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	@ 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32ae      	adds	r2, #174	@ 0xae
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e01c      	b.n	8007616 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d115      	bne.n	8007614 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	@ 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32ae      	adds	r2, #174	@ 0xae
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	4611      	mov	r1, r2
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6852      	ldr	r2, [r2, #4]
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	4611      	mov	r1, r2
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007686:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d91f      	bls.n	8007714 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076da:	e013      	b.n	8007704 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076dc:	f107 030a 	add.w	r3, r7, #10
 80076e0:	4619      	mov	r1, r3
 80076e2:	6978      	ldr	r0, [r7, #20]
 80076e4:	f000 f81b 	bl	800771e <USBD_GetNextDesc>
 80076e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b05      	cmp	r3, #5
 80076f0:	d108      	bne.n	8007704 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	789b      	ldrb	r3, [r3, #2]
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d008      	beq.n	8007712 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	885b      	ldrh	r3, [r3, #2]
 8007708:	b29a      	uxth	r2, r3
 800770a:	897b      	ldrh	r3, [r7, #10]
 800770c:	429a      	cmp	r2, r3
 800770e:	d8e5      	bhi.n	80076dc <USBD_GetEpDesc+0x2e>
 8007710:	e000      	b.n	8007714 <USBD_GetEpDesc+0x66>
          break;
 8007712:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007714:	693b      	ldr	r3, [r7, #16]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	7812      	ldrb	r2, [r2, #0]
 8007734:	4413      	add	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4413      	add	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007756:	b480      	push	{r7}
 8007758:	b087      	sub	sp, #28
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	3301      	adds	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007774:	8a3b      	ldrh	r3, [r7, #16]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	b21a      	sxth	r2, r3
 800777a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800777e:	4313      	orrs	r3, r2
 8007780:	b21b      	sxth	r3, r3
 8007782:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007784:	89fb      	ldrh	r3, [r7, #14]
}
 8007786:	4618      	mov	r0, r3
 8007788:	371c      	adds	r7, #28
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
	...

08007794 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077aa:	2b40      	cmp	r3, #64	@ 0x40
 80077ac:	d005      	beq.n	80077ba <USBD_StdDevReq+0x26>
 80077ae:	2b40      	cmp	r3, #64	@ 0x40
 80077b0:	d857      	bhi.n	8007862 <USBD_StdDevReq+0xce>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00f      	beq.n	80077d6 <USBD_StdDevReq+0x42>
 80077b6:	2b20      	cmp	r3, #32
 80077b8:	d153      	bne.n	8007862 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	32ae      	adds	r2, #174	@ 0xae
 80077c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3
 80077d0:	4603      	mov	r3, r0
 80077d2:	73fb      	strb	r3, [r7, #15]
      break;
 80077d4:	e04a      	b.n	800786c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	785b      	ldrb	r3, [r3, #1]
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d83b      	bhi.n	8007856 <USBD_StdDevReq+0xc2>
 80077de:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <USBD_StdDevReq+0x50>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007839 	.word	0x08007839
 80077e8:	0800784d 	.word	0x0800784d
 80077ec:	08007857 	.word	0x08007857
 80077f0:	08007843 	.word	0x08007843
 80077f4:	08007857 	.word	0x08007857
 80077f8:	08007817 	.word	0x08007817
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	08007857 	.word	0x08007857
 8007804:	0800782f 	.word	0x0800782f
 8007808:	08007821 	.word	0x08007821
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa3c 	bl	8007c8c <USBD_GetDescriptor>
          break;
 8007814:	e024      	b.n	8007860 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fba1 	bl	8007f60 <USBD_SetAddress>
          break;
 800781e:	e01f      	b.n	8007860 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fbe0 	bl	8007fe8 <USBD_SetConfig>
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
          break;
 800782c:	e018      	b.n	8007860 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc83 	bl	800813c <USBD_GetConfig>
          break;
 8007836:	e013      	b.n	8007860 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fcb4 	bl	80081a8 <USBD_GetStatus>
          break;
 8007840:	e00e      	b.n	8007860 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fce3 	bl	8008210 <USBD_SetFeature>
          break;
 800784a:	e009      	b.n	8007860 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fd07 	bl	8008262 <USBD_ClrFeature>
          break;
 8007854:	e004      	b.n	8007860 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fd5e 	bl	800831a <USBD_CtlError>
          break;
 800785e:	bf00      	nop
      }
      break;
 8007860:	e004      	b.n	800786c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fd58 	bl	800831a <USBD_CtlError>
      break;
 800786a:	bf00      	nop
  }

  return ret;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop

08007878 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800788e:	2b40      	cmp	r3, #64	@ 0x40
 8007890:	d005      	beq.n	800789e <USBD_StdItfReq+0x26>
 8007892:	2b40      	cmp	r3, #64	@ 0x40
 8007894:	d852      	bhi.n	800793c <USBD_StdItfReq+0xc4>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <USBD_StdItfReq+0x26>
 800789a:	2b20      	cmp	r3, #32
 800789c:	d14e      	bne.n	800793c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d840      	bhi.n	800792e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	889b      	ldrh	r3, [r3, #4]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d836      	bhi.n	8007924 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fedb 	bl	800767a <USBD_CoreFindIF>
 80078c4:	4603      	mov	r3, r0
 80078c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c8:	7bbb      	ldrb	r3, [r7, #14]
 80078ca:	2bff      	cmp	r3, #255	@ 0xff
 80078cc:	d01d      	beq.n	800790a <USBD_StdItfReq+0x92>
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d11a      	bne.n	800790a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078d4:	7bba      	ldrb	r2, [r7, #14]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32ae      	adds	r2, #174	@ 0xae
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00f      	beq.n	8007904 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078e4:	7bba      	ldrb	r2, [r7, #14]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078ec:	7bba      	ldrb	r2, [r7, #14]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	@ 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007902:	e004      	b.n	800790e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007904:	2303      	movs	r3, #3
 8007906:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007908:	e001      	b.n	800790e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800790a:	2303      	movs	r3, #3
 800790c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	88db      	ldrh	r3, [r3, #6]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d110      	bne.n	8007938 <USBD_StdItfReq+0xc0>
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10d      	bne.n	8007938 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fdd3 	bl	80084c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007922:	e009      	b.n	8007938 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fcf7 	bl	800831a <USBD_CtlError>
          break;
 800792c:	e004      	b.n	8007938 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fcf2 	bl	800831a <USBD_CtlError>
          break;
 8007936:	e000      	b.n	800793a <USBD_StdItfReq+0xc2>
          break;
 8007938:	bf00      	nop
      }
      break;
 800793a:	e004      	b.n	8007946 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fceb 	bl	800831a <USBD_CtlError>
      break;
 8007944:	bf00      	nop
  }

  return ret;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	889b      	ldrh	r3, [r3, #4]
 8007962:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800796c:	2b40      	cmp	r3, #64	@ 0x40
 800796e:	d007      	beq.n	8007980 <USBD_StdEPReq+0x30>
 8007970:	2b40      	cmp	r3, #64	@ 0x40
 8007972:	f200 817f 	bhi.w	8007c74 <USBD_StdEPReq+0x324>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02a      	beq.n	80079d0 <USBD_StdEPReq+0x80>
 800797a:	2b20      	cmp	r3, #32
 800797c:	f040 817a 	bne.w	8007c74 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff fe85 	bl	8007694 <USBD_CoreFindEP>
 800798a:	4603      	mov	r3, r0
 800798c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800798e:	7b7b      	ldrb	r3, [r7, #13]
 8007990:	2bff      	cmp	r3, #255	@ 0xff
 8007992:	f000 8174 	beq.w	8007c7e <USBD_StdEPReq+0x32e>
 8007996:	7b7b      	ldrb	r3, [r7, #13]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f040 8170 	bne.w	8007c7e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800799e:	7b7a      	ldrb	r2, [r7, #13]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079a6:	7b7a      	ldrb	r2, [r7, #13]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32ae      	adds	r2, #174	@ 0xae
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 8163 	beq.w	8007c7e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079b8:	7b7a      	ldrb	r2, [r7, #13]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32ae      	adds	r2, #174	@ 0xae
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ce:	e156      	b.n	8007c7e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	785b      	ldrb	r3, [r3, #1]
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d008      	beq.n	80079ea <USBD_StdEPReq+0x9a>
 80079d8:	2b03      	cmp	r3, #3
 80079da:	f300 8145 	bgt.w	8007c68 <USBD_StdEPReq+0x318>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 809b 	beq.w	8007b1a <USBD_StdEPReq+0x1ca>
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d03c      	beq.n	8007a62 <USBD_StdEPReq+0x112>
 80079e8:	e13e      	b.n	8007c68 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d002      	beq.n	80079fc <USBD_StdEPReq+0xac>
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d016      	beq.n	8007a28 <USBD_StdEPReq+0xd8>
 80079fa:	e02c      	b.n	8007a56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00d      	beq.n	8007a1e <USBD_StdEPReq+0xce>
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b80      	cmp	r3, #128	@ 0x80
 8007a06:	d00a      	beq.n	8007a1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 f9af 	bl	8008d70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a12:	2180      	movs	r1, #128	@ 0x80
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f9ab 	bl	8008d70 <USBD_LL_StallEP>
 8007a1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a1c:	e020      	b.n	8007a60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fc7a 	bl	800831a <USBD_CtlError>
              break;
 8007a26:	e01b      	b.n	8007a60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	885b      	ldrh	r3, [r3, #2]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10e      	bne.n	8007a4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <USBD_StdEPReq+0xfe>
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b80      	cmp	r3, #128	@ 0x80
 8007a3a:	d008      	beq.n	8007a4e <USBD_StdEPReq+0xfe>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	88db      	ldrh	r3, [r3, #6]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f991 	bl	8008d70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fd3a 	bl	80084c8 <USBD_CtlSendStatus>

              break;
 8007a54:	e004      	b.n	8007a60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc5e 	bl	800831a <USBD_CtlError>
              break;
 8007a5e:	bf00      	nop
          }
          break;
 8007a60:	e107      	b.n	8007c72 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d002      	beq.n	8007a74 <USBD_StdEPReq+0x124>
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d016      	beq.n	8007aa0 <USBD_StdEPReq+0x150>
 8007a72:	e04b      	b.n	8007b0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00d      	beq.n	8007a96 <USBD_StdEPReq+0x146>
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b80      	cmp	r3, #128	@ 0x80
 8007a7e:	d00a      	beq.n	8007a96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f973 	bl	8008d70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a8a:	2180      	movs	r1, #128	@ 0x80
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f96f 	bl	8008d70 <USBD_LL_StallEP>
 8007a92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a94:	e040      	b.n	8007b18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fc3e 	bl	800831a <USBD_CtlError>
              break;
 8007a9e:	e03b      	b.n	8007b18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	885b      	ldrh	r3, [r3, #2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d136      	bne.n	8007b16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 f979 	bl	8008dae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fd03 	bl	80084c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7ff fde4 	bl	8007694 <USBD_CoreFindEP>
 8007acc:	4603      	mov	r3, r0
 8007ace:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad0:	7b7b      	ldrb	r3, [r7, #13]
 8007ad2:	2bff      	cmp	r3, #255	@ 0xff
 8007ad4:	d01f      	beq.n	8007b16 <USBD_StdEPReq+0x1c6>
 8007ad6:	7b7b      	ldrb	r3, [r7, #13]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d11c      	bne.n	8007b16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007adc:	7b7a      	ldrb	r2, [r7, #13]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ae4:	7b7a      	ldrb	r2, [r7, #13]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	32ae      	adds	r2, #174	@ 0xae
 8007aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d010      	beq.n	8007b16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007af4:	7b7a      	ldrb	r2, [r7, #13]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32ae      	adds	r2, #174	@ 0xae
 8007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b0a:	e004      	b.n	8007b16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fc03 	bl	800831a <USBD_CtlError>
              break;
 8007b14:	e000      	b.n	8007b18 <USBD_StdEPReq+0x1c8>
              break;
 8007b16:	bf00      	nop
          }
          break;
 8007b18:	e0ab      	b.n	8007c72 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d002      	beq.n	8007b2c <USBD_StdEPReq+0x1dc>
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d032      	beq.n	8007b90 <USBD_StdEPReq+0x240>
 8007b2a:	e097      	b.n	8007c5c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <USBD_StdEPReq+0x1f2>
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b80      	cmp	r3, #128	@ 0x80
 8007b36:	d004      	beq.n	8007b42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fbed 	bl	800831a <USBD_CtlError>
                break;
 8007b40:	e091      	b.n	8007c66 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da0b      	bge.n	8007b62 <USBD_StdEPReq+0x212>
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
 8007b4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	3310      	adds	r3, #16
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	3304      	adds	r3, #4
 8007b60:	e00b      	b.n	8007b7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	4413      	add	r3, r2
 8007b78:	3304      	adds	r3, #4
 8007b7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2202      	movs	r2, #2
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fc43 	bl	8008414 <USBD_CtlSendData>
              break;
 8007b8e:	e06a      	b.n	8007c66 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da11      	bge.n	8007bbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	f003 020f 	and.w	r2, r3, #15
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	3324      	adds	r3, #36	@ 0x24
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d117      	bne.n	8007be2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fbb0 	bl	800831a <USBD_CtlError>
                  break;
 8007bba:	e054      	b.n	8007c66 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	f003 020f 	and.w	r2, r3, #15
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d104      	bne.n	8007be2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fb9d 	bl	800831a <USBD_CtlError>
                  break;
 8007be0:	e041      	b.n	8007c66 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da0b      	bge.n	8007c02 <USBD_StdEPReq+0x2b2>
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	3310      	adds	r3, #16
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3304      	adds	r3, #4
 8007c00:	e00b      	b.n	8007c1a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	3304      	adds	r3, #4
 8007c1a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <USBD_StdEPReq+0x2d8>
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	2b80      	cmp	r3, #128	@ 0x80
 8007c26:	d103      	bne.n	8007c30 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	e00e      	b.n	8007c4e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 f8d9 	bl	8008dec <USBD_LL_IsStallEP>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2201      	movs	r2, #1
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2202      	movs	r2, #2
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fbdd 	bl	8008414 <USBD_CtlSendData>
              break;
 8007c5a:	e004      	b.n	8007c66 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fb5b 	bl	800831a <USBD_CtlError>
              break;
 8007c64:	bf00      	nop
          }
          break;
 8007c66:	e004      	b.n	8007c72 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fb55 	bl	800831a <USBD_CtlError>
          break;
 8007c70:	bf00      	nop
      }
      break;
 8007c72:	e005      	b.n	8007c80 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fb4f 	bl	800831a <USBD_CtlError>
      break;
 8007c7c:	e000      	b.n	8007c80 <USBD_StdEPReq+0x330>
      break;
 8007c7e:	bf00      	nop
  }

  return ret;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	0a1b      	lsrs	r3, r3, #8
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b06      	cmp	r3, #6
 8007cae:	f200 8128 	bhi.w	8007f02 <USBD_GetDescriptor+0x276>
 8007cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <USBD_GetDescriptor+0x2c>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cd5 	.word	0x08007cd5
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007f03 	.word	0x08007f03
 8007cc8:	08007f03 	.word	0x08007f03
 8007ccc:	08007ea3 	.word	0x08007ea3
 8007cd0:	08007ecf 	.word	0x08007ecf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7c12      	ldrb	r2, [r2, #16]
 8007ce0:	f107 0108 	add.w	r1, r7, #8
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	4798      	blx	r3
 8007ce8:	60f8      	str	r0, [r7, #12]
      break;
 8007cea:	e112      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	7c1b      	ldrb	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10d      	bne.n	8007d10 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	f107 0208 	add.w	r2, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d0e:	e100      	b.n	8007f12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
 8007d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	2202      	movs	r2, #2
 8007d28:	701a      	strb	r2, [r3, #0]
      break;
 8007d2a:	e0f2      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	885b      	ldrh	r3, [r3, #2]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b05      	cmp	r3, #5
 8007d34:	f200 80ac 	bhi.w	8007e90 <USBD_GetDescriptor+0x204>
 8007d38:	a201      	add	r2, pc, #4	@ (adr r2, 8007d40 <USBD_GetDescriptor+0xb4>)
 8007d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3e:	bf00      	nop
 8007d40:	08007d59 	.word	0x08007d59
 8007d44:	08007d8d 	.word	0x08007d8d
 8007d48:	08007dc1 	.word	0x08007dc1
 8007d4c:	08007df5 	.word	0x08007df5
 8007d50:	08007e29 	.word	0x08007e29
 8007d54:	08007e5d 	.word	0x08007e5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	7c12      	ldrb	r2, [r2, #16]
 8007d70:	f107 0108 	add.w	r1, r7, #8
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7a:	e091      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 facb 	bl	800831a <USBD_CtlError>
            err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8a:	e089      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	7c12      	ldrb	r2, [r2, #16]
 8007da4:	f107 0108 	add.w	r1, r7, #8
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dae:	e077      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db0:	6839      	ldr	r1, [r7, #0]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fab1 	bl	800831a <USBD_CtlError>
            err++;
 8007db8:	7afb      	ldrb	r3, [r7, #11]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dbe:	e06f      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de2:	e05d      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fa97 	bl	800831a <USBD_CtlError>
            err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
          break;
 8007df2:	e055      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	7c12      	ldrb	r2, [r2, #16]
 8007e0c:	f107 0108 	add.w	r1, r7, #8
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
 8007e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e16:	e043      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fa7d 	bl	800831a <USBD_CtlError>
            err++;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	3301      	adds	r3, #1
 8007e24:	72fb      	strb	r3, [r7, #11]
          break;
 8007e26:	e03b      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2e:	695b      	ldr	r3, [r3, #20]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	7c12      	ldrb	r2, [r2, #16]
 8007e40:	f107 0108 	add.w	r1, r7, #8
 8007e44:	4610      	mov	r0, r2
 8007e46:	4798      	blx	r3
 8007e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4a:	e029      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e4c:	6839      	ldr	r1, [r7, #0]
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fa63 	bl	800831a <USBD_CtlError>
            err++;
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	3301      	adds	r3, #1
 8007e58:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5a:	e021      	b.n	8007ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6e:	699b      	ldr	r3, [r3, #24]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	7c12      	ldrb	r2, [r2, #16]
 8007e74:	f107 0108 	add.w	r1, r7, #8
 8007e78:	4610      	mov	r0, r2
 8007e7a:	4798      	blx	r3
 8007e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7e:	e00f      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa49 	bl	800831a <USBD_CtlError>
            err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8e:	e007      	b.n	8007ea0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa41 	bl	800831a <USBD_CtlError>
          err++;
 8007e98:	7afb      	ldrb	r3, [r7, #11]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e9e:	bf00      	nop
      }
      break;
 8007ea0:	e037      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	7c1b      	ldrb	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	f107 0208 	add.w	r2, r7, #8
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4798      	blx	r3
 8007eba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ebc:	e029      	b.n	8007f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa2a 	bl	800831a <USBD_CtlError>
        err++;
 8007ec6:	7afb      	ldrb	r3, [r7, #11]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	72fb      	strb	r3, [r7, #11]
      break;
 8007ecc:	e021      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c1b      	ldrb	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ede:	f107 0208 	add.w	r2, r7, #8
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
 8007ee6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	2207      	movs	r2, #7
 8007eee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ef0:	e00f      	b.n	8007f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa10 	bl	800831a <USBD_CtlError>
        err++;
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	3301      	adds	r3, #1
 8007efe:	72fb      	strb	r3, [r7, #11]
      break;
 8007f00:	e007      	b.n	8007f12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fa08 	bl	800831a <USBD_CtlError>
      err++;
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f10:	bf00      	nop
  }

  if (err != 0U)
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11e      	bne.n	8007f56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	88db      	ldrh	r3, [r3, #6]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d016      	beq.n	8007f4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f20:	893b      	ldrh	r3, [r7, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00e      	beq.n	8007f44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	88da      	ldrh	r2, [r3, #6]
 8007f2a:	893b      	ldrh	r3, [r7, #8]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	bf28      	it	cs
 8007f30:	4613      	movcs	r3, r2
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f36:	893b      	ldrh	r3, [r7, #8]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fa69 	bl	8008414 <USBD_CtlSendData>
 8007f42:	e009      	b.n	8007f58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f9e7 	bl	800831a <USBD_CtlError>
 8007f4c:	e004      	b.n	8007f58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 faba 	bl	80084c8 <USBD_CtlSendStatus>
 8007f54:	e000      	b.n	8007f58 <USBD_GetDescriptor+0x2cc>
    return;
 8007f56:	bf00      	nop
  }
}
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop

08007f60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	889b      	ldrh	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d131      	bne.n	8007fd6 <USBD_SetAddress+0x76>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d12d      	bne.n	8007fd6 <USBD_SetAddress+0x76>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	885b      	ldrh	r3, [r3, #2]
 8007f7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f80:	d829      	bhi.n	8007fd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	885b      	ldrh	r3, [r3, #2]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d104      	bne.n	8007fa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9bc 	bl	800831a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa2:	e01d      	b.n	8007fe0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	7bfa      	ldrb	r2, [r7, #15]
 8007fa8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 ff47 	bl	8008e44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa86 	bl	80084c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fca:	e009      	b.n	8007fe0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd4:	e004      	b.n	8007fe0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f99e 	bl	800831a <USBD_CtlError>
  }
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8008138 <USBD_SetConfig+0x150>)
 8007ffe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008000:	4b4d      	ldr	r3, [pc, #308]	@ (8008138 <USBD_SetConfig+0x150>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d905      	bls.n	8008014 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f985 	bl	800831a <USBD_CtlError>
    return USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	e08c      	b.n	800812e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d002      	beq.n	8008026 <USBD_SetConfig+0x3e>
 8008020:	2b03      	cmp	r3, #3
 8008022:	d029      	beq.n	8008078 <USBD_SetConfig+0x90>
 8008024:	e075      	b.n	8008112 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008026:	4b44      	ldr	r3, [pc, #272]	@ (8008138 <USBD_SetConfig+0x150>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d020      	beq.n	8008070 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800802e:	4b42      	ldr	r3, [pc, #264]	@ (8008138 <USBD_SetConfig+0x150>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008038:	4b3f      	ldr	r3, [pc, #252]	@ (8008138 <USBD_SetConfig+0x150>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fe ffe3 	bl	800700a <USBD_SetClassConfig>
 8008044:	4603      	mov	r3, r0
 8008046:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f962 	bl	800831a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2202      	movs	r2, #2
 800805a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800805e:	e065      	b.n	800812c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa31 	bl	80084c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2203      	movs	r2, #3
 800806a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800806e:	e05d      	b.n	800812c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa29 	bl	80084c8 <USBD_CtlSendStatus>
      break;
 8008076:	e059      	b.n	800812c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008078:	4b2f      	ldr	r3, [pc, #188]	@ (8008138 <USBD_SetConfig+0x150>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d112      	bne.n	80080a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008088:	4b2b      	ldr	r3, [pc, #172]	@ (8008138 <USBD_SetConfig+0x150>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008092:	4b29      	ldr	r3, [pc, #164]	@ (8008138 <USBD_SetConfig+0x150>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7fe ffd2 	bl	8007042 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fa12 	bl	80084c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080a4:	e042      	b.n	800812c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080a6:	4b24      	ldr	r3, [pc, #144]	@ (8008138 <USBD_SetConfig+0x150>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d02a      	beq.n	800810a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fe ffc0 	bl	8007042 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008138 <USBD_SetConfig+0x150>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008138 <USBD_SetConfig+0x150>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fe ff99 	bl	800700a <USBD_SetClassConfig>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00f      	beq.n	8008102 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f918 	bl	800831a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7fe ffa5 	bl	8007042 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2202      	movs	r2, #2
 80080fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008100:	e014      	b.n	800812c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f9e0 	bl	80084c8 <USBD_CtlSendStatus>
      break;
 8008108:	e010      	b.n	800812c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f9dc 	bl	80084c8 <USBD_CtlSendStatus>
      break;
 8008110:	e00c      	b.n	800812c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f900 	bl	800831a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800811a:	4b07      	ldr	r3, [pc, #28]	@ (8008138 <USBD_SetConfig+0x150>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fe ff8e 	bl	8007042 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008126:	2303      	movs	r3, #3
 8008128:	73fb      	strb	r3, [r7, #15]
      break;
 800812a:	bf00      	nop
  }

  return ret;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000418 	.word	0x20000418

0800813c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d004      	beq.n	8008158 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f8e2 	bl	800831a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008156:	e023      	b.n	80081a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	dc02      	bgt.n	800816a <USBD_GetConfig+0x2e>
 8008164:	2b00      	cmp	r3, #0
 8008166:	dc03      	bgt.n	8008170 <USBD_GetConfig+0x34>
 8008168:	e015      	b.n	8008196 <USBD_GetConfig+0x5a>
 800816a:	2b03      	cmp	r3, #3
 800816c:	d00b      	beq.n	8008186 <USBD_GetConfig+0x4a>
 800816e:	e012      	b.n	8008196 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3308      	adds	r3, #8
 800817a:	2201      	movs	r2, #1
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f948 	bl	8008414 <USBD_CtlSendData>
        break;
 8008184:	e00c      	b.n	80081a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	3304      	adds	r3, #4
 800818a:	2201      	movs	r2, #1
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f940 	bl	8008414 <USBD_CtlSendData>
        break;
 8008194:	e004      	b.n	80081a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8be 	bl	800831a <USBD_CtlError>
        break;
 800819e:	bf00      	nop
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d81e      	bhi.n	80081fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	88db      	ldrh	r3, [r3, #6]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d004      	beq.n	80081d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f8a5 	bl	800831a <USBD_CtlError>
        break;
 80081d0:	e01a      	b.n	8008208 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f043 0202 	orr.w	r2, r3, #2
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	330c      	adds	r3, #12
 80081f2:	2202      	movs	r2, #2
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f90c 	bl	8008414 <USBD_CtlSendData>
      break;
 80081fc:	e004      	b.n	8008208 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f88a 	bl	800831a <USBD_CtlError>
      break;
 8008206:	bf00      	nop
  }
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d107      	bne.n	8008232 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f94c 	bl	80084c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008230:	e013      	b.n	800825a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	2b02      	cmp	r3, #2
 8008238:	d10b      	bne.n	8008252 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	889b      	ldrh	r3, [r3, #4]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2da      	uxtb	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f93c 	bl	80084c8 <USBD_CtlSendStatus>
}
 8008250:	e003      	b.n	800825a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008252:	6839      	ldr	r1, [r7, #0]
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f860 	bl	800831a <USBD_CtlError>
}
 800825a:	bf00      	nop
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b082      	sub	sp, #8
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008272:	b2db      	uxtb	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	2b02      	cmp	r3, #2
 8008278:	d80b      	bhi.n	8008292 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10c      	bne.n	800829c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f91c 	bl	80084c8 <USBD_CtlSendStatus>
      }
      break;
 8008290:	e004      	b.n	800829c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f840 	bl	800831a <USBD_CtlError>
      break;
 800829a:	e000      	b.n	800829e <USBD_ClrFeature+0x3c>
      break;
 800829c:	bf00      	nop
  }
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3301      	adds	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fa40 	bl	8007756 <SWAPBYTE>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3301      	adds	r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f7ff fa33 	bl	8007756 <SWAPBYTE>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f7ff fa26 	bl	8007756 <SWAPBYTE>
 800830a:	4603      	mov	r3, r0
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	80da      	strh	r2, [r3, #6]
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008324:	2180      	movs	r1, #128	@ 0x80
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fd22 	bl	8008d70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fd1e 	bl	8008d70 <USBD_LL_StallEP>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d042      	beq.n	80083d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008356:	6938      	ldr	r0, [r7, #16]
 8008358:	f000 f842 	bl	80083e0 <USBD_GetLen>
 800835c:	4603      	mov	r3, r0
 800835e:	3301      	adds	r3, #1
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008366:	d808      	bhi.n	800837a <USBD_GetString+0x3e>
 8008368:	6938      	ldr	r0, [r7, #16]
 800836a:	f000 f839 	bl	80083e0 <USBD_GetLen>
 800836e:	4603      	mov	r3, r0
 8008370:	3301      	adds	r3, #1
 8008372:	b29b      	uxth	r3, r3
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	e001      	b.n	800837e <USBD_GetString+0x42>
 800837a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4413      	add	r3, r2
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7812      	ldrb	r2, [r2, #0]
 800838c:	701a      	strb	r2, [r3, #0]
  idx++;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	3301      	adds	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4413      	add	r3, r2
 800839a:	2203      	movs	r2, #3
 800839c:	701a      	strb	r2, [r3, #0]
  idx++;
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	3301      	adds	r3, #1
 80083a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083a4:	e013      	b.n	80083ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	4413      	add	r3, r2
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	7812      	ldrb	r2, [r2, #0]
 80083b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	3301      	adds	r3, #1
 80083b6:	613b      	str	r3, [r7, #16]
    idx++;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	3301      	adds	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	4413      	add	r3, r2
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	3301      	adds	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e7      	bne.n	80083a6 <USBD_GetString+0x6a>
 80083d6:	e000      	b.n	80083da <USBD_GetString+0x9e>
    return;
 80083d8:	bf00      	nop
  }
}
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083f0:	e005      	b.n	80083fe <USBD_GetLen+0x1e>
  {
    len++;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	3301      	adds	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	3301      	adds	r3, #1
 80083fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f5      	bne.n	80083f2 <USBD_GetLen+0x12>
  }

  return len;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2202      	movs	r2, #2
 8008424:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	2100      	movs	r1, #0
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fd21 	bl	8008e82 <USBD_LL_Transmit>

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	2100      	movs	r1, #0
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fd10 	bl	8008e82 <USBD_LL_Transmit>

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2203      	movs	r2, #3
 800847c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 fd14 	bl	8008ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fd03 	bl	8008ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2204      	movs	r2, #4
 80084d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084d8:	2300      	movs	r3, #0
 80084da:	2200      	movs	r2, #0
 80084dc:	2100      	movs	r1, #0
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fccf 	bl	8008e82 <USBD_LL_Transmit>

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2205      	movs	r2, #5
 80084fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fe:	2300      	movs	r3, #0
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fcdd 	bl	8008ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008518:	2200      	movs	r2, #0
 800851a:	4912      	ldr	r1, [pc, #72]	@ (8008564 <MX_USB_DEVICE_Init+0x50>)
 800851c:	4812      	ldr	r0, [pc, #72]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 800851e:	f7fe fcf7 	bl	8006f10 <USBD_Init>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008528:	f7f9 f9ae 	bl	8001888 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800852c:	490f      	ldr	r1, [pc, #60]	@ (800856c <MX_USB_DEVICE_Init+0x58>)
 800852e:	480e      	ldr	r0, [pc, #56]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 8008530:	f7fe fd1e 	bl	8006f70 <USBD_RegisterClass>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800853a:	f7f9 f9a5 	bl	8001888 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800853e:	490c      	ldr	r1, [pc, #48]	@ (8008570 <MX_USB_DEVICE_Init+0x5c>)
 8008540:	4809      	ldr	r0, [pc, #36]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 8008542:	f7fe fc15 	bl	8006d70 <USBD_CDC_RegisterInterface>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800854c:	f7f9 f99c 	bl	8001888 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008550:	4805      	ldr	r0, [pc, #20]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 8008552:	f7fe fd43 	bl	8006fdc <USBD_Start>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800855c:	f7f9 f994 	bl	8001888 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008560:	bf00      	nop
 8008562:	bd80      	pop	{r7, pc}
 8008564:	200000bc 	.word	0x200000bc
 8008568:	2000041c 	.word	0x2000041c
 800856c:	20000028 	.word	0x20000028
 8008570:	200000a8 	.word	0x200000a8

08008574 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008578:	2200      	movs	r2, #0
 800857a:	4905      	ldr	r1, [pc, #20]	@ (8008590 <CDC_Init_FS+0x1c>)
 800857c:	4805      	ldr	r0, [pc, #20]	@ (8008594 <CDC_Init_FS+0x20>)
 800857e:	f7fe fc11 	bl	8006da4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008582:	4905      	ldr	r1, [pc, #20]	@ (8008598 <CDC_Init_FS+0x24>)
 8008584:	4803      	ldr	r0, [pc, #12]	@ (8008594 <CDC_Init_FS+0x20>)
 8008586:	f7fe fc2f 	bl	8006de8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800858a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800858c:	4618      	mov	r0, r3
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000ef8 	.word	0x20000ef8
 8008594:	2000041c 	.word	0x2000041c
 8008598:	200006f8 	.word	0x200006f8

0800859c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	  if (recData != NULL) {
 80085a0:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <CDC_DeInit_FS+0x24>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <CDC_DeInit_FS+0x1c>
	    free(recData);
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <CDC_DeInit_FS+0x24>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fd09 	bl	8008fc4 <free>
	    recData = NULL;
 80085b2:	4b03      	ldr	r3, [pc, #12]	@ (80085c0 <CDC_DeInit_FS+0x24>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
	  }
	  return USBD_OK;
 80085b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000348 	.word	0x20000348

080085c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b23      	cmp	r3, #35	@ 0x23
 80085d8:	d84a      	bhi.n	8008670 <CDC_Control_FS+0xac>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <CDC_Control_FS+0x1c>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	08008671 	.word	0x08008671
 80085e4:	08008671 	.word	0x08008671
 80085e8:	08008671 	.word	0x08008671
 80085ec:	08008671 	.word	0x08008671
 80085f0:	08008671 	.word	0x08008671
 80085f4:	08008671 	.word	0x08008671
 80085f8:	08008671 	.word	0x08008671
 80085fc:	08008671 	.word	0x08008671
 8008600:	08008671 	.word	0x08008671
 8008604:	08008671 	.word	0x08008671
 8008608:	08008671 	.word	0x08008671
 800860c:	08008671 	.word	0x08008671
 8008610:	08008671 	.word	0x08008671
 8008614:	08008671 	.word	0x08008671
 8008618:	08008671 	.word	0x08008671
 800861c:	08008671 	.word	0x08008671
 8008620:	08008671 	.word	0x08008671
 8008624:	08008671 	.word	0x08008671
 8008628:	08008671 	.word	0x08008671
 800862c:	08008671 	.word	0x08008671
 8008630:	08008671 	.word	0x08008671
 8008634:	08008671 	.word	0x08008671
 8008638:	08008671 	.word	0x08008671
 800863c:	08008671 	.word	0x08008671
 8008640:	08008671 	.word	0x08008671
 8008644:	08008671 	.word	0x08008671
 8008648:	08008671 	.word	0x08008671
 800864c:	08008671 	.word	0x08008671
 8008650:	08008671 	.word	0x08008671
 8008654:	08008671 	.word	0x08008671
 8008658:	08008671 	.word	0x08008671
 800865c:	08008671 	.word	0x08008671
 8008660:	08008671 	.word	0x08008671
 8008664:	08008671 	.word	0x08008671
 8008668:	08008671 	.word	0x08008671
 800866c:	08008671 	.word	0x08008671
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008670:	bf00      	nop
  }

  return (USBD_OK);
 8008672:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  if (*Len > 0) {
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d02b      	beq.n	80086ea <CDC_Receive_FS+0x6a>
	    if (recData != NULL) {
 8008692:	4b1c      	ldr	r3, [pc, #112]	@ (8008704 <CDC_Receive_FS+0x84>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <CDC_Receive_FS+0x24>
	      free(recData);
 800869a:	4b1a      	ldr	r3, [pc, #104]	@ (8008704 <CDC_Receive_FS+0x84>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fc90 	bl	8008fc4 <free>
	    }

	    recData = (uint8_t*)malloc(*Len + 1);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	3301      	adds	r3, #1
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fc82 	bl	8008fb4 <malloc>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	4b13      	ldr	r3, [pc, #76]	@ (8008704 <CDC_Receive_FS+0x84>)
 80086b6:	601a      	str	r2, [r3, #0]
	    if (recData == NULL) {
 80086b8:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <CDC_Receive_FS+0x84>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <CDC_Receive_FS+0x44>
	      return USBD_FAIL;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e01a      	b.n	80086fa <CDC_Receive_FS+0x7a>
	    }


	    memcpy(recData, Buf, *Len);
 80086c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008704 <CDC_Receive_FS+0x84>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	f001 fb1b 	bl	8009d0a <memcpy>
	    recData[*Len] = '\0';
 80086d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008704 <CDC_Receive_FS+0x84>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4413      	add	r3, r2
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]


	    recDataSize = *Len;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a08      	ldr	r2, [pc, #32]	@ (8008708 <CDC_Receive_FS+0x88>)
 80086e8:	6013      	str	r3, [r2, #0]
	  }

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4807      	ldr	r0, [pc, #28]	@ (800870c <CDC_Receive_FS+0x8c>)
 80086ee:	f7fe fb7b 	bl	8006de8 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086f2:	4806      	ldr	r0, [pc, #24]	@ (800870c <CDC_Receive_FS+0x8c>)
 80086f4:	f7fe fbd6 	bl	8006ea4 <USBD_CDC_ReceivePacket>
	  return USBD_OK;
 80086f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000348 	.word	0x20000348
 8008708:	2000034c 	.word	0x2000034c
 800870c:	2000041c 	.word	0x2000041c

08008710 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008720:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <CDC_Transmit_FS+0x48>)
 8008722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008726:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008732:	2301      	movs	r3, #1
 8008734:	e00b      	b.n	800874e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008736:	887b      	ldrh	r3, [r7, #2]
 8008738:	461a      	mov	r2, r3
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4806      	ldr	r0, [pc, #24]	@ (8008758 <CDC_Transmit_FS+0x48>)
 800873e:	f7fe fb31 	bl	8006da4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008742:	4805      	ldr	r0, [pc, #20]	@ (8008758 <CDC_Transmit_FS+0x48>)
 8008744:	f7fe fb6e 	bl	8006e24 <USBD_CDC_TransmitPacket>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	2000041c 	.word	0x2000041c

0800875c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800876e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008772:	4618      	mov	r0, r3
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
	...

08008780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2212      	movs	r2, #18
 8008790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008792:	4b03      	ldr	r3, [pc, #12]	@ (80087a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	200000d8 	.word	0x200000d8

080087a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2204      	movs	r2, #4
 80087b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087b6:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	200000ec 	.word	0x200000ec

080087c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d105      	bne.n	80087e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4907      	ldr	r1, [pc, #28]	@ (80087fc <USBD_FS_ProductStrDescriptor+0x34>)
 80087de:	4808      	ldr	r0, [pc, #32]	@ (8008800 <USBD_FS_ProductStrDescriptor+0x38>)
 80087e0:	f7ff fdac 	bl	800833c <USBD_GetString>
 80087e4:	e004      	b.n	80087f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4904      	ldr	r1, [pc, #16]	@ (80087fc <USBD_FS_ProductStrDescriptor+0x34>)
 80087ea:	4805      	ldr	r0, [pc, #20]	@ (8008800 <USBD_FS_ProductStrDescriptor+0x38>)
 80087ec:	f7ff fda6 	bl	800833c <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f0:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	200016f8 	.word	0x200016f8
 8008800:	0800b934 	.word	0x0800b934

08008804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	4904      	ldr	r1, [pc, #16]	@ (8008824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008814:	4804      	ldr	r0, [pc, #16]	@ (8008828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008816:	f7ff fd91 	bl	800833c <USBD_GetString>
  return USBD_StrDesc;
 800881a:	4b02      	ldr	r3, [pc, #8]	@ (8008824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200016f8 	.word	0x200016f8
 8008828:	0800b94c 	.word	0x0800b94c

0800882c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	221a      	movs	r2, #26
 800883c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800883e:	f000 f843 	bl	80088c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008842:	4b02      	ldr	r3, [pc, #8]	@ (800884c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200000f0 	.word	0x200000f0

08008850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	4907      	ldr	r1, [pc, #28]	@ (8008884 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008866:	4808      	ldr	r0, [pc, #32]	@ (8008888 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008868:	f7ff fd68 	bl	800833c <USBD_GetString>
 800886c:	e004      	b.n	8008878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4904      	ldr	r1, [pc, #16]	@ (8008884 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008872:	4805      	ldr	r0, [pc, #20]	@ (8008888 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008874:	f7ff fd62 	bl	800833c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008878:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	200016f8 	.word	0x200016f8
 8008888:	0800b960 	.word	0x0800b960

0800888c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	6039      	str	r1, [r7, #0]
 8008896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	4907      	ldr	r1, [pc, #28]	@ (80088c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088a2:	4808      	ldr	r0, [pc, #32]	@ (80088c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088a4:	f7ff fd4a 	bl	800833c <USBD_GetString>
 80088a8:	e004      	b.n	80088b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088aa:	683a      	ldr	r2, [r7, #0]
 80088ac:	4904      	ldr	r1, [pc, #16]	@ (80088c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ae:	4805      	ldr	r0, [pc, #20]	@ (80088c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088b0:	f7ff fd44 	bl	800833c <USBD_GetString>
  }
  return USBD_StrDesc;
 80088b4:	4b02      	ldr	r3, [pc, #8]	@ (80088c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200016f8 	.word	0x200016f8
 80088c4:	0800b96c 	.word	0x0800b96c

080088c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088ce:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <Get_SerialNum+0x44>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008910 <Get_SerialNum+0x48>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088da:	4b0e      	ldr	r3, [pc, #56]	@ (8008914 <Get_SerialNum+0x4c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4413      	add	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088ee:	2208      	movs	r2, #8
 80088f0:	4909      	ldr	r1, [pc, #36]	@ (8008918 <Get_SerialNum+0x50>)
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f000 f814 	bl	8008920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088f8:	2204      	movs	r2, #4
 80088fa:	4908      	ldr	r1, [pc, #32]	@ (800891c <Get_SerialNum+0x54>)
 80088fc:	68b8      	ldr	r0, [r7, #8]
 80088fe:	f000 f80f 	bl	8008920 <IntToUnicode>
  }
}
 8008902:	bf00      	nop
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	1fff7a10 	.word	0x1fff7a10
 8008910:	1fff7a14 	.word	0x1fff7a14
 8008914:	1fff7a18 	.word	0x1fff7a18
 8008918:	200000f2 	.word	0x200000f2
 800891c:	20000102 	.word	0x20000102

08008920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008920:	b480      	push	{r7}
 8008922:	b087      	sub	sp, #28
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008932:	2300      	movs	r3, #0
 8008934:	75fb      	strb	r3, [r7, #23]
 8008936:	e027      	b.n	8008988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	0f1b      	lsrs	r3, r3, #28
 800893c:	2b09      	cmp	r3, #9
 800893e:	d80b      	bhi.n	8008958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	0f1b      	lsrs	r3, r3, #28
 8008944:	b2da      	uxtb	r2, r3
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	4619      	mov	r1, r3
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	440b      	add	r3, r1
 8008950:	3230      	adds	r2, #48	@ 0x30
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e00a      	b.n	800896e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	0f1b      	lsrs	r3, r3, #28
 800895c:	b2da      	uxtb	r2, r3
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4619      	mov	r1, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	440b      	add	r3, r1
 8008968:	3237      	adds	r2, #55	@ 0x37
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	011b      	lsls	r3, r3, #4
 8008972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008974:	7dfb      	ldrb	r3, [r7, #23]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	3301      	adds	r3, #1
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	2200      	movs	r2, #0
 8008980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	3301      	adds	r3, #1
 8008986:	75fb      	strb	r3, [r7, #23]
 8008988:	7dfa      	ldrb	r2, [r7, #23]
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	429a      	cmp	r2, r3
 800898e:	d3d3      	bcc.n	8008938 <IntToUnicode+0x18>
  }
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
	...

080089a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b08a      	sub	sp, #40	@ 0x28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	609a      	str	r2, [r3, #8]
 80089b4:	60da      	str	r2, [r3, #12]
 80089b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089c0:	d13a      	bne.n	8008a38 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	4b1e      	ldr	r3, [pc, #120]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80089d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80089de:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80089e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e4:	2302      	movs	r3, #2
 80089e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089e8:	2300      	movs	r3, #0
 80089ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089ec:	2303      	movs	r3, #3
 80089ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089f0:	230a      	movs	r3, #10
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089f4:	f107 0314 	add.w	r3, r7, #20
 80089f8:	4619      	mov	r1, r3
 80089fa:	4812      	ldr	r0, [pc, #72]	@ (8008a44 <HAL_PCD_MspInit+0xa4>)
 80089fc:	f7f9 fc7e 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a00:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 8008a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a04:	4a0e      	ldr	r2, [pc, #56]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 8008a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0a:	6353      	str	r3, [r2, #52]	@ 0x34
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 8008a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a14:	4a0a      	ldr	r2, [pc, #40]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 8008a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a1a:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a1c:	4b08      	ldr	r3, [pc, #32]	@ (8008a40 <HAL_PCD_MspInit+0xa0>)
 8008a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a24:	60fb      	str	r3, [r7, #12]
 8008a26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	2043      	movs	r0, #67	@ 0x43
 8008a2e:	f7f9 fc2e 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a32:	2043      	movs	r0, #67	@ 0x43
 8008a34:	f7f9 fc47 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a38:	bf00      	nop
 8008a3a:	3728      	adds	r7, #40	@ 0x28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	40023800 	.word	0x40023800
 8008a44:	40020000 	.word	0x40020000

08008a48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7fe fb09 	bl	8007076 <USBD_LL_SetupStage>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	4619      	mov	r1, r3
 8008a96:	f7fe fb43 	bl	8007120 <USBD_LL_DataOutStage>
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	3320      	adds	r3, #32
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f7fe fbdc 	bl	8007286 <USBD_LL_DataInStage>
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fd16 	bl	8007516 <USBD_LL_SOF>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008afa:	2301      	movs	r3, #1
 8008afc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	79db      	ldrb	r3, [r3, #7]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d001      	beq.n	8008b0a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b06:	f7f8 febf 	bl	8001888 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b10:	7bfa      	ldrb	r2, [r7, #15]
 8008b12:	4611      	mov	r1, r2
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fcba 	bl	800748e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fe fc62 	bl	80073ea <USBD_LL_Reset>
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fcb5 	bl	80074ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	6812      	ldr	r2, [r2, #0]
 8008b52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b56:	f043 0301 	orr.w	r3, r3, #1
 8008b5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	7adb      	ldrb	r3, [r3, #11]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b64:	4b04      	ldr	r3, [pc, #16]	@ (8008b78 <HAL_PCD_SuspendCallback+0x48>)
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	4a03      	ldr	r2, [pc, #12]	@ (8008b78 <HAL_PCD_SuspendCallback+0x48>)
 8008b6a:	f043 0306 	orr.w	r3, r3, #6
 8008b6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	e000ed00 	.word	0xe000ed00

08008b7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fcab 	bl	80074e6 <USBD_LL_Resume>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008baa:	78fa      	ldrb	r2, [r7, #3]
 8008bac:	4611      	mov	r1, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fd03 	bl	80075ba <USBD_LL_IsoOUTIncomplete>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bce:	78fa      	ldrb	r2, [r7, #3]
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fe fcbf 	bl	8007556 <USBD_LL_IsoINIncomplete>
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fd15 	bl	800761e <USBD_LL_DevConnected>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fd12 	bl	8007634 <USBD_LL_DevDisconnected>
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d13c      	bne.n	8008ca2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c28:	4a20      	ldr	r2, [pc, #128]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1e      	ldr	r2, [pc, #120]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c34:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c38:	4b1c      	ldr	r3, [pc, #112]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008c3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c40:	4b1a      	ldr	r3, [pc, #104]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c42:	2204      	movs	r2, #4
 8008c44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c46:	4b19      	ldr	r3, [pc, #100]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c48:	2202      	movs	r2, #2
 8008c4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c4c:	4b17      	ldr	r3, [pc, #92]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c52:	4b16      	ldr	r3, [pc, #88]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c54:	2202      	movs	r2, #2
 8008c56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c58:	4b14      	ldr	r3, [pc, #80]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c5e:	4b13      	ldr	r3, [pc, #76]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c64:	4b11      	ldr	r3, [pc, #68]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c66:	2200      	movs	r2, #0
 8008c68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c6a:	4b10      	ldr	r3, [pc, #64]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c70:	4b0e      	ldr	r3, [pc, #56]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c76:	480d      	ldr	r0, [pc, #52]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c78:	f7f9 fcdd 	bl	8002636 <HAL_PCD_Init>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c82:	f7f8 fe01 	bl	8001888 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c86:	2180      	movs	r1, #128	@ 0x80
 8008c88:	4808      	ldr	r0, [pc, #32]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c8a:	f7fa ff0a 	bl	8003aa2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	2100      	movs	r1, #0
 8008c92:	4806      	ldr	r0, [pc, #24]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c94:	f7fa febe 	bl	8003a14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c98:	2280      	movs	r2, #128	@ 0x80
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	4803      	ldr	r0, [pc, #12]	@ (8008cac <USBD_LL_Init+0x94>)
 8008c9e:	f7fa feb9 	bl	8003a14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	200018f8 	.word	0x200018f8

08008cb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f9 fdc4 	bl	8002854 <HAL_PCD_Start>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f942 	bl	8008f5c <USBD_Get_USB_Status>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	70fb      	strb	r3, [r7, #3]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70bb      	strb	r3, [r7, #2]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d0e:	78bb      	ldrb	r3, [r7, #2]
 8008d10:	883a      	ldrh	r2, [r7, #0]
 8008d12:	78f9      	ldrb	r1, [r7, #3]
 8008d14:	f7fa fa98 	bl	8003248 <HAL_PCD_EP_Open>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f91c 	bl	8008f5c <USBD_Get_USB_Status>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fa fae3 	bl	800331c <HAL_PCD_EP_Close>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f8fd 	bl	8008f5c <USBD_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fa fb9b 	bl	80034ca <HAL_PCD_EP_SetStall>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f8de 	bl	8008f5c <USBD_Get_USB_Status>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dc8:	78fa      	ldrb	r2, [r7, #3]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fa fbdf 	bl	8003590 <HAL_PCD_EP_ClrStall>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 f8bf 	bl	8008f5c <USBD_Get_USB_Status>
 8008dde:	4603      	mov	r3, r0
 8008de0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	da0b      	bge.n	8008e20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e0e:	68f9      	ldr	r1, [r7, #12]
 8008e10:	4613      	mov	r3, r2
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	3316      	adds	r3, #22
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	e00b      	b.n	8008e38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e20:	78fb      	ldrb	r3, [r7, #3]
 8008e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e26:	68f9      	ldr	r1, [r7, #12]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	440b      	add	r3, r1
 8008e32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008e36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e5e:	78fa      	ldrb	r2, [r7, #3]
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fa f9cc 	bl	8003200 <HAL_PCD_SetAddress>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f874 	bl	8008f5c <USBD_Get_USB_Status>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ea0:	7af9      	ldrb	r1, [r7, #11]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	f7fa fad6 	bl	8003456 <HAL_PCD_EP_Transmit>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eae:	7dfb      	ldrb	r3, [r7, #23]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 f853 	bl	8008f5c <USBD_Get_USB_Status>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eba:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	607a      	str	r2, [r7, #4]
 8008ece:	603b      	str	r3, [r7, #0]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ee2:	7af9      	ldrb	r1, [r7, #11]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	f7fa fa62 	bl	80033b0 <HAL_PCD_EP_Receive>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 f832 	bl	8008f5c <USBD_Get_USB_Status>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008efc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	4611      	mov	r1, r2
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fa fa82 	bl	8003426 <HAL_PCD_EP_GetRxCount>
 8008f22:	4603      	mov	r3, r0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f34:	4b03      	ldr	r3, [pc, #12]	@ (8008f44 <USBD_static_malloc+0x18>)
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	20001ddc 	.word	0x20001ddc

08008f48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]

}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	2b03      	cmp	r3, #3
 8008f6e:	d817      	bhi.n	8008fa0 <USBD_Get_USB_Status+0x44>
 8008f70:	a201      	add	r2, pc, #4	@ (adr r2, 8008f78 <USBD_Get_USB_Status+0x1c>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008f89 	.word	0x08008f89
 8008f7c:	08008f8f 	.word	0x08008f8f
 8008f80:	08008f95 	.word	0x08008f95
 8008f84:	08008f9b 	.word	0x08008f9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8c:	e00b      	b.n	8008fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	73fb      	strb	r3, [r7, #15]
    break;
 8008f92:	e008      	b.n	8008fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f94:	2301      	movs	r3, #1
 8008f96:	73fb      	strb	r3, [r7, #15]
    break;
 8008f98:	e005      	b.n	8008fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9e:	e002      	b.n	8008fa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa4:	bf00      	nop
  }
  return usb_status;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <malloc>:
 8008fb4:	4b02      	ldr	r3, [pc, #8]	@ (8008fc0 <malloc+0xc>)
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	f000 b82d 	b.w	8009018 <_malloc_r>
 8008fbe:	bf00      	nop
 8008fc0:	20000118 	.word	0x20000118

08008fc4 <free>:
 8008fc4:	4b02      	ldr	r3, [pc, #8]	@ (8008fd0 <free+0xc>)
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	f001 bcf9 	b.w	800a9c0 <_free_r>
 8008fce:	bf00      	nop
 8008fd0:	20000118 	.word	0x20000118

08008fd4 <sbrk_aligned>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8009014 <sbrk_aligned+0x40>)
 8008fd8:	460c      	mov	r4, r1
 8008fda:	6831      	ldr	r1, [r6, #0]
 8008fdc:	4605      	mov	r5, r0
 8008fde:	b911      	cbnz	r1, 8008fe6 <sbrk_aligned+0x12>
 8008fe0:	f000 fe44 	bl	8009c6c <_sbrk_r>
 8008fe4:	6030      	str	r0, [r6, #0]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 fe3f 	bl	8009c6c <_sbrk_r>
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	d103      	bne.n	8008ffa <sbrk_aligned+0x26>
 8008ff2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	bd70      	pop	{r4, r5, r6, pc}
 8008ffa:	1cc4      	adds	r4, r0, #3
 8008ffc:	f024 0403 	bic.w	r4, r4, #3
 8009000:	42a0      	cmp	r0, r4
 8009002:	d0f8      	beq.n	8008ff6 <sbrk_aligned+0x22>
 8009004:	1a21      	subs	r1, r4, r0
 8009006:	4628      	mov	r0, r5
 8009008:	f000 fe30 	bl	8009c6c <_sbrk_r>
 800900c:	3001      	adds	r0, #1
 800900e:	d1f2      	bne.n	8008ff6 <sbrk_aligned+0x22>
 8009010:	e7ef      	b.n	8008ff2 <sbrk_aligned+0x1e>
 8009012:	bf00      	nop
 8009014:	20001ffc 	.word	0x20001ffc

08009018 <_malloc_r>:
 8009018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800901c:	1ccd      	adds	r5, r1, #3
 800901e:	f025 0503 	bic.w	r5, r5, #3
 8009022:	3508      	adds	r5, #8
 8009024:	2d0c      	cmp	r5, #12
 8009026:	bf38      	it	cc
 8009028:	250c      	movcc	r5, #12
 800902a:	2d00      	cmp	r5, #0
 800902c:	4606      	mov	r6, r0
 800902e:	db01      	blt.n	8009034 <_malloc_r+0x1c>
 8009030:	42a9      	cmp	r1, r5
 8009032:	d904      	bls.n	800903e <_malloc_r+0x26>
 8009034:	230c      	movs	r3, #12
 8009036:	6033      	str	r3, [r6, #0]
 8009038:	2000      	movs	r0, #0
 800903a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009114 <_malloc_r+0xfc>
 8009042:	f000 f869 	bl	8009118 <__malloc_lock>
 8009046:	f8d8 3000 	ldr.w	r3, [r8]
 800904a:	461c      	mov	r4, r3
 800904c:	bb44      	cbnz	r4, 80090a0 <_malloc_r+0x88>
 800904e:	4629      	mov	r1, r5
 8009050:	4630      	mov	r0, r6
 8009052:	f7ff ffbf 	bl	8008fd4 <sbrk_aligned>
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	4604      	mov	r4, r0
 800905a:	d158      	bne.n	800910e <_malloc_r+0xf6>
 800905c:	f8d8 4000 	ldr.w	r4, [r8]
 8009060:	4627      	mov	r7, r4
 8009062:	2f00      	cmp	r7, #0
 8009064:	d143      	bne.n	80090ee <_malloc_r+0xd6>
 8009066:	2c00      	cmp	r4, #0
 8009068:	d04b      	beq.n	8009102 <_malloc_r+0xea>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	4639      	mov	r1, r7
 800906e:	4630      	mov	r0, r6
 8009070:	eb04 0903 	add.w	r9, r4, r3
 8009074:	f000 fdfa 	bl	8009c6c <_sbrk_r>
 8009078:	4581      	cmp	r9, r0
 800907a:	d142      	bne.n	8009102 <_malloc_r+0xea>
 800907c:	6821      	ldr	r1, [r4, #0]
 800907e:	1a6d      	subs	r5, r5, r1
 8009080:	4629      	mov	r1, r5
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff ffa6 	bl	8008fd4 <sbrk_aligned>
 8009088:	3001      	adds	r0, #1
 800908a:	d03a      	beq.n	8009102 <_malloc_r+0xea>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	442b      	add	r3, r5
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	f8d8 3000 	ldr.w	r3, [r8]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	bb62      	cbnz	r2, 80090f4 <_malloc_r+0xdc>
 800909a:	f8c8 7000 	str.w	r7, [r8]
 800909e:	e00f      	b.n	80090c0 <_malloc_r+0xa8>
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	1b52      	subs	r2, r2, r5
 80090a4:	d420      	bmi.n	80090e8 <_malloc_r+0xd0>
 80090a6:	2a0b      	cmp	r2, #11
 80090a8:	d917      	bls.n	80090da <_malloc_r+0xc2>
 80090aa:	1961      	adds	r1, r4, r5
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	6025      	str	r5, [r4, #0]
 80090b0:	bf18      	it	ne
 80090b2:	6059      	strne	r1, [r3, #4]
 80090b4:	6863      	ldr	r3, [r4, #4]
 80090b6:	bf08      	it	eq
 80090b8:	f8c8 1000 	streq.w	r1, [r8]
 80090bc:	5162      	str	r2, [r4, r5]
 80090be:	604b      	str	r3, [r1, #4]
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 f82f 	bl	8009124 <__malloc_unlock>
 80090c6:	f104 000b 	add.w	r0, r4, #11
 80090ca:	1d23      	adds	r3, r4, #4
 80090cc:	f020 0007 	bic.w	r0, r0, #7
 80090d0:	1ac2      	subs	r2, r0, r3
 80090d2:	bf1c      	itt	ne
 80090d4:	1a1b      	subne	r3, r3, r0
 80090d6:	50a3      	strne	r3, [r4, r2]
 80090d8:	e7af      	b.n	800903a <_malloc_r+0x22>
 80090da:	6862      	ldr	r2, [r4, #4]
 80090dc:	42a3      	cmp	r3, r4
 80090de:	bf0c      	ite	eq
 80090e0:	f8c8 2000 	streq.w	r2, [r8]
 80090e4:	605a      	strne	r2, [r3, #4]
 80090e6:	e7eb      	b.n	80090c0 <_malloc_r+0xa8>
 80090e8:	4623      	mov	r3, r4
 80090ea:	6864      	ldr	r4, [r4, #4]
 80090ec:	e7ae      	b.n	800904c <_malloc_r+0x34>
 80090ee:	463c      	mov	r4, r7
 80090f0:	687f      	ldr	r7, [r7, #4]
 80090f2:	e7b6      	b.n	8009062 <_malloc_r+0x4a>
 80090f4:	461a      	mov	r2, r3
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	d1fb      	bne.n	80090f4 <_malloc_r+0xdc>
 80090fc:	2300      	movs	r3, #0
 80090fe:	6053      	str	r3, [r2, #4]
 8009100:	e7de      	b.n	80090c0 <_malloc_r+0xa8>
 8009102:	230c      	movs	r3, #12
 8009104:	6033      	str	r3, [r6, #0]
 8009106:	4630      	mov	r0, r6
 8009108:	f000 f80c 	bl	8009124 <__malloc_unlock>
 800910c:	e794      	b.n	8009038 <_malloc_r+0x20>
 800910e:	6005      	str	r5, [r0, #0]
 8009110:	e7d6      	b.n	80090c0 <_malloc_r+0xa8>
 8009112:	bf00      	nop
 8009114:	20002000 	.word	0x20002000

08009118 <__malloc_lock>:
 8009118:	4801      	ldr	r0, [pc, #4]	@ (8009120 <__malloc_lock+0x8>)
 800911a:	f000 bdf4 	b.w	8009d06 <__retarget_lock_acquire_recursive>
 800911e:	bf00      	nop
 8009120:	20002144 	.word	0x20002144

08009124 <__malloc_unlock>:
 8009124:	4801      	ldr	r0, [pc, #4]	@ (800912c <__malloc_unlock+0x8>)
 8009126:	f000 bdef 	b.w	8009d08 <__retarget_lock_release_recursive>
 800912a:	bf00      	nop
 800912c:	20002144 	.word	0x20002144

08009130 <__cvt>:
 8009130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	ec57 6b10 	vmov	r6, r7, d0
 8009138:	2f00      	cmp	r7, #0
 800913a:	460c      	mov	r4, r1
 800913c:	4619      	mov	r1, r3
 800913e:	463b      	mov	r3, r7
 8009140:	bfbb      	ittet	lt
 8009142:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009146:	461f      	movlt	r7, r3
 8009148:	2300      	movge	r3, #0
 800914a:	232d      	movlt	r3, #45	@ 0x2d
 800914c:	700b      	strb	r3, [r1, #0]
 800914e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009150:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009154:	4691      	mov	r9, r2
 8009156:	f023 0820 	bic.w	r8, r3, #32
 800915a:	bfbc      	itt	lt
 800915c:	4632      	movlt	r2, r6
 800915e:	4616      	movlt	r6, r2
 8009160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009164:	d005      	beq.n	8009172 <__cvt+0x42>
 8009166:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800916a:	d100      	bne.n	800916e <__cvt+0x3e>
 800916c:	3401      	adds	r4, #1
 800916e:	2102      	movs	r1, #2
 8009170:	e000      	b.n	8009174 <__cvt+0x44>
 8009172:	2103      	movs	r1, #3
 8009174:	ab03      	add	r3, sp, #12
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	ab02      	add	r3, sp, #8
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	ec47 6b10 	vmov	d0, r6, r7
 8009180:	4653      	mov	r3, sl
 8009182:	4622      	mov	r2, r4
 8009184:	f000 fe58 	bl	8009e38 <_dtoa_r>
 8009188:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800918c:	4605      	mov	r5, r0
 800918e:	d119      	bne.n	80091c4 <__cvt+0x94>
 8009190:	f019 0f01 	tst.w	r9, #1
 8009194:	d00e      	beq.n	80091b4 <__cvt+0x84>
 8009196:	eb00 0904 	add.w	r9, r0, r4
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	4630      	mov	r0, r6
 80091a0:	4639      	mov	r1, r7
 80091a2:	f7f7 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 80091a6:	b108      	cbz	r0, 80091ac <__cvt+0x7c>
 80091a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80091ac:	2230      	movs	r2, #48	@ 0x30
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	454b      	cmp	r3, r9
 80091b2:	d31e      	bcc.n	80091f2 <__cvt+0xc2>
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091b8:	1b5b      	subs	r3, r3, r5
 80091ba:	4628      	mov	r0, r5
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	b004      	add	sp, #16
 80091c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091c8:	eb00 0904 	add.w	r9, r0, r4
 80091cc:	d1e5      	bne.n	800919a <__cvt+0x6a>
 80091ce:	7803      	ldrb	r3, [r0, #0]
 80091d0:	2b30      	cmp	r3, #48	@ 0x30
 80091d2:	d10a      	bne.n	80091ea <__cvt+0xba>
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80091e0:	b918      	cbnz	r0, 80091ea <__cvt+0xba>
 80091e2:	f1c4 0401 	rsb	r4, r4, #1
 80091e6:	f8ca 4000 	str.w	r4, [sl]
 80091ea:	f8da 3000 	ldr.w	r3, [sl]
 80091ee:	4499      	add	r9, r3
 80091f0:	e7d3      	b.n	800919a <__cvt+0x6a>
 80091f2:	1c59      	adds	r1, r3, #1
 80091f4:	9103      	str	r1, [sp, #12]
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e7d9      	b.n	80091ae <__cvt+0x7e>

080091fa <__exponent>:
 80091fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091fc:	2900      	cmp	r1, #0
 80091fe:	bfba      	itte	lt
 8009200:	4249      	neglt	r1, r1
 8009202:	232d      	movlt	r3, #45	@ 0x2d
 8009204:	232b      	movge	r3, #43	@ 0x2b
 8009206:	2909      	cmp	r1, #9
 8009208:	7002      	strb	r2, [r0, #0]
 800920a:	7043      	strb	r3, [r0, #1]
 800920c:	dd29      	ble.n	8009262 <__exponent+0x68>
 800920e:	f10d 0307 	add.w	r3, sp, #7
 8009212:	461d      	mov	r5, r3
 8009214:	270a      	movs	r7, #10
 8009216:	461a      	mov	r2, r3
 8009218:	fbb1 f6f7 	udiv	r6, r1, r7
 800921c:	fb07 1416 	mls	r4, r7, r6, r1
 8009220:	3430      	adds	r4, #48	@ 0x30
 8009222:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009226:	460c      	mov	r4, r1
 8009228:	2c63      	cmp	r4, #99	@ 0x63
 800922a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800922e:	4631      	mov	r1, r6
 8009230:	dcf1      	bgt.n	8009216 <__exponent+0x1c>
 8009232:	3130      	adds	r1, #48	@ 0x30
 8009234:	1e94      	subs	r4, r2, #2
 8009236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800923a:	1c41      	adds	r1, r0, #1
 800923c:	4623      	mov	r3, r4
 800923e:	42ab      	cmp	r3, r5
 8009240:	d30a      	bcc.n	8009258 <__exponent+0x5e>
 8009242:	f10d 0309 	add.w	r3, sp, #9
 8009246:	1a9b      	subs	r3, r3, r2
 8009248:	42ac      	cmp	r4, r5
 800924a:	bf88      	it	hi
 800924c:	2300      	movhi	r3, #0
 800924e:	3302      	adds	r3, #2
 8009250:	4403      	add	r3, r0
 8009252:	1a18      	subs	r0, r3, r0
 8009254:	b003      	add	sp, #12
 8009256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009258:	f813 6b01 	ldrb.w	r6, [r3], #1
 800925c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009260:	e7ed      	b.n	800923e <__exponent+0x44>
 8009262:	2330      	movs	r3, #48	@ 0x30
 8009264:	3130      	adds	r1, #48	@ 0x30
 8009266:	7083      	strb	r3, [r0, #2]
 8009268:	70c1      	strb	r1, [r0, #3]
 800926a:	1d03      	adds	r3, r0, #4
 800926c:	e7f1      	b.n	8009252 <__exponent+0x58>
	...

08009270 <_printf_float>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	b08d      	sub	sp, #52	@ 0x34
 8009276:	460c      	mov	r4, r1
 8009278:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800927c:	4616      	mov	r6, r2
 800927e:	461f      	mov	r7, r3
 8009280:	4605      	mov	r5, r0
 8009282:	f000 fcbb 	bl	8009bfc <_localeconv_r>
 8009286:	6803      	ldr	r3, [r0, #0]
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	4618      	mov	r0, r3
 800928c:	f7f6 fff8 	bl	8000280 <strlen>
 8009290:	2300      	movs	r3, #0
 8009292:	930a      	str	r3, [sp, #40]	@ 0x28
 8009294:	f8d8 3000 	ldr.w	r3, [r8]
 8009298:	9005      	str	r0, [sp, #20]
 800929a:	3307      	adds	r3, #7
 800929c:	f023 0307 	bic.w	r3, r3, #7
 80092a0:	f103 0208 	add.w	r2, r3, #8
 80092a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80092a8:	f8d4 b000 	ldr.w	fp, [r4]
 80092ac:	f8c8 2000 	str.w	r2, [r8]
 80092b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80092b8:	9307      	str	r3, [sp, #28]
 80092ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80092be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092c6:	4b9c      	ldr	r3, [pc, #624]	@ (8009538 <_printf_float+0x2c8>)
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092cc:	f7f7 fc36 	bl	8000b3c <__aeabi_dcmpun>
 80092d0:	bb70      	cbnz	r0, 8009330 <_printf_float+0xc0>
 80092d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092d6:	4b98      	ldr	r3, [pc, #608]	@ (8009538 <_printf_float+0x2c8>)
 80092d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092dc:	f7f7 fc10 	bl	8000b00 <__aeabi_dcmple>
 80092e0:	bb30      	cbnz	r0, 8009330 <_printf_float+0xc0>
 80092e2:	2200      	movs	r2, #0
 80092e4:	2300      	movs	r3, #0
 80092e6:	4640      	mov	r0, r8
 80092e8:	4649      	mov	r1, r9
 80092ea:	f7f7 fbff 	bl	8000aec <__aeabi_dcmplt>
 80092ee:	b110      	cbz	r0, 80092f6 <_printf_float+0x86>
 80092f0:	232d      	movs	r3, #45	@ 0x2d
 80092f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092f6:	4a91      	ldr	r2, [pc, #580]	@ (800953c <_printf_float+0x2cc>)
 80092f8:	4b91      	ldr	r3, [pc, #580]	@ (8009540 <_printf_float+0x2d0>)
 80092fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80092fe:	bf94      	ite	ls
 8009300:	4690      	movls	r8, r2
 8009302:	4698      	movhi	r8, r3
 8009304:	2303      	movs	r3, #3
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	f02b 0304 	bic.w	r3, fp, #4
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	f04f 0900 	mov.w	r9, #0
 8009312:	9700      	str	r7, [sp, #0]
 8009314:	4633      	mov	r3, r6
 8009316:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009318:	4621      	mov	r1, r4
 800931a:	4628      	mov	r0, r5
 800931c:	f000 f9d2 	bl	80096c4 <_printf_common>
 8009320:	3001      	adds	r0, #1
 8009322:	f040 808d 	bne.w	8009440 <_printf_float+0x1d0>
 8009326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800932a:	b00d      	add	sp, #52	@ 0x34
 800932c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	4640      	mov	r0, r8
 8009336:	4649      	mov	r1, r9
 8009338:	f7f7 fc00 	bl	8000b3c <__aeabi_dcmpun>
 800933c:	b140      	cbz	r0, 8009350 <_printf_float+0xe0>
 800933e:	464b      	mov	r3, r9
 8009340:	2b00      	cmp	r3, #0
 8009342:	bfbc      	itt	lt
 8009344:	232d      	movlt	r3, #45	@ 0x2d
 8009346:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800934a:	4a7e      	ldr	r2, [pc, #504]	@ (8009544 <_printf_float+0x2d4>)
 800934c:	4b7e      	ldr	r3, [pc, #504]	@ (8009548 <_printf_float+0x2d8>)
 800934e:	e7d4      	b.n	80092fa <_printf_float+0x8a>
 8009350:	6863      	ldr	r3, [r4, #4]
 8009352:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009356:	9206      	str	r2, [sp, #24]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	d13b      	bne.n	80093d4 <_printf_float+0x164>
 800935c:	2306      	movs	r3, #6
 800935e:	6063      	str	r3, [r4, #4]
 8009360:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009364:	2300      	movs	r3, #0
 8009366:	6022      	str	r2, [r4, #0]
 8009368:	9303      	str	r3, [sp, #12]
 800936a:	ab0a      	add	r3, sp, #40	@ 0x28
 800936c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009370:	ab09      	add	r3, sp, #36	@ 0x24
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	6861      	ldr	r1, [r4, #4]
 8009376:	ec49 8b10 	vmov	d0, r8, r9
 800937a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800937e:	4628      	mov	r0, r5
 8009380:	f7ff fed6 	bl	8009130 <__cvt>
 8009384:	9b06      	ldr	r3, [sp, #24]
 8009386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009388:	2b47      	cmp	r3, #71	@ 0x47
 800938a:	4680      	mov	r8, r0
 800938c:	d129      	bne.n	80093e2 <_printf_float+0x172>
 800938e:	1cc8      	adds	r0, r1, #3
 8009390:	db02      	blt.n	8009398 <_printf_float+0x128>
 8009392:	6863      	ldr	r3, [r4, #4]
 8009394:	4299      	cmp	r1, r3
 8009396:	dd41      	ble.n	800941c <_printf_float+0x1ac>
 8009398:	f1aa 0a02 	sub.w	sl, sl, #2
 800939c:	fa5f fa8a 	uxtb.w	sl, sl
 80093a0:	3901      	subs	r1, #1
 80093a2:	4652      	mov	r2, sl
 80093a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80093a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80093aa:	f7ff ff26 	bl	80091fa <__exponent>
 80093ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093b0:	1813      	adds	r3, r2, r0
 80093b2:	2a01      	cmp	r2, #1
 80093b4:	4681      	mov	r9, r0
 80093b6:	6123      	str	r3, [r4, #16]
 80093b8:	dc02      	bgt.n	80093c0 <_printf_float+0x150>
 80093ba:	6822      	ldr	r2, [r4, #0]
 80093bc:	07d2      	lsls	r2, r2, #31
 80093be:	d501      	bpl.n	80093c4 <_printf_float+0x154>
 80093c0:	3301      	adds	r3, #1
 80093c2:	6123      	str	r3, [r4, #16]
 80093c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0a2      	beq.n	8009312 <_printf_float+0xa2>
 80093cc:	232d      	movs	r3, #45	@ 0x2d
 80093ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093d2:	e79e      	b.n	8009312 <_printf_float+0xa2>
 80093d4:	9a06      	ldr	r2, [sp, #24]
 80093d6:	2a47      	cmp	r2, #71	@ 0x47
 80093d8:	d1c2      	bne.n	8009360 <_printf_float+0xf0>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1c0      	bne.n	8009360 <_printf_float+0xf0>
 80093de:	2301      	movs	r3, #1
 80093e0:	e7bd      	b.n	800935e <_printf_float+0xee>
 80093e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093e6:	d9db      	bls.n	80093a0 <_printf_float+0x130>
 80093e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80093ec:	d118      	bne.n	8009420 <_printf_float+0x1b0>
 80093ee:	2900      	cmp	r1, #0
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	dd0b      	ble.n	800940c <_printf_float+0x19c>
 80093f4:	6121      	str	r1, [r4, #16]
 80093f6:	b913      	cbnz	r3, 80093fe <_printf_float+0x18e>
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	07d0      	lsls	r0, r2, #31
 80093fc:	d502      	bpl.n	8009404 <_printf_float+0x194>
 80093fe:	3301      	adds	r3, #1
 8009400:	440b      	add	r3, r1
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009406:	f04f 0900 	mov.w	r9, #0
 800940a:	e7db      	b.n	80093c4 <_printf_float+0x154>
 800940c:	b913      	cbnz	r3, 8009414 <_printf_float+0x1a4>
 800940e:	6822      	ldr	r2, [r4, #0]
 8009410:	07d2      	lsls	r2, r2, #31
 8009412:	d501      	bpl.n	8009418 <_printf_float+0x1a8>
 8009414:	3302      	adds	r3, #2
 8009416:	e7f4      	b.n	8009402 <_printf_float+0x192>
 8009418:	2301      	movs	r3, #1
 800941a:	e7f2      	b.n	8009402 <_printf_float+0x192>
 800941c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009422:	4299      	cmp	r1, r3
 8009424:	db05      	blt.n	8009432 <_printf_float+0x1c2>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	6121      	str	r1, [r4, #16]
 800942a:	07d8      	lsls	r0, r3, #31
 800942c:	d5ea      	bpl.n	8009404 <_printf_float+0x194>
 800942e:	1c4b      	adds	r3, r1, #1
 8009430:	e7e7      	b.n	8009402 <_printf_float+0x192>
 8009432:	2900      	cmp	r1, #0
 8009434:	bfd4      	ite	le
 8009436:	f1c1 0202 	rsble	r2, r1, #2
 800943a:	2201      	movgt	r2, #1
 800943c:	4413      	add	r3, r2
 800943e:	e7e0      	b.n	8009402 <_printf_float+0x192>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	055a      	lsls	r2, r3, #21
 8009444:	d407      	bmi.n	8009456 <_printf_float+0x1e6>
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	4642      	mov	r2, r8
 800944a:	4631      	mov	r1, r6
 800944c:	4628      	mov	r0, r5
 800944e:	47b8      	blx	r7
 8009450:	3001      	adds	r0, #1
 8009452:	d12b      	bne.n	80094ac <_printf_float+0x23c>
 8009454:	e767      	b.n	8009326 <_printf_float+0xb6>
 8009456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800945a:	f240 80dd 	bls.w	8009618 <_printf_float+0x3a8>
 800945e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009462:	2200      	movs	r2, #0
 8009464:	2300      	movs	r3, #0
 8009466:	f7f7 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800946a:	2800      	cmp	r0, #0
 800946c:	d033      	beq.n	80094d6 <_printf_float+0x266>
 800946e:	4a37      	ldr	r2, [pc, #220]	@ (800954c <_printf_float+0x2dc>)
 8009470:	2301      	movs	r3, #1
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	f43f af54 	beq.w	8009326 <_printf_float+0xb6>
 800947e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009482:	4543      	cmp	r3, r8
 8009484:	db02      	blt.n	800948c <_printf_float+0x21c>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	07d8      	lsls	r0, r3, #31
 800948a:	d50f      	bpl.n	80094ac <_printf_float+0x23c>
 800948c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f af45 	beq.w	8009326 <_printf_float+0xb6>
 800949c:	f04f 0900 	mov.w	r9, #0
 80094a0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80094a4:	f104 0a1a 	add.w	sl, r4, #26
 80094a8:	45c8      	cmp	r8, r9
 80094aa:	dc09      	bgt.n	80094c0 <_printf_float+0x250>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	079b      	lsls	r3, r3, #30
 80094b0:	f100 8103 	bmi.w	80096ba <_printf_float+0x44a>
 80094b4:	68e0      	ldr	r0, [r4, #12]
 80094b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094b8:	4298      	cmp	r0, r3
 80094ba:	bfb8      	it	lt
 80094bc:	4618      	movlt	r0, r3
 80094be:	e734      	b.n	800932a <_printf_float+0xba>
 80094c0:	2301      	movs	r3, #1
 80094c2:	4652      	mov	r2, sl
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	f43f af2b 	beq.w	8009326 <_printf_float+0xb6>
 80094d0:	f109 0901 	add.w	r9, r9, #1
 80094d4:	e7e8      	b.n	80094a8 <_printf_float+0x238>
 80094d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc39      	bgt.n	8009550 <_printf_float+0x2e0>
 80094dc:	4a1b      	ldr	r2, [pc, #108]	@ (800954c <_printf_float+0x2dc>)
 80094de:	2301      	movs	r3, #1
 80094e0:	4631      	mov	r1, r6
 80094e2:	4628      	mov	r0, r5
 80094e4:	47b8      	blx	r7
 80094e6:	3001      	adds	r0, #1
 80094e8:	f43f af1d 	beq.w	8009326 <_printf_float+0xb6>
 80094ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80094f0:	ea59 0303 	orrs.w	r3, r9, r3
 80094f4:	d102      	bne.n	80094fc <_printf_float+0x28c>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	07d9      	lsls	r1, r3, #31
 80094fa:	d5d7      	bpl.n	80094ac <_printf_float+0x23c>
 80094fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	f43f af0d 	beq.w	8009326 <_printf_float+0xb6>
 800950c:	f04f 0a00 	mov.w	sl, #0
 8009510:	f104 0b1a 	add.w	fp, r4, #26
 8009514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009516:	425b      	negs	r3, r3
 8009518:	4553      	cmp	r3, sl
 800951a:	dc01      	bgt.n	8009520 <_printf_float+0x2b0>
 800951c:	464b      	mov	r3, r9
 800951e:	e793      	b.n	8009448 <_printf_float+0x1d8>
 8009520:	2301      	movs	r3, #1
 8009522:	465a      	mov	r2, fp
 8009524:	4631      	mov	r1, r6
 8009526:	4628      	mov	r0, r5
 8009528:	47b8      	blx	r7
 800952a:	3001      	adds	r0, #1
 800952c:	f43f aefb 	beq.w	8009326 <_printf_float+0xb6>
 8009530:	f10a 0a01 	add.w	sl, sl, #1
 8009534:	e7ee      	b.n	8009514 <_printf_float+0x2a4>
 8009536:	bf00      	nop
 8009538:	7fefffff 	.word	0x7fefffff
 800953c:	0800baa8 	.word	0x0800baa8
 8009540:	0800baac 	.word	0x0800baac
 8009544:	0800bab0 	.word	0x0800bab0
 8009548:	0800bab4 	.word	0x0800bab4
 800954c:	0800bab8 	.word	0x0800bab8
 8009550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009552:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009556:	4553      	cmp	r3, sl
 8009558:	bfa8      	it	ge
 800955a:	4653      	movge	r3, sl
 800955c:	2b00      	cmp	r3, #0
 800955e:	4699      	mov	r9, r3
 8009560:	dc36      	bgt.n	80095d0 <_printf_float+0x360>
 8009562:	f04f 0b00 	mov.w	fp, #0
 8009566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800956a:	f104 021a 	add.w	r2, r4, #26
 800956e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009570:	9306      	str	r3, [sp, #24]
 8009572:	eba3 0309 	sub.w	r3, r3, r9
 8009576:	455b      	cmp	r3, fp
 8009578:	dc31      	bgt.n	80095de <_printf_float+0x36e>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	459a      	cmp	sl, r3
 800957e:	dc3a      	bgt.n	80095f6 <_printf_float+0x386>
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	07da      	lsls	r2, r3, #31
 8009584:	d437      	bmi.n	80095f6 <_printf_float+0x386>
 8009586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009588:	ebaa 0903 	sub.w	r9, sl, r3
 800958c:	9b06      	ldr	r3, [sp, #24]
 800958e:	ebaa 0303 	sub.w	r3, sl, r3
 8009592:	4599      	cmp	r9, r3
 8009594:	bfa8      	it	ge
 8009596:	4699      	movge	r9, r3
 8009598:	f1b9 0f00 	cmp.w	r9, #0
 800959c:	dc33      	bgt.n	8009606 <_printf_float+0x396>
 800959e:	f04f 0800 	mov.w	r8, #0
 80095a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095a6:	f104 0b1a 	add.w	fp, r4, #26
 80095aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ac:	ebaa 0303 	sub.w	r3, sl, r3
 80095b0:	eba3 0309 	sub.w	r3, r3, r9
 80095b4:	4543      	cmp	r3, r8
 80095b6:	f77f af79 	ble.w	80094ac <_printf_float+0x23c>
 80095ba:	2301      	movs	r3, #1
 80095bc:	465a      	mov	r2, fp
 80095be:	4631      	mov	r1, r6
 80095c0:	4628      	mov	r0, r5
 80095c2:	47b8      	blx	r7
 80095c4:	3001      	adds	r0, #1
 80095c6:	f43f aeae 	beq.w	8009326 <_printf_float+0xb6>
 80095ca:	f108 0801 	add.w	r8, r8, #1
 80095ce:	e7ec      	b.n	80095aa <_printf_float+0x33a>
 80095d0:	4642      	mov	r2, r8
 80095d2:	4631      	mov	r1, r6
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b8      	blx	r7
 80095d8:	3001      	adds	r0, #1
 80095da:	d1c2      	bne.n	8009562 <_printf_float+0x2f2>
 80095dc:	e6a3      	b.n	8009326 <_printf_float+0xb6>
 80095de:	2301      	movs	r3, #1
 80095e0:	4631      	mov	r1, r6
 80095e2:	4628      	mov	r0, r5
 80095e4:	9206      	str	r2, [sp, #24]
 80095e6:	47b8      	blx	r7
 80095e8:	3001      	adds	r0, #1
 80095ea:	f43f ae9c 	beq.w	8009326 <_printf_float+0xb6>
 80095ee:	9a06      	ldr	r2, [sp, #24]
 80095f0:	f10b 0b01 	add.w	fp, fp, #1
 80095f4:	e7bb      	b.n	800956e <_printf_float+0x2fe>
 80095f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	d1c0      	bne.n	8009586 <_printf_float+0x316>
 8009604:	e68f      	b.n	8009326 <_printf_float+0xb6>
 8009606:	9a06      	ldr	r2, [sp, #24]
 8009608:	464b      	mov	r3, r9
 800960a:	4442      	add	r2, r8
 800960c:	4631      	mov	r1, r6
 800960e:	4628      	mov	r0, r5
 8009610:	47b8      	blx	r7
 8009612:	3001      	adds	r0, #1
 8009614:	d1c3      	bne.n	800959e <_printf_float+0x32e>
 8009616:	e686      	b.n	8009326 <_printf_float+0xb6>
 8009618:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800961c:	f1ba 0f01 	cmp.w	sl, #1
 8009620:	dc01      	bgt.n	8009626 <_printf_float+0x3b6>
 8009622:	07db      	lsls	r3, r3, #31
 8009624:	d536      	bpl.n	8009694 <_printf_float+0x424>
 8009626:	2301      	movs	r3, #1
 8009628:	4642      	mov	r2, r8
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	f43f ae78 	beq.w	8009326 <_printf_float+0xb6>
 8009636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	f43f ae70 	beq.w	8009326 <_printf_float+0xb6>
 8009646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800964a:	2200      	movs	r2, #0
 800964c:	2300      	movs	r3, #0
 800964e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009652:	f7f7 fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8009656:	b9c0      	cbnz	r0, 800968a <_printf_float+0x41a>
 8009658:	4653      	mov	r3, sl
 800965a:	f108 0201 	add.w	r2, r8, #1
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	d10c      	bne.n	8009682 <_printf_float+0x412>
 8009668:	e65d      	b.n	8009326 <_printf_float+0xb6>
 800966a:	2301      	movs	r3, #1
 800966c:	465a      	mov	r2, fp
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f ae56 	beq.w	8009326 <_printf_float+0xb6>
 800967a:	f108 0801 	add.w	r8, r8, #1
 800967e:	45d0      	cmp	r8, sl
 8009680:	dbf3      	blt.n	800966a <_printf_float+0x3fa>
 8009682:	464b      	mov	r3, r9
 8009684:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009688:	e6df      	b.n	800944a <_printf_float+0x1da>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 0b1a 	add.w	fp, r4, #26
 8009692:	e7f4      	b.n	800967e <_printf_float+0x40e>
 8009694:	2301      	movs	r3, #1
 8009696:	4642      	mov	r2, r8
 8009698:	e7e1      	b.n	800965e <_printf_float+0x3ee>
 800969a:	2301      	movs	r3, #1
 800969c:	464a      	mov	r2, r9
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	f43f ae3e 	beq.w	8009326 <_printf_float+0xb6>
 80096aa:	f108 0801 	add.w	r8, r8, #1
 80096ae:	68e3      	ldr	r3, [r4, #12]
 80096b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096b2:	1a5b      	subs	r3, r3, r1
 80096b4:	4543      	cmp	r3, r8
 80096b6:	dcf0      	bgt.n	800969a <_printf_float+0x42a>
 80096b8:	e6fc      	b.n	80094b4 <_printf_float+0x244>
 80096ba:	f04f 0800 	mov.w	r8, #0
 80096be:	f104 0919 	add.w	r9, r4, #25
 80096c2:	e7f4      	b.n	80096ae <_printf_float+0x43e>

080096c4 <_printf_common>:
 80096c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	4616      	mov	r6, r2
 80096ca:	4698      	mov	r8, r3
 80096cc:	688a      	ldr	r2, [r1, #8]
 80096ce:	690b      	ldr	r3, [r1, #16]
 80096d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80096d4:	4293      	cmp	r3, r2
 80096d6:	bfb8      	it	lt
 80096d8:	4613      	movlt	r3, r2
 80096da:	6033      	str	r3, [r6, #0]
 80096dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80096e0:	4607      	mov	r7, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	b10a      	cbz	r2, 80096ea <_printf_common+0x26>
 80096e6:	3301      	adds	r3, #1
 80096e8:	6033      	str	r3, [r6, #0]
 80096ea:	6823      	ldr	r3, [r4, #0]
 80096ec:	0699      	lsls	r1, r3, #26
 80096ee:	bf42      	ittt	mi
 80096f0:	6833      	ldrmi	r3, [r6, #0]
 80096f2:	3302      	addmi	r3, #2
 80096f4:	6033      	strmi	r3, [r6, #0]
 80096f6:	6825      	ldr	r5, [r4, #0]
 80096f8:	f015 0506 	ands.w	r5, r5, #6
 80096fc:	d106      	bne.n	800970c <_printf_common+0x48>
 80096fe:	f104 0a19 	add.w	sl, r4, #25
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	6832      	ldr	r2, [r6, #0]
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	42ab      	cmp	r3, r5
 800970a:	dc26      	bgt.n	800975a <_printf_common+0x96>
 800970c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009710:	6822      	ldr	r2, [r4, #0]
 8009712:	3b00      	subs	r3, #0
 8009714:	bf18      	it	ne
 8009716:	2301      	movne	r3, #1
 8009718:	0692      	lsls	r2, r2, #26
 800971a:	d42b      	bmi.n	8009774 <_printf_common+0xb0>
 800971c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009720:	4641      	mov	r1, r8
 8009722:	4638      	mov	r0, r7
 8009724:	47c8      	blx	r9
 8009726:	3001      	adds	r0, #1
 8009728:	d01e      	beq.n	8009768 <_printf_common+0xa4>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	6922      	ldr	r2, [r4, #16]
 800972e:	f003 0306 	and.w	r3, r3, #6
 8009732:	2b04      	cmp	r3, #4
 8009734:	bf02      	ittt	eq
 8009736:	68e5      	ldreq	r5, [r4, #12]
 8009738:	6833      	ldreq	r3, [r6, #0]
 800973a:	1aed      	subeq	r5, r5, r3
 800973c:	68a3      	ldr	r3, [r4, #8]
 800973e:	bf0c      	ite	eq
 8009740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009744:	2500      	movne	r5, #0
 8009746:	4293      	cmp	r3, r2
 8009748:	bfc4      	itt	gt
 800974a:	1a9b      	subgt	r3, r3, r2
 800974c:	18ed      	addgt	r5, r5, r3
 800974e:	2600      	movs	r6, #0
 8009750:	341a      	adds	r4, #26
 8009752:	42b5      	cmp	r5, r6
 8009754:	d11a      	bne.n	800978c <_printf_common+0xc8>
 8009756:	2000      	movs	r0, #0
 8009758:	e008      	b.n	800976c <_printf_common+0xa8>
 800975a:	2301      	movs	r3, #1
 800975c:	4652      	mov	r2, sl
 800975e:	4641      	mov	r1, r8
 8009760:	4638      	mov	r0, r7
 8009762:	47c8      	blx	r9
 8009764:	3001      	adds	r0, #1
 8009766:	d103      	bne.n	8009770 <_printf_common+0xac>
 8009768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800976c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009770:	3501      	adds	r5, #1
 8009772:	e7c6      	b.n	8009702 <_printf_common+0x3e>
 8009774:	18e1      	adds	r1, r4, r3
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	2030      	movs	r0, #48	@ 0x30
 800977a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800977e:	4422      	add	r2, r4
 8009780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009788:	3302      	adds	r3, #2
 800978a:	e7c7      	b.n	800971c <_printf_common+0x58>
 800978c:	2301      	movs	r3, #1
 800978e:	4622      	mov	r2, r4
 8009790:	4641      	mov	r1, r8
 8009792:	4638      	mov	r0, r7
 8009794:	47c8      	blx	r9
 8009796:	3001      	adds	r0, #1
 8009798:	d0e6      	beq.n	8009768 <_printf_common+0xa4>
 800979a:	3601      	adds	r6, #1
 800979c:	e7d9      	b.n	8009752 <_printf_common+0x8e>
	...

080097a0 <_printf_i>:
 80097a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	7e0f      	ldrb	r7, [r1, #24]
 80097a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097a8:	2f78      	cmp	r7, #120	@ 0x78
 80097aa:	4691      	mov	r9, r2
 80097ac:	4680      	mov	r8, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	469a      	mov	sl, r3
 80097b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097b6:	d807      	bhi.n	80097c8 <_printf_i+0x28>
 80097b8:	2f62      	cmp	r7, #98	@ 0x62
 80097ba:	d80a      	bhi.n	80097d2 <_printf_i+0x32>
 80097bc:	2f00      	cmp	r7, #0
 80097be:	f000 80d2 	beq.w	8009966 <_printf_i+0x1c6>
 80097c2:	2f58      	cmp	r7, #88	@ 0x58
 80097c4:	f000 80b9 	beq.w	800993a <_printf_i+0x19a>
 80097c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80097d0:	e03a      	b.n	8009848 <_printf_i+0xa8>
 80097d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80097d6:	2b15      	cmp	r3, #21
 80097d8:	d8f6      	bhi.n	80097c8 <_printf_i+0x28>
 80097da:	a101      	add	r1, pc, #4	@ (adr r1, 80097e0 <_printf_i+0x40>)
 80097dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097e0:	08009839 	.word	0x08009839
 80097e4:	0800984d 	.word	0x0800984d
 80097e8:	080097c9 	.word	0x080097c9
 80097ec:	080097c9 	.word	0x080097c9
 80097f0:	080097c9 	.word	0x080097c9
 80097f4:	080097c9 	.word	0x080097c9
 80097f8:	0800984d 	.word	0x0800984d
 80097fc:	080097c9 	.word	0x080097c9
 8009800:	080097c9 	.word	0x080097c9
 8009804:	080097c9 	.word	0x080097c9
 8009808:	080097c9 	.word	0x080097c9
 800980c:	0800994d 	.word	0x0800994d
 8009810:	08009877 	.word	0x08009877
 8009814:	08009907 	.word	0x08009907
 8009818:	080097c9 	.word	0x080097c9
 800981c:	080097c9 	.word	0x080097c9
 8009820:	0800996f 	.word	0x0800996f
 8009824:	080097c9 	.word	0x080097c9
 8009828:	08009877 	.word	0x08009877
 800982c:	080097c9 	.word	0x080097c9
 8009830:	080097c9 	.word	0x080097c9
 8009834:	0800990f 	.word	0x0800990f
 8009838:	6833      	ldr	r3, [r6, #0]
 800983a:	1d1a      	adds	r2, r3, #4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6032      	str	r2, [r6, #0]
 8009840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009848:	2301      	movs	r3, #1
 800984a:	e09d      	b.n	8009988 <_printf_i+0x1e8>
 800984c:	6833      	ldr	r3, [r6, #0]
 800984e:	6820      	ldr	r0, [r4, #0]
 8009850:	1d19      	adds	r1, r3, #4
 8009852:	6031      	str	r1, [r6, #0]
 8009854:	0606      	lsls	r6, r0, #24
 8009856:	d501      	bpl.n	800985c <_printf_i+0xbc>
 8009858:	681d      	ldr	r5, [r3, #0]
 800985a:	e003      	b.n	8009864 <_printf_i+0xc4>
 800985c:	0645      	lsls	r5, r0, #25
 800985e:	d5fb      	bpl.n	8009858 <_printf_i+0xb8>
 8009860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009864:	2d00      	cmp	r5, #0
 8009866:	da03      	bge.n	8009870 <_printf_i+0xd0>
 8009868:	232d      	movs	r3, #45	@ 0x2d
 800986a:	426d      	negs	r5, r5
 800986c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009870:	4859      	ldr	r0, [pc, #356]	@ (80099d8 <_printf_i+0x238>)
 8009872:	230a      	movs	r3, #10
 8009874:	e011      	b.n	800989a <_printf_i+0xfa>
 8009876:	6821      	ldr	r1, [r4, #0]
 8009878:	6833      	ldr	r3, [r6, #0]
 800987a:	0608      	lsls	r0, r1, #24
 800987c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009880:	d402      	bmi.n	8009888 <_printf_i+0xe8>
 8009882:	0649      	lsls	r1, r1, #25
 8009884:	bf48      	it	mi
 8009886:	b2ad      	uxthmi	r5, r5
 8009888:	2f6f      	cmp	r7, #111	@ 0x6f
 800988a:	4853      	ldr	r0, [pc, #332]	@ (80099d8 <_printf_i+0x238>)
 800988c:	6033      	str	r3, [r6, #0]
 800988e:	bf14      	ite	ne
 8009890:	230a      	movne	r3, #10
 8009892:	2308      	moveq	r3, #8
 8009894:	2100      	movs	r1, #0
 8009896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800989a:	6866      	ldr	r6, [r4, #4]
 800989c:	60a6      	str	r6, [r4, #8]
 800989e:	2e00      	cmp	r6, #0
 80098a0:	bfa2      	ittt	ge
 80098a2:	6821      	ldrge	r1, [r4, #0]
 80098a4:	f021 0104 	bicge.w	r1, r1, #4
 80098a8:	6021      	strge	r1, [r4, #0]
 80098aa:	b90d      	cbnz	r5, 80098b0 <_printf_i+0x110>
 80098ac:	2e00      	cmp	r6, #0
 80098ae:	d04b      	beq.n	8009948 <_printf_i+0x1a8>
 80098b0:	4616      	mov	r6, r2
 80098b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80098b6:	fb03 5711 	mls	r7, r3, r1, r5
 80098ba:	5dc7      	ldrb	r7, [r0, r7]
 80098bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098c0:	462f      	mov	r7, r5
 80098c2:	42bb      	cmp	r3, r7
 80098c4:	460d      	mov	r5, r1
 80098c6:	d9f4      	bls.n	80098b2 <_printf_i+0x112>
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d10b      	bne.n	80098e4 <_printf_i+0x144>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	07df      	lsls	r7, r3, #31
 80098d0:	d508      	bpl.n	80098e4 <_printf_i+0x144>
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	6861      	ldr	r1, [r4, #4]
 80098d6:	4299      	cmp	r1, r3
 80098d8:	bfde      	ittt	le
 80098da:	2330      	movle	r3, #48	@ 0x30
 80098dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80098e4:	1b92      	subs	r2, r2, r6
 80098e6:	6122      	str	r2, [r4, #16]
 80098e8:	f8cd a000 	str.w	sl, [sp]
 80098ec:	464b      	mov	r3, r9
 80098ee:	aa03      	add	r2, sp, #12
 80098f0:	4621      	mov	r1, r4
 80098f2:	4640      	mov	r0, r8
 80098f4:	f7ff fee6 	bl	80096c4 <_printf_common>
 80098f8:	3001      	adds	r0, #1
 80098fa:	d14a      	bne.n	8009992 <_printf_i+0x1f2>
 80098fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009900:	b004      	add	sp, #16
 8009902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	f043 0320 	orr.w	r3, r3, #32
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	4833      	ldr	r0, [pc, #204]	@ (80099dc <_printf_i+0x23c>)
 8009910:	2778      	movs	r7, #120	@ 0x78
 8009912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	6831      	ldr	r1, [r6, #0]
 800991a:	061f      	lsls	r7, r3, #24
 800991c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009920:	d402      	bmi.n	8009928 <_printf_i+0x188>
 8009922:	065f      	lsls	r7, r3, #25
 8009924:	bf48      	it	mi
 8009926:	b2ad      	uxthmi	r5, r5
 8009928:	6031      	str	r1, [r6, #0]
 800992a:	07d9      	lsls	r1, r3, #31
 800992c:	bf44      	itt	mi
 800992e:	f043 0320 	orrmi.w	r3, r3, #32
 8009932:	6023      	strmi	r3, [r4, #0]
 8009934:	b11d      	cbz	r5, 800993e <_printf_i+0x19e>
 8009936:	2310      	movs	r3, #16
 8009938:	e7ac      	b.n	8009894 <_printf_i+0xf4>
 800993a:	4827      	ldr	r0, [pc, #156]	@ (80099d8 <_printf_i+0x238>)
 800993c:	e7e9      	b.n	8009912 <_printf_i+0x172>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	f023 0320 	bic.w	r3, r3, #32
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	e7f6      	b.n	8009936 <_printf_i+0x196>
 8009948:	4616      	mov	r6, r2
 800994a:	e7bd      	b.n	80098c8 <_printf_i+0x128>
 800994c:	6833      	ldr	r3, [r6, #0]
 800994e:	6825      	ldr	r5, [r4, #0]
 8009950:	6961      	ldr	r1, [r4, #20]
 8009952:	1d18      	adds	r0, r3, #4
 8009954:	6030      	str	r0, [r6, #0]
 8009956:	062e      	lsls	r6, r5, #24
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	d501      	bpl.n	8009960 <_printf_i+0x1c0>
 800995c:	6019      	str	r1, [r3, #0]
 800995e:	e002      	b.n	8009966 <_printf_i+0x1c6>
 8009960:	0668      	lsls	r0, r5, #25
 8009962:	d5fb      	bpl.n	800995c <_printf_i+0x1bc>
 8009964:	8019      	strh	r1, [r3, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	4616      	mov	r6, r2
 800996c:	e7bc      	b.n	80098e8 <_printf_i+0x148>
 800996e:	6833      	ldr	r3, [r6, #0]
 8009970:	1d1a      	adds	r2, r3, #4
 8009972:	6032      	str	r2, [r6, #0]
 8009974:	681e      	ldr	r6, [r3, #0]
 8009976:	6862      	ldr	r2, [r4, #4]
 8009978:	2100      	movs	r1, #0
 800997a:	4630      	mov	r0, r6
 800997c:	f7f6 fc30 	bl	80001e0 <memchr>
 8009980:	b108      	cbz	r0, 8009986 <_printf_i+0x1e6>
 8009982:	1b80      	subs	r0, r0, r6
 8009984:	6060      	str	r0, [r4, #4]
 8009986:	6863      	ldr	r3, [r4, #4]
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	2300      	movs	r3, #0
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009990:	e7aa      	b.n	80098e8 <_printf_i+0x148>
 8009992:	6923      	ldr	r3, [r4, #16]
 8009994:	4632      	mov	r2, r6
 8009996:	4649      	mov	r1, r9
 8009998:	4640      	mov	r0, r8
 800999a:	47d0      	blx	sl
 800999c:	3001      	adds	r0, #1
 800999e:	d0ad      	beq.n	80098fc <_printf_i+0x15c>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	079b      	lsls	r3, r3, #30
 80099a4:	d413      	bmi.n	80099ce <_printf_i+0x22e>
 80099a6:	68e0      	ldr	r0, [r4, #12]
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	4298      	cmp	r0, r3
 80099ac:	bfb8      	it	lt
 80099ae:	4618      	movlt	r0, r3
 80099b0:	e7a6      	b.n	8009900 <_printf_i+0x160>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4632      	mov	r2, r6
 80099b6:	4649      	mov	r1, r9
 80099b8:	4640      	mov	r0, r8
 80099ba:	47d0      	blx	sl
 80099bc:	3001      	adds	r0, #1
 80099be:	d09d      	beq.n	80098fc <_printf_i+0x15c>
 80099c0:	3501      	adds	r5, #1
 80099c2:	68e3      	ldr	r3, [r4, #12]
 80099c4:	9903      	ldr	r1, [sp, #12]
 80099c6:	1a5b      	subs	r3, r3, r1
 80099c8:	42ab      	cmp	r3, r5
 80099ca:	dcf2      	bgt.n	80099b2 <_printf_i+0x212>
 80099cc:	e7eb      	b.n	80099a6 <_printf_i+0x206>
 80099ce:	2500      	movs	r5, #0
 80099d0:	f104 0619 	add.w	r6, r4, #25
 80099d4:	e7f5      	b.n	80099c2 <_printf_i+0x222>
 80099d6:	bf00      	nop
 80099d8:	0800baba 	.word	0x0800baba
 80099dc:	0800bacb 	.word	0x0800bacb

080099e0 <std>:
 80099e0:	2300      	movs	r3, #0
 80099e2:	b510      	push	{r4, lr}
 80099e4:	4604      	mov	r4, r0
 80099e6:	e9c0 3300 	strd	r3, r3, [r0]
 80099ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099ee:	6083      	str	r3, [r0, #8]
 80099f0:	8181      	strh	r1, [r0, #12]
 80099f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80099f4:	81c2      	strh	r2, [r0, #14]
 80099f6:	6183      	str	r3, [r0, #24]
 80099f8:	4619      	mov	r1, r3
 80099fa:	2208      	movs	r2, #8
 80099fc:	305c      	adds	r0, #92	@ 0x5c
 80099fe:	f000 f8f4 	bl	8009bea <memset>
 8009a02:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <std+0x58>)
 8009a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <std+0x5c>)
 8009a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a40 <std+0x60>)
 8009a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a44 <std+0x64>)
 8009a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a12:	4b0d      	ldr	r3, [pc, #52]	@ (8009a48 <std+0x68>)
 8009a14:	6224      	str	r4, [r4, #32]
 8009a16:	429c      	cmp	r4, r3
 8009a18:	d006      	beq.n	8009a28 <std+0x48>
 8009a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a1e:	4294      	cmp	r4, r2
 8009a20:	d002      	beq.n	8009a28 <std+0x48>
 8009a22:	33d0      	adds	r3, #208	@ 0xd0
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d105      	bne.n	8009a34 <std+0x54>
 8009a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f000 b968 	b.w	8009d04 <__retarget_lock_init_recursive>
 8009a34:	bd10      	pop	{r4, pc}
 8009a36:	bf00      	nop
 8009a38:	08009b65 	.word	0x08009b65
 8009a3c:	08009b87 	.word	0x08009b87
 8009a40:	08009bbf 	.word	0x08009bbf
 8009a44:	08009be3 	.word	0x08009be3
 8009a48:	20002004 	.word	0x20002004

08009a4c <stdio_exit_handler>:
 8009a4c:	4a02      	ldr	r2, [pc, #8]	@ (8009a58 <stdio_exit_handler+0xc>)
 8009a4e:	4903      	ldr	r1, [pc, #12]	@ (8009a5c <stdio_exit_handler+0x10>)
 8009a50:	4803      	ldr	r0, [pc, #12]	@ (8009a60 <stdio_exit_handler+0x14>)
 8009a52:	f000 b869 	b.w	8009b28 <_fwalk_sglue>
 8009a56:	bf00      	nop
 8009a58:	2000010c 	.word	0x2000010c
 8009a5c:	0800b261 	.word	0x0800b261
 8009a60:	2000011c 	.word	0x2000011c

08009a64 <cleanup_stdio>:
 8009a64:	6841      	ldr	r1, [r0, #4]
 8009a66:	4b0c      	ldr	r3, [pc, #48]	@ (8009a98 <cleanup_stdio+0x34>)
 8009a68:	4299      	cmp	r1, r3
 8009a6a:	b510      	push	{r4, lr}
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	d001      	beq.n	8009a74 <cleanup_stdio+0x10>
 8009a70:	f001 fbf6 	bl	800b260 <_fflush_r>
 8009a74:	68a1      	ldr	r1, [r4, #8]
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <cleanup_stdio+0x38>)
 8009a78:	4299      	cmp	r1, r3
 8009a7a:	d002      	beq.n	8009a82 <cleanup_stdio+0x1e>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f001 fbef 	bl	800b260 <_fflush_r>
 8009a82:	68e1      	ldr	r1, [r4, #12]
 8009a84:	4b06      	ldr	r3, [pc, #24]	@ (8009aa0 <cleanup_stdio+0x3c>)
 8009a86:	4299      	cmp	r1, r3
 8009a88:	d004      	beq.n	8009a94 <cleanup_stdio+0x30>
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a90:	f001 bbe6 	b.w	800b260 <_fflush_r>
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	bf00      	nop
 8009a98:	20002004 	.word	0x20002004
 8009a9c:	2000206c 	.word	0x2000206c
 8009aa0:	200020d4 	.word	0x200020d4

08009aa4 <global_stdio_init.part.0>:
 8009aa4:	b510      	push	{r4, lr}
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <global_stdio_init.part.0+0x30>)
 8009aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8009ad8 <global_stdio_init.part.0+0x34>)
 8009aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8009adc <global_stdio_init.part.0+0x38>)
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2104      	movs	r1, #4
 8009ab4:	f7ff ff94 	bl	80099e0 <std>
 8009ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009abc:	2201      	movs	r2, #1
 8009abe:	2109      	movs	r1, #9
 8009ac0:	f7ff ff8e 	bl	80099e0 <std>
 8009ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ac8:	2202      	movs	r2, #2
 8009aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ace:	2112      	movs	r1, #18
 8009ad0:	f7ff bf86 	b.w	80099e0 <std>
 8009ad4:	2000213c 	.word	0x2000213c
 8009ad8:	20002004 	.word	0x20002004
 8009adc:	08009a4d 	.word	0x08009a4d

08009ae0 <__sfp_lock_acquire>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	@ (8009ae8 <__sfp_lock_acquire+0x8>)
 8009ae2:	f000 b910 	b.w	8009d06 <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20002145 	.word	0x20002145

08009aec <__sfp_lock_release>:
 8009aec:	4801      	ldr	r0, [pc, #4]	@ (8009af4 <__sfp_lock_release+0x8>)
 8009aee:	f000 b90b 	b.w	8009d08 <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	20002145 	.word	0x20002145

08009af8 <__sinit>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	4604      	mov	r4, r0
 8009afc:	f7ff fff0 	bl	8009ae0 <__sfp_lock_acquire>
 8009b00:	6a23      	ldr	r3, [r4, #32]
 8009b02:	b11b      	cbz	r3, 8009b0c <__sinit+0x14>
 8009b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b08:	f7ff bff0 	b.w	8009aec <__sfp_lock_release>
 8009b0c:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <__sinit+0x28>)
 8009b0e:	6223      	str	r3, [r4, #32]
 8009b10:	4b04      	ldr	r3, [pc, #16]	@ (8009b24 <__sinit+0x2c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1f5      	bne.n	8009b04 <__sinit+0xc>
 8009b18:	f7ff ffc4 	bl	8009aa4 <global_stdio_init.part.0>
 8009b1c:	e7f2      	b.n	8009b04 <__sinit+0xc>
 8009b1e:	bf00      	nop
 8009b20:	08009a65 	.word	0x08009a65
 8009b24:	2000213c 	.word	0x2000213c

08009b28 <_fwalk_sglue>:
 8009b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	4688      	mov	r8, r1
 8009b30:	4614      	mov	r4, r2
 8009b32:	2600      	movs	r6, #0
 8009b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b38:	f1b9 0901 	subs.w	r9, r9, #1
 8009b3c:	d505      	bpl.n	8009b4a <_fwalk_sglue+0x22>
 8009b3e:	6824      	ldr	r4, [r4, #0]
 8009b40:	2c00      	cmp	r4, #0
 8009b42:	d1f7      	bne.n	8009b34 <_fwalk_sglue+0xc>
 8009b44:	4630      	mov	r0, r6
 8009b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4a:	89ab      	ldrh	r3, [r5, #12]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d907      	bls.n	8009b60 <_fwalk_sglue+0x38>
 8009b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b54:	3301      	adds	r3, #1
 8009b56:	d003      	beq.n	8009b60 <_fwalk_sglue+0x38>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	47c0      	blx	r8
 8009b5e:	4306      	orrs	r6, r0
 8009b60:	3568      	adds	r5, #104	@ 0x68
 8009b62:	e7e9      	b.n	8009b38 <_fwalk_sglue+0x10>

08009b64 <__sread>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	460c      	mov	r4, r1
 8009b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6c:	f000 f86c 	bl	8009c48 <_read_r>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	bfab      	itete	ge
 8009b74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b76:	89a3      	ldrhlt	r3, [r4, #12]
 8009b78:	181b      	addge	r3, r3, r0
 8009b7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b7e:	bfac      	ite	ge
 8009b80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b82:	81a3      	strhlt	r3, [r4, #12]
 8009b84:	bd10      	pop	{r4, pc}

08009b86 <__swrite>:
 8009b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b8a:	461f      	mov	r7, r3
 8009b8c:	898b      	ldrh	r3, [r1, #12]
 8009b8e:	05db      	lsls	r3, r3, #23
 8009b90:	4605      	mov	r5, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	4616      	mov	r6, r2
 8009b96:	d505      	bpl.n	8009ba4 <__swrite+0x1e>
 8009b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f000 f840 	bl	8009c24 <_lseek_r>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009baa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bba:	f000 b867 	b.w	8009c8c <_write_r>

08009bbe <__sseek>:
 8009bbe:	b510      	push	{r4, lr}
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc6:	f000 f82d 	bl	8009c24 <_lseek_r>
 8009bca:	1c43      	adds	r3, r0, #1
 8009bcc:	89a3      	ldrh	r3, [r4, #12]
 8009bce:	bf15      	itete	ne
 8009bd0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bd2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bd6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bda:	81a3      	strheq	r3, [r4, #12]
 8009bdc:	bf18      	it	ne
 8009bde:	81a3      	strhne	r3, [r4, #12]
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <__sclose>:
 8009be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009be6:	f000 b80d 	b.w	8009c04 <_close_r>

08009bea <memset>:
 8009bea:	4402      	add	r2, r0
 8009bec:	4603      	mov	r3, r0
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d100      	bne.n	8009bf4 <memset+0xa>
 8009bf2:	4770      	bx	lr
 8009bf4:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf8:	e7f9      	b.n	8009bee <memset+0x4>
	...

08009bfc <_localeconv_r>:
 8009bfc:	4800      	ldr	r0, [pc, #0]	@ (8009c00 <_localeconv_r+0x4>)
 8009bfe:	4770      	bx	lr
 8009c00:	20000258 	.word	0x20000258

08009c04 <_close_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4d06      	ldr	r5, [pc, #24]	@ (8009c20 <_close_r+0x1c>)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4604      	mov	r4, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	602b      	str	r3, [r5, #0]
 8009c10:	f7f8 f926 	bl	8001e60 <_close>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_close_r+0x1a>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_close_r+0x1a>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20002140 	.word	0x20002140

08009c24 <_lseek_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	@ (8009c44 <_lseek_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f8 f93b 	bl	8001eae <_lseek>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_lseek_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_lseek_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20002140 	.word	0x20002140

08009c48 <_read_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d07      	ldr	r5, [pc, #28]	@ (8009c68 <_read_r+0x20>)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	4608      	mov	r0, r1
 8009c50:	4611      	mov	r1, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	602a      	str	r2, [r5, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	f7f8 f8c9 	bl	8001dee <_read>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d102      	bne.n	8009c66 <_read_r+0x1e>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	b103      	cbz	r3, 8009c66 <_read_r+0x1e>
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	20002140 	.word	0x20002140

08009c6c <_sbrk_r>:
 8009c6c:	b538      	push	{r3, r4, r5, lr}
 8009c6e:	4d06      	ldr	r5, [pc, #24]	@ (8009c88 <_sbrk_r+0x1c>)
 8009c70:	2300      	movs	r3, #0
 8009c72:	4604      	mov	r4, r0
 8009c74:	4608      	mov	r0, r1
 8009c76:	602b      	str	r3, [r5, #0]
 8009c78:	f7f8 f926 	bl	8001ec8 <_sbrk>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_sbrk_r+0x1a>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_sbrk_r+0x1a>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20002140 	.word	0x20002140

08009c8c <_write_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d07      	ldr	r5, [pc, #28]	@ (8009cac <_write_r+0x20>)
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	602a      	str	r2, [r5, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	f7f8 f8c4 	bl	8001e28 <_write>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_write_r+0x1e>
 8009ca4:	682b      	ldr	r3, [r5, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_write_r+0x1e>
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	20002140 	.word	0x20002140

08009cb0 <__errno>:
 8009cb0:	4b01      	ldr	r3, [pc, #4]	@ (8009cb8 <__errno+0x8>)
 8009cb2:	6818      	ldr	r0, [r3, #0]
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	20000118 	.word	0x20000118

08009cbc <__libc_init_array>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8009cf4 <__libc_init_array+0x38>)
 8009cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8009cf8 <__libc_init_array+0x3c>)
 8009cc2:	1b64      	subs	r4, r4, r5
 8009cc4:	10a4      	asrs	r4, r4, #2
 8009cc6:	2600      	movs	r6, #0
 8009cc8:	42a6      	cmp	r6, r4
 8009cca:	d109      	bne.n	8009ce0 <__libc_init_array+0x24>
 8009ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8009cfc <__libc_init_array+0x40>)
 8009cce:	4c0c      	ldr	r4, [pc, #48]	@ (8009d00 <__libc_init_array+0x44>)
 8009cd0:	f001 fdf6 	bl	800b8c0 <_init>
 8009cd4:	1b64      	subs	r4, r4, r5
 8009cd6:	10a4      	asrs	r4, r4, #2
 8009cd8:	2600      	movs	r6, #0
 8009cda:	42a6      	cmp	r6, r4
 8009cdc:	d105      	bne.n	8009cea <__libc_init_array+0x2e>
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce4:	4798      	blx	r3
 8009ce6:	3601      	adds	r6, #1
 8009ce8:	e7ee      	b.n	8009cc8 <__libc_init_array+0xc>
 8009cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cee:	4798      	blx	r3
 8009cf0:	3601      	adds	r6, #1
 8009cf2:	e7f2      	b.n	8009cda <__libc_init_array+0x1e>
 8009cf4:	0800be20 	.word	0x0800be20
 8009cf8:	0800be20 	.word	0x0800be20
 8009cfc:	0800be20 	.word	0x0800be20
 8009d00:	0800be24 	.word	0x0800be24

08009d04 <__retarget_lock_init_recursive>:
 8009d04:	4770      	bx	lr

08009d06 <__retarget_lock_acquire_recursive>:
 8009d06:	4770      	bx	lr

08009d08 <__retarget_lock_release_recursive>:
 8009d08:	4770      	bx	lr

08009d0a <memcpy>:
 8009d0a:	440a      	add	r2, r1
 8009d0c:	4291      	cmp	r1, r2
 8009d0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009d12:	d100      	bne.n	8009d16 <memcpy+0xc>
 8009d14:	4770      	bx	lr
 8009d16:	b510      	push	{r4, lr}
 8009d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d20:	4291      	cmp	r1, r2
 8009d22:	d1f9      	bne.n	8009d18 <memcpy+0xe>
 8009d24:	bd10      	pop	{r4, pc}

08009d26 <quorem>:
 8009d26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	6903      	ldr	r3, [r0, #16]
 8009d2c:	690c      	ldr	r4, [r1, #16]
 8009d2e:	42a3      	cmp	r3, r4
 8009d30:	4607      	mov	r7, r0
 8009d32:	db7e      	blt.n	8009e32 <quorem+0x10c>
 8009d34:	3c01      	subs	r4, #1
 8009d36:	f101 0814 	add.w	r8, r1, #20
 8009d3a:	00a3      	lsls	r3, r4, #2
 8009d3c:	f100 0514 	add.w	r5, r0, #20
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d46:	9301      	str	r3, [sp, #4]
 8009d48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d50:	3301      	adds	r3, #1
 8009d52:	429a      	cmp	r2, r3
 8009d54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d58:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d5c:	d32e      	bcc.n	8009dbc <quorem+0x96>
 8009d5e:	f04f 0a00 	mov.w	sl, #0
 8009d62:	46c4      	mov	ip, r8
 8009d64:	46ae      	mov	lr, r5
 8009d66:	46d3      	mov	fp, sl
 8009d68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d6c:	b298      	uxth	r0, r3
 8009d6e:	fb06 a000 	mla	r0, r6, r0, sl
 8009d72:	0c02      	lsrs	r2, r0, #16
 8009d74:	0c1b      	lsrs	r3, r3, #16
 8009d76:	fb06 2303 	mla	r3, r6, r3, r2
 8009d7a:	f8de 2000 	ldr.w	r2, [lr]
 8009d7e:	b280      	uxth	r0, r0
 8009d80:	b292      	uxth	r2, r2
 8009d82:	1a12      	subs	r2, r2, r0
 8009d84:	445a      	add	r2, fp
 8009d86:	f8de 0000 	ldr.w	r0, [lr]
 8009d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d98:	b292      	uxth	r2, r2
 8009d9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d9e:	45e1      	cmp	r9, ip
 8009da0:	f84e 2b04 	str.w	r2, [lr], #4
 8009da4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009da8:	d2de      	bcs.n	8009d68 <quorem+0x42>
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	58eb      	ldr	r3, [r5, r3]
 8009dae:	b92b      	cbnz	r3, 8009dbc <quorem+0x96>
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	3b04      	subs	r3, #4
 8009db4:	429d      	cmp	r5, r3
 8009db6:	461a      	mov	r2, r3
 8009db8:	d32f      	bcc.n	8009e1a <quorem+0xf4>
 8009dba:	613c      	str	r4, [r7, #16]
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f001 f8c3 	bl	800af48 <__mcmp>
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	db25      	blt.n	8009e12 <quorem+0xec>
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f858 2b04 	ldr.w	r2, [r8], #4
 8009dce:	f8d1 c000 	ldr.w	ip, [r1]
 8009dd2:	fa1f fe82 	uxth.w	lr, r2
 8009dd6:	fa1f f38c 	uxth.w	r3, ip
 8009dda:	eba3 030e 	sub.w	r3, r3, lr
 8009dde:	4403      	add	r3, r0
 8009de0:	0c12      	lsrs	r2, r2, #16
 8009de2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009de6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009df0:	45c1      	cmp	r9, r8
 8009df2:	f841 3b04 	str.w	r3, [r1], #4
 8009df6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009dfa:	d2e6      	bcs.n	8009dca <quorem+0xa4>
 8009dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e04:	b922      	cbnz	r2, 8009e10 <quorem+0xea>
 8009e06:	3b04      	subs	r3, #4
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	d30b      	bcc.n	8009e26 <quorem+0x100>
 8009e0e:	613c      	str	r4, [r7, #16]
 8009e10:	3601      	adds	r6, #1
 8009e12:	4630      	mov	r0, r6
 8009e14:	b003      	add	sp, #12
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	6812      	ldr	r2, [r2, #0]
 8009e1c:	3b04      	subs	r3, #4
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	d1cb      	bne.n	8009dba <quorem+0x94>
 8009e22:	3c01      	subs	r4, #1
 8009e24:	e7c6      	b.n	8009db4 <quorem+0x8e>
 8009e26:	6812      	ldr	r2, [r2, #0]
 8009e28:	3b04      	subs	r3, #4
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	d1ef      	bne.n	8009e0e <quorem+0xe8>
 8009e2e:	3c01      	subs	r4, #1
 8009e30:	e7ea      	b.n	8009e08 <quorem+0xe2>
 8009e32:	2000      	movs	r0, #0
 8009e34:	e7ee      	b.n	8009e14 <quorem+0xee>
	...

08009e38 <_dtoa_r>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	69c7      	ldr	r7, [r0, #28]
 8009e3e:	b099      	sub	sp, #100	@ 0x64
 8009e40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009e44:	ec55 4b10 	vmov	r4, r5, d0
 8009e48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009e4a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009e4c:	4683      	mov	fp, r0
 8009e4e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e52:	b97f      	cbnz	r7, 8009e74 <_dtoa_r+0x3c>
 8009e54:	2010      	movs	r0, #16
 8009e56:	f7ff f8ad 	bl	8008fb4 <malloc>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009e60:	b920      	cbnz	r0, 8009e6c <_dtoa_r+0x34>
 8009e62:	4ba7      	ldr	r3, [pc, #668]	@ (800a100 <_dtoa_r+0x2c8>)
 8009e64:	21ef      	movs	r1, #239	@ 0xef
 8009e66:	48a7      	ldr	r0, [pc, #668]	@ (800a104 <_dtoa_r+0x2cc>)
 8009e68:	f001 fa22 	bl	800b2b0 <__assert_func>
 8009e6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009e70:	6007      	str	r7, [r0, #0]
 8009e72:	60c7      	str	r7, [r0, #12]
 8009e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e78:	6819      	ldr	r1, [r3, #0]
 8009e7a:	b159      	cbz	r1, 8009e94 <_dtoa_r+0x5c>
 8009e7c:	685a      	ldr	r2, [r3, #4]
 8009e7e:	604a      	str	r2, [r1, #4]
 8009e80:	2301      	movs	r3, #1
 8009e82:	4093      	lsls	r3, r2
 8009e84:	608b      	str	r3, [r1, #8]
 8009e86:	4658      	mov	r0, fp
 8009e88:	f000 fe24 	bl	800aad4 <_Bfree>
 8009e8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	1e2b      	subs	r3, r5, #0
 8009e96:	bfb9      	ittee	lt
 8009e98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e9c:	9303      	strlt	r3, [sp, #12]
 8009e9e:	2300      	movge	r3, #0
 8009ea0:	6033      	strge	r3, [r6, #0]
 8009ea2:	9f03      	ldr	r7, [sp, #12]
 8009ea4:	4b98      	ldr	r3, [pc, #608]	@ (800a108 <_dtoa_r+0x2d0>)
 8009ea6:	bfbc      	itt	lt
 8009ea8:	2201      	movlt	r2, #1
 8009eaa:	6032      	strlt	r2, [r6, #0]
 8009eac:	43bb      	bics	r3, r7
 8009eae:	d112      	bne.n	8009ed6 <_dtoa_r+0x9e>
 8009eb0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009eb2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009eb6:	6013      	str	r3, [r2, #0]
 8009eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ebc:	4323      	orrs	r3, r4
 8009ebe:	f000 854d 	beq.w	800a95c <_dtoa_r+0xb24>
 8009ec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ec4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a11c <_dtoa_r+0x2e4>
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 854f 	beq.w	800a96c <_dtoa_r+0xb34>
 8009ece:	f10a 0303 	add.w	r3, sl, #3
 8009ed2:	f000 bd49 	b.w	800a968 <_dtoa_r+0xb30>
 8009ed6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009eda:	2200      	movs	r2, #0
 8009edc:	ec51 0b17 	vmov	r0, r1, d7
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009ee6:	f7f6 fdf7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eea:	4680      	mov	r8, r0
 8009eec:	b158      	cbz	r0, 8009f06 <_dtoa_r+0xce>
 8009eee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ef6:	b113      	cbz	r3, 8009efe <_dtoa_r+0xc6>
 8009ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009efa:	4b84      	ldr	r3, [pc, #528]	@ (800a10c <_dtoa_r+0x2d4>)
 8009efc:	6013      	str	r3, [r2, #0]
 8009efe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a120 <_dtoa_r+0x2e8>
 8009f02:	f000 bd33 	b.w	800a96c <_dtoa_r+0xb34>
 8009f06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f0a:	aa16      	add	r2, sp, #88	@ 0x58
 8009f0c:	a917      	add	r1, sp, #92	@ 0x5c
 8009f0e:	4658      	mov	r0, fp
 8009f10:	f001 f8ca 	bl	800b0a8 <__d2b>
 8009f14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009f18:	4681      	mov	r9, r0
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	d077      	beq.n	800a00e <_dtoa_r+0x1d6>
 8009f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009f34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f38:	4619      	mov	r1, r3
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4b74      	ldr	r3, [pc, #464]	@ (800a110 <_dtoa_r+0x2d8>)
 8009f3e:	f7f6 f9ab 	bl	8000298 <__aeabi_dsub>
 8009f42:	a369      	add	r3, pc, #420	@ (adr r3, 800a0e8 <_dtoa_r+0x2b0>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f7f6 fb5e 	bl	8000608 <__aeabi_dmul>
 8009f4c:	a368      	add	r3, pc, #416	@ (adr r3, 800a0f0 <_dtoa_r+0x2b8>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7f6 f9a3 	bl	800029c <__adddf3>
 8009f56:	4604      	mov	r4, r0
 8009f58:	4630      	mov	r0, r6
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	f7f6 faea 	bl	8000534 <__aeabi_i2d>
 8009f60:	a365      	add	r3, pc, #404	@ (adr r3, 800a0f8 <_dtoa_r+0x2c0>)
 8009f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f66:	f7f6 fb4f 	bl	8000608 <__aeabi_dmul>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	4620      	mov	r0, r4
 8009f70:	4629      	mov	r1, r5
 8009f72:	f7f6 f993 	bl	800029c <__adddf3>
 8009f76:	4604      	mov	r4, r0
 8009f78:	460d      	mov	r5, r1
 8009f7a:	f7f6 fdf5 	bl	8000b68 <__aeabi_d2iz>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	4607      	mov	r7, r0
 8009f82:	2300      	movs	r3, #0
 8009f84:	4620      	mov	r0, r4
 8009f86:	4629      	mov	r1, r5
 8009f88:	f7f6 fdb0 	bl	8000aec <__aeabi_dcmplt>
 8009f8c:	b140      	cbz	r0, 8009fa0 <_dtoa_r+0x168>
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7f6 fad0 	bl	8000534 <__aeabi_i2d>
 8009f94:	4622      	mov	r2, r4
 8009f96:	462b      	mov	r3, r5
 8009f98:	f7f6 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f9c:	b900      	cbnz	r0, 8009fa0 <_dtoa_r+0x168>
 8009f9e:	3f01      	subs	r7, #1
 8009fa0:	2f16      	cmp	r7, #22
 8009fa2:	d851      	bhi.n	800a048 <_dtoa_r+0x210>
 8009fa4:	4b5b      	ldr	r3, [pc, #364]	@ (800a114 <_dtoa_r+0x2dc>)
 8009fa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fb2:	f7f6 fd9b 	bl	8000aec <__aeabi_dcmplt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d048      	beq.n	800a04c <_dtoa_r+0x214>
 8009fba:	3f01      	subs	r7, #1
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fc2:	1b9b      	subs	r3, r3, r6
 8009fc4:	1e5a      	subs	r2, r3, #1
 8009fc6:	bf44      	itt	mi
 8009fc8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009fcc:	2300      	movmi	r3, #0
 8009fce:	9208      	str	r2, [sp, #32]
 8009fd0:	bf54      	ite	pl
 8009fd2:	f04f 0800 	movpl.w	r8, #0
 8009fd6:	9308      	strmi	r3, [sp, #32]
 8009fd8:	2f00      	cmp	r7, #0
 8009fda:	db39      	blt.n	800a050 <_dtoa_r+0x218>
 8009fdc:	9b08      	ldr	r3, [sp, #32]
 8009fde:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009fe0:	443b      	add	r3, r7
 8009fe2:	9308      	str	r3, [sp, #32]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d864      	bhi.n	800a0b8 <_dtoa_r+0x280>
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	bfc4      	itt	gt
 8009ff2:	3b04      	subgt	r3, #4
 8009ff4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff8:	f1a3 0302 	sub.w	r3, r3, #2
 8009ffc:	bfcc      	ite	gt
 8009ffe:	2400      	movgt	r4, #0
 800a000:	2401      	movle	r4, #1
 800a002:	2b03      	cmp	r3, #3
 800a004:	d863      	bhi.n	800a0ce <_dtoa_r+0x296>
 800a006:	e8df f003 	tbb	[pc, r3]
 800a00a:	372a      	.short	0x372a
 800a00c:	5535      	.short	0x5535
 800a00e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a012:	441e      	add	r6, r3
 800a014:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a018:	2b20      	cmp	r3, #32
 800a01a:	bfc1      	itttt	gt
 800a01c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a020:	409f      	lslgt	r7, r3
 800a022:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a026:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a02a:	bfd6      	itet	le
 800a02c:	f1c3 0320 	rsble	r3, r3, #32
 800a030:	ea47 0003 	orrgt.w	r0, r7, r3
 800a034:	fa04 f003 	lslle.w	r0, r4, r3
 800a038:	f7f6 fa6c 	bl	8000514 <__aeabi_ui2d>
 800a03c:	2201      	movs	r2, #1
 800a03e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a042:	3e01      	subs	r6, #1
 800a044:	9214      	str	r2, [sp, #80]	@ 0x50
 800a046:	e777      	b.n	8009f38 <_dtoa_r+0x100>
 800a048:	2301      	movs	r3, #1
 800a04a:	e7b8      	b.n	8009fbe <_dtoa_r+0x186>
 800a04c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a04e:	e7b7      	b.n	8009fc0 <_dtoa_r+0x188>
 800a050:	427b      	negs	r3, r7
 800a052:	930a      	str	r3, [sp, #40]	@ 0x28
 800a054:	2300      	movs	r3, #0
 800a056:	eba8 0807 	sub.w	r8, r8, r7
 800a05a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a05c:	e7c4      	b.n	8009fe8 <_dtoa_r+0x1b0>
 800a05e:	2300      	movs	r3, #0
 800a060:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a064:	2b00      	cmp	r3, #0
 800a066:	dc35      	bgt.n	800a0d4 <_dtoa_r+0x29c>
 800a068:	2301      	movs	r3, #1
 800a06a:	9300      	str	r3, [sp, #0]
 800a06c:	9307      	str	r3, [sp, #28]
 800a06e:	461a      	mov	r2, r3
 800a070:	920e      	str	r2, [sp, #56]	@ 0x38
 800a072:	e00b      	b.n	800a08c <_dtoa_r+0x254>
 800a074:	2301      	movs	r3, #1
 800a076:	e7f3      	b.n	800a060 <_dtoa_r+0x228>
 800a078:	2300      	movs	r3, #0
 800a07a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a07c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a07e:	18fb      	adds	r3, r7, r3
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	3301      	adds	r3, #1
 800a084:	2b01      	cmp	r3, #1
 800a086:	9307      	str	r3, [sp, #28]
 800a088:	bfb8      	it	lt
 800a08a:	2301      	movlt	r3, #1
 800a08c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a090:	2100      	movs	r1, #0
 800a092:	2204      	movs	r2, #4
 800a094:	f102 0514 	add.w	r5, r2, #20
 800a098:	429d      	cmp	r5, r3
 800a09a:	d91f      	bls.n	800a0dc <_dtoa_r+0x2a4>
 800a09c:	6041      	str	r1, [r0, #4]
 800a09e:	4658      	mov	r0, fp
 800a0a0:	f000 fcd8 	bl	800aa54 <_Balloc>
 800a0a4:	4682      	mov	sl, r0
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d13c      	bne.n	800a124 <_dtoa_r+0x2ec>
 800a0aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a118 <_dtoa_r+0x2e0>)
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800a0b2:	e6d8      	b.n	8009e66 <_dtoa_r+0x2e>
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e7e0      	b.n	800a07a <_dtoa_r+0x242>
 800a0b8:	2401      	movs	r4, #1
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a0c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2312      	movs	r3, #18
 800a0cc:	e7d0      	b.n	800a070 <_dtoa_r+0x238>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0d2:	e7f5      	b.n	800a0c0 <_dtoa_r+0x288>
 800a0d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	9307      	str	r3, [sp, #28]
 800a0da:	e7d7      	b.n	800a08c <_dtoa_r+0x254>
 800a0dc:	3101      	adds	r1, #1
 800a0de:	0052      	lsls	r2, r2, #1
 800a0e0:	e7d8      	b.n	800a094 <_dtoa_r+0x25c>
 800a0e2:	bf00      	nop
 800a0e4:	f3af 8000 	nop.w
 800a0e8:	636f4361 	.word	0x636f4361
 800a0ec:	3fd287a7 	.word	0x3fd287a7
 800a0f0:	8b60c8b3 	.word	0x8b60c8b3
 800a0f4:	3fc68a28 	.word	0x3fc68a28
 800a0f8:	509f79fb 	.word	0x509f79fb
 800a0fc:	3fd34413 	.word	0x3fd34413
 800a100:	0800bae9 	.word	0x0800bae9
 800a104:	0800bb00 	.word	0x0800bb00
 800a108:	7ff00000 	.word	0x7ff00000
 800a10c:	0800bab9 	.word	0x0800bab9
 800a110:	3ff80000 	.word	0x3ff80000
 800a114:	0800bbf8 	.word	0x0800bbf8
 800a118:	0800bb58 	.word	0x0800bb58
 800a11c:	0800bae5 	.word	0x0800bae5
 800a120:	0800bab8 	.word	0x0800bab8
 800a124:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a128:	6018      	str	r0, [r3, #0]
 800a12a:	9b07      	ldr	r3, [sp, #28]
 800a12c:	2b0e      	cmp	r3, #14
 800a12e:	f200 80a4 	bhi.w	800a27a <_dtoa_r+0x442>
 800a132:	2c00      	cmp	r4, #0
 800a134:	f000 80a1 	beq.w	800a27a <_dtoa_r+0x442>
 800a138:	2f00      	cmp	r7, #0
 800a13a:	dd33      	ble.n	800a1a4 <_dtoa_r+0x36c>
 800a13c:	4bad      	ldr	r3, [pc, #692]	@ (800a3f4 <_dtoa_r+0x5bc>)
 800a13e:	f007 020f 	and.w	r2, r7, #15
 800a142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a146:	ed93 7b00 	vldr	d7, [r3]
 800a14a:	05f8      	lsls	r0, r7, #23
 800a14c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a150:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a154:	d516      	bpl.n	800a184 <_dtoa_r+0x34c>
 800a156:	4ba8      	ldr	r3, [pc, #672]	@ (800a3f8 <_dtoa_r+0x5c0>)
 800a158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a15c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a160:	f7f6 fb7c 	bl	800085c <__aeabi_ddiv>
 800a164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a168:	f004 040f 	and.w	r4, r4, #15
 800a16c:	2603      	movs	r6, #3
 800a16e:	4da2      	ldr	r5, [pc, #648]	@ (800a3f8 <_dtoa_r+0x5c0>)
 800a170:	b954      	cbnz	r4, 800a188 <_dtoa_r+0x350>
 800a172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a17a:	f7f6 fb6f 	bl	800085c <__aeabi_ddiv>
 800a17e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a182:	e028      	b.n	800a1d6 <_dtoa_r+0x39e>
 800a184:	2602      	movs	r6, #2
 800a186:	e7f2      	b.n	800a16e <_dtoa_r+0x336>
 800a188:	07e1      	lsls	r1, r4, #31
 800a18a:	d508      	bpl.n	800a19e <_dtoa_r+0x366>
 800a18c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a190:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a194:	f7f6 fa38 	bl	8000608 <__aeabi_dmul>
 800a198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a19c:	3601      	adds	r6, #1
 800a19e:	1064      	asrs	r4, r4, #1
 800a1a0:	3508      	adds	r5, #8
 800a1a2:	e7e5      	b.n	800a170 <_dtoa_r+0x338>
 800a1a4:	f000 80d2 	beq.w	800a34c <_dtoa_r+0x514>
 800a1a8:	427c      	negs	r4, r7
 800a1aa:	4b92      	ldr	r3, [pc, #584]	@ (800a3f4 <_dtoa_r+0x5bc>)
 800a1ac:	4d92      	ldr	r5, [pc, #584]	@ (800a3f8 <_dtoa_r+0x5c0>)
 800a1ae:	f004 020f 	and.w	r2, r4, #15
 800a1b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1be:	f7f6 fa23 	bl	8000608 <__aeabi_dmul>
 800a1c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1c6:	1124      	asrs	r4, r4, #4
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	2602      	movs	r6, #2
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	f040 80b2 	bne.w	800a336 <_dtoa_r+0x4fe>
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1d3      	bne.n	800a17e <_dtoa_r+0x346>
 800a1d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a1d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 80b7 	beq.w	800a350 <_dtoa_r+0x518>
 800a1e2:	4b86      	ldr	r3, [pc, #536]	@ (800a3fc <_dtoa_r+0x5c4>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7f6 fc7f 	bl	8000aec <__aeabi_dcmplt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f000 80ae 	beq.w	800a350 <_dtoa_r+0x518>
 800a1f4:	9b07      	ldr	r3, [sp, #28]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f000 80aa 	beq.w	800a350 <_dtoa_r+0x518>
 800a1fc:	9b00      	ldr	r3, [sp, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	dd37      	ble.n	800a272 <_dtoa_r+0x43a>
 800a202:	1e7b      	subs	r3, r7, #1
 800a204:	9304      	str	r3, [sp, #16]
 800a206:	4620      	mov	r0, r4
 800a208:	4b7d      	ldr	r3, [pc, #500]	@ (800a400 <_dtoa_r+0x5c8>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	4629      	mov	r1, r5
 800a20e:	f7f6 f9fb 	bl	8000608 <__aeabi_dmul>
 800a212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a216:	9c00      	ldr	r4, [sp, #0]
 800a218:	3601      	adds	r6, #1
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7f6 f98a 	bl	8000534 <__aeabi_i2d>
 800a220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a224:	f7f6 f9f0 	bl	8000608 <__aeabi_dmul>
 800a228:	4b76      	ldr	r3, [pc, #472]	@ (800a404 <_dtoa_r+0x5cc>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	f7f6 f836 	bl	800029c <__adddf3>
 800a230:	4605      	mov	r5, r0
 800a232:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a236:	2c00      	cmp	r4, #0
 800a238:	f040 808d 	bne.w	800a356 <_dtoa_r+0x51e>
 800a23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a240:	4b71      	ldr	r3, [pc, #452]	@ (800a408 <_dtoa_r+0x5d0>)
 800a242:	2200      	movs	r2, #0
 800a244:	f7f6 f828 	bl	8000298 <__aeabi_dsub>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a250:	462a      	mov	r2, r5
 800a252:	4633      	mov	r3, r6
 800a254:	f7f6 fc68 	bl	8000b28 <__aeabi_dcmpgt>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f040 828b 	bne.w	800a774 <_dtoa_r+0x93c>
 800a25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a262:	462a      	mov	r2, r5
 800a264:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a268:	f7f6 fc40 	bl	8000aec <__aeabi_dcmplt>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f040 8128 	bne.w	800a4c2 <_dtoa_r+0x68a>
 800a272:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a276:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a27a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f2c0 815a 	blt.w	800a536 <_dtoa_r+0x6fe>
 800a282:	2f0e      	cmp	r7, #14
 800a284:	f300 8157 	bgt.w	800a536 <_dtoa_r+0x6fe>
 800a288:	4b5a      	ldr	r3, [pc, #360]	@ (800a3f4 <_dtoa_r+0x5bc>)
 800a28a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a28e:	ed93 7b00 	vldr	d7, [r3]
 800a292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a294:	2b00      	cmp	r3, #0
 800a296:	ed8d 7b00 	vstr	d7, [sp]
 800a29a:	da03      	bge.n	800a2a4 <_dtoa_r+0x46c>
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f340 8101 	ble.w	800a4a6 <_dtoa_r+0x66e>
 800a2a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a2a8:	4656      	mov	r6, sl
 800a2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f6 fad3 	bl	800085c <__aeabi_ddiv>
 800a2b6:	f7f6 fc57 	bl	8000b68 <__aeabi_d2iz>
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	f7f6 f93a 	bl	8000534 <__aeabi_i2d>
 800a2c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2c4:	f7f6 f9a0 	bl	8000608 <__aeabi_dmul>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a2d4:	f7f5 ffe0 	bl	8000298 <__aeabi_dsub>
 800a2d8:	f806 4b01 	strb.w	r4, [r6], #1
 800a2dc:	9d07      	ldr	r5, [sp, #28]
 800a2de:	eba6 040a 	sub.w	r4, r6, sl
 800a2e2:	42a5      	cmp	r5, r4
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	f040 8117 	bne.w	800a51a <_dtoa_r+0x6e2>
 800a2ec:	f7f5 ffd6 	bl	800029c <__adddf3>
 800a2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	f7f6 fc16 	bl	8000b28 <__aeabi_dcmpgt>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	f040 80f9 	bne.w	800a4f4 <_dtoa_r+0x6bc>
 800a302:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a306:	4620      	mov	r0, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	f7f6 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a30e:	b118      	cbz	r0, 800a318 <_dtoa_r+0x4e0>
 800a310:	f018 0f01 	tst.w	r8, #1
 800a314:	f040 80ee 	bne.w	800a4f4 <_dtoa_r+0x6bc>
 800a318:	4649      	mov	r1, r9
 800a31a:	4658      	mov	r0, fp
 800a31c:	f000 fbda 	bl	800aad4 <_Bfree>
 800a320:	2300      	movs	r3, #0
 800a322:	7033      	strb	r3, [r6, #0]
 800a324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a326:	3701      	adds	r7, #1
 800a328:	601f      	str	r7, [r3, #0]
 800a32a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f000 831d 	beq.w	800a96c <_dtoa_r+0xb34>
 800a332:	601e      	str	r6, [r3, #0]
 800a334:	e31a      	b.n	800a96c <_dtoa_r+0xb34>
 800a336:	07e2      	lsls	r2, r4, #31
 800a338:	d505      	bpl.n	800a346 <_dtoa_r+0x50e>
 800a33a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a33e:	f7f6 f963 	bl	8000608 <__aeabi_dmul>
 800a342:	3601      	adds	r6, #1
 800a344:	2301      	movs	r3, #1
 800a346:	1064      	asrs	r4, r4, #1
 800a348:	3508      	adds	r5, #8
 800a34a:	e73f      	b.n	800a1cc <_dtoa_r+0x394>
 800a34c:	2602      	movs	r6, #2
 800a34e:	e742      	b.n	800a1d6 <_dtoa_r+0x39e>
 800a350:	9c07      	ldr	r4, [sp, #28]
 800a352:	9704      	str	r7, [sp, #16]
 800a354:	e761      	b.n	800a21a <_dtoa_r+0x3e2>
 800a356:	4b27      	ldr	r3, [pc, #156]	@ (800a3f4 <_dtoa_r+0x5bc>)
 800a358:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a35a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a35e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a362:	4454      	add	r4, sl
 800a364:	2900      	cmp	r1, #0
 800a366:	d053      	beq.n	800a410 <_dtoa_r+0x5d8>
 800a368:	4928      	ldr	r1, [pc, #160]	@ (800a40c <_dtoa_r+0x5d4>)
 800a36a:	2000      	movs	r0, #0
 800a36c:	f7f6 fa76 	bl	800085c <__aeabi_ddiv>
 800a370:	4633      	mov	r3, r6
 800a372:	462a      	mov	r2, r5
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a37c:	4656      	mov	r6, sl
 800a37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a382:	f7f6 fbf1 	bl	8000b68 <__aeabi_d2iz>
 800a386:	4605      	mov	r5, r0
 800a388:	f7f6 f8d4 	bl	8000534 <__aeabi_i2d>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a394:	f7f5 ff80 	bl	8000298 <__aeabi_dsub>
 800a398:	3530      	adds	r5, #48	@ 0x30
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3a2:	f806 5b01 	strb.w	r5, [r6], #1
 800a3a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3aa:	f7f6 fb9f 	bl	8000aec <__aeabi_dcmplt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d171      	bne.n	800a496 <_dtoa_r+0x65e>
 800a3b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3b6:	4911      	ldr	r1, [pc, #68]	@ (800a3fc <_dtoa_r+0x5c4>)
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f7f5 ff6d 	bl	8000298 <__aeabi_dsub>
 800a3be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3c2:	f7f6 fb93 	bl	8000aec <__aeabi_dcmplt>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f040 8095 	bne.w	800a4f6 <_dtoa_r+0x6be>
 800a3cc:	42a6      	cmp	r6, r4
 800a3ce:	f43f af50 	beq.w	800a272 <_dtoa_r+0x43a>
 800a3d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3d6:	4b0a      	ldr	r3, [pc, #40]	@ (800a400 <_dtoa_r+0x5c8>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f7f6 f915 	bl	8000608 <__aeabi_dmul>
 800a3de:	4b08      	ldr	r3, [pc, #32]	@ (800a400 <_dtoa_r+0x5c8>)
 800a3e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ea:	f7f6 f90d 	bl	8000608 <__aeabi_dmul>
 800a3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3f2:	e7c4      	b.n	800a37e <_dtoa_r+0x546>
 800a3f4:	0800bbf8 	.word	0x0800bbf8
 800a3f8:	0800bbd0 	.word	0x0800bbd0
 800a3fc:	3ff00000 	.word	0x3ff00000
 800a400:	40240000 	.word	0x40240000
 800a404:	401c0000 	.word	0x401c0000
 800a408:	40140000 	.word	0x40140000
 800a40c:	3fe00000 	.word	0x3fe00000
 800a410:	4631      	mov	r1, r6
 800a412:	4628      	mov	r0, r5
 800a414:	f7f6 f8f8 	bl	8000608 <__aeabi_dmul>
 800a418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a41c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a41e:	4656      	mov	r6, sl
 800a420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a424:	f7f6 fba0 	bl	8000b68 <__aeabi_d2iz>
 800a428:	4605      	mov	r5, r0
 800a42a:	f7f6 f883 	bl	8000534 <__aeabi_i2d>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a436:	f7f5 ff2f 	bl	8000298 <__aeabi_dsub>
 800a43a:	3530      	adds	r5, #48	@ 0x30
 800a43c:	f806 5b01 	strb.w	r5, [r6], #1
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	42a6      	cmp	r6, r4
 800a446:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a44a:	f04f 0200 	mov.w	r2, #0
 800a44e:	d124      	bne.n	800a49a <_dtoa_r+0x662>
 800a450:	4bac      	ldr	r3, [pc, #688]	@ (800a704 <_dtoa_r+0x8cc>)
 800a452:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a456:	f7f5 ff21 	bl	800029c <__adddf3>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a462:	f7f6 fb61 	bl	8000b28 <__aeabi_dcmpgt>
 800a466:	2800      	cmp	r0, #0
 800a468:	d145      	bne.n	800a4f6 <_dtoa_r+0x6be>
 800a46a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a46e:	49a5      	ldr	r1, [pc, #660]	@ (800a704 <_dtoa_r+0x8cc>)
 800a470:	2000      	movs	r0, #0
 800a472:	f7f5 ff11 	bl	8000298 <__aeabi_dsub>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47e:	f7f6 fb35 	bl	8000aec <__aeabi_dcmplt>
 800a482:	2800      	cmp	r0, #0
 800a484:	f43f aef5 	beq.w	800a272 <_dtoa_r+0x43a>
 800a488:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a48a:	1e73      	subs	r3, r6, #1
 800a48c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a48e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a492:	2b30      	cmp	r3, #48	@ 0x30
 800a494:	d0f8      	beq.n	800a488 <_dtoa_r+0x650>
 800a496:	9f04      	ldr	r7, [sp, #16]
 800a498:	e73e      	b.n	800a318 <_dtoa_r+0x4e0>
 800a49a:	4b9b      	ldr	r3, [pc, #620]	@ (800a708 <_dtoa_r+0x8d0>)
 800a49c:	f7f6 f8b4 	bl	8000608 <__aeabi_dmul>
 800a4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a4:	e7bc      	b.n	800a420 <_dtoa_r+0x5e8>
 800a4a6:	d10c      	bne.n	800a4c2 <_dtoa_r+0x68a>
 800a4a8:	4b98      	ldr	r3, [pc, #608]	@ (800a70c <_dtoa_r+0x8d4>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4b0:	f7f6 f8aa 	bl	8000608 <__aeabi_dmul>
 800a4b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4b8:	f7f6 fb2c 	bl	8000b14 <__aeabi_dcmpge>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	f000 8157 	beq.w	800a770 <_dtoa_r+0x938>
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	4625      	mov	r5, r4
 800a4c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	4656      	mov	r6, sl
 800a4ce:	2700      	movs	r7, #0
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4658      	mov	r0, fp
 800a4d4:	f000 fafe 	bl	800aad4 <_Bfree>
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	d0dc      	beq.n	800a496 <_dtoa_r+0x65e>
 800a4dc:	b12f      	cbz	r7, 800a4ea <_dtoa_r+0x6b2>
 800a4de:	42af      	cmp	r7, r5
 800a4e0:	d003      	beq.n	800a4ea <_dtoa_r+0x6b2>
 800a4e2:	4639      	mov	r1, r7
 800a4e4:	4658      	mov	r0, fp
 800a4e6:	f000 faf5 	bl	800aad4 <_Bfree>
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	4658      	mov	r0, fp
 800a4ee:	f000 faf1 	bl	800aad4 <_Bfree>
 800a4f2:	e7d0      	b.n	800a496 <_dtoa_r+0x65e>
 800a4f4:	9704      	str	r7, [sp, #16]
 800a4f6:	4633      	mov	r3, r6
 800a4f8:	461e      	mov	r6, r3
 800a4fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4fe:	2a39      	cmp	r2, #57	@ 0x39
 800a500:	d107      	bne.n	800a512 <_dtoa_r+0x6da>
 800a502:	459a      	cmp	sl, r3
 800a504:	d1f8      	bne.n	800a4f8 <_dtoa_r+0x6c0>
 800a506:	9a04      	ldr	r2, [sp, #16]
 800a508:	3201      	adds	r2, #1
 800a50a:	9204      	str	r2, [sp, #16]
 800a50c:	2230      	movs	r2, #48	@ 0x30
 800a50e:	f88a 2000 	strb.w	r2, [sl]
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	3201      	adds	r2, #1
 800a516:	701a      	strb	r2, [r3, #0]
 800a518:	e7bd      	b.n	800a496 <_dtoa_r+0x65e>
 800a51a:	4b7b      	ldr	r3, [pc, #492]	@ (800a708 <_dtoa_r+0x8d0>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	f7f6 f873 	bl	8000608 <__aeabi_dmul>
 800a522:	2200      	movs	r2, #0
 800a524:	2300      	movs	r3, #0
 800a526:	4604      	mov	r4, r0
 800a528:	460d      	mov	r5, r1
 800a52a:	f7f6 fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a52e:	2800      	cmp	r0, #0
 800a530:	f43f aebb 	beq.w	800a2aa <_dtoa_r+0x472>
 800a534:	e6f0      	b.n	800a318 <_dtoa_r+0x4e0>
 800a536:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a538:	2a00      	cmp	r2, #0
 800a53a:	f000 80db 	beq.w	800a6f4 <_dtoa_r+0x8bc>
 800a53e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a540:	2a01      	cmp	r2, #1
 800a542:	f300 80bf 	bgt.w	800a6c4 <_dtoa_r+0x88c>
 800a546:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a548:	2a00      	cmp	r2, #0
 800a54a:	f000 80b7 	beq.w	800a6bc <_dtoa_r+0x884>
 800a54e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a552:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a554:	4646      	mov	r6, r8
 800a556:	9a08      	ldr	r2, [sp, #32]
 800a558:	2101      	movs	r1, #1
 800a55a:	441a      	add	r2, r3
 800a55c:	4658      	mov	r0, fp
 800a55e:	4498      	add	r8, r3
 800a560:	9208      	str	r2, [sp, #32]
 800a562:	f000 fb6b 	bl	800ac3c <__i2b>
 800a566:	4605      	mov	r5, r0
 800a568:	b15e      	cbz	r6, 800a582 <_dtoa_r+0x74a>
 800a56a:	9b08      	ldr	r3, [sp, #32]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dd08      	ble.n	800a582 <_dtoa_r+0x74a>
 800a570:	42b3      	cmp	r3, r6
 800a572:	9a08      	ldr	r2, [sp, #32]
 800a574:	bfa8      	it	ge
 800a576:	4633      	movge	r3, r6
 800a578:	eba8 0803 	sub.w	r8, r8, r3
 800a57c:	1af6      	subs	r6, r6, r3
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	9308      	str	r3, [sp, #32]
 800a582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a584:	b1f3      	cbz	r3, 800a5c4 <_dtoa_r+0x78c>
 800a586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 80b7 	beq.w	800a6fc <_dtoa_r+0x8c4>
 800a58e:	b18c      	cbz	r4, 800a5b4 <_dtoa_r+0x77c>
 800a590:	4629      	mov	r1, r5
 800a592:	4622      	mov	r2, r4
 800a594:	4658      	mov	r0, fp
 800a596:	f000 fc11 	bl	800adbc <__pow5mult>
 800a59a:	464a      	mov	r2, r9
 800a59c:	4601      	mov	r1, r0
 800a59e:	4605      	mov	r5, r0
 800a5a0:	4658      	mov	r0, fp
 800a5a2:	f000 fb61 	bl	800ac68 <__multiply>
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	9004      	str	r0, [sp, #16]
 800a5aa:	4658      	mov	r0, fp
 800a5ac:	f000 fa92 	bl	800aad4 <_Bfree>
 800a5b0:	9b04      	ldr	r3, [sp, #16]
 800a5b2:	4699      	mov	r9, r3
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b6:	1b1a      	subs	r2, r3, r4
 800a5b8:	d004      	beq.n	800a5c4 <_dtoa_r+0x78c>
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4658      	mov	r0, fp
 800a5be:	f000 fbfd 	bl	800adbc <__pow5mult>
 800a5c2:	4681      	mov	r9, r0
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4658      	mov	r0, fp
 800a5c8:	f000 fb38 	bl	800ac3c <__i2b>
 800a5cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 81cf 	beq.w	800a974 <_dtoa_r+0xb3c>
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	4601      	mov	r1, r0
 800a5da:	4658      	mov	r0, fp
 800a5dc:	f000 fbee 	bl	800adbc <__pow5mult>
 800a5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	f300 8095 	bgt.w	800a714 <_dtoa_r+0x8dc>
 800a5ea:	9b02      	ldr	r3, [sp, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f040 8087 	bne.w	800a700 <_dtoa_r+0x8c8>
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f040 8089 	bne.w	800a710 <_dtoa_r+0x8d8>
 800a5fe:	9b03      	ldr	r3, [sp, #12]
 800a600:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a604:	0d1b      	lsrs	r3, r3, #20
 800a606:	051b      	lsls	r3, r3, #20
 800a608:	b12b      	cbz	r3, 800a616 <_dtoa_r+0x7de>
 800a60a:	9b08      	ldr	r3, [sp, #32]
 800a60c:	3301      	adds	r3, #1
 800a60e:	9308      	str	r3, [sp, #32]
 800a610:	f108 0801 	add.w	r8, r8, #1
 800a614:	2301      	movs	r3, #1
 800a616:	930a      	str	r3, [sp, #40]	@ 0x28
 800a618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 81b0 	beq.w	800a980 <_dtoa_r+0xb48>
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a626:	6918      	ldr	r0, [r3, #16]
 800a628:	f000 fabc 	bl	800aba4 <__hi0bits>
 800a62c:	f1c0 0020 	rsb	r0, r0, #32
 800a630:	9b08      	ldr	r3, [sp, #32]
 800a632:	4418      	add	r0, r3
 800a634:	f010 001f 	ands.w	r0, r0, #31
 800a638:	d077      	beq.n	800a72a <_dtoa_r+0x8f2>
 800a63a:	f1c0 0320 	rsb	r3, r0, #32
 800a63e:	2b04      	cmp	r3, #4
 800a640:	dd6b      	ble.n	800a71a <_dtoa_r+0x8e2>
 800a642:	9b08      	ldr	r3, [sp, #32]
 800a644:	f1c0 001c 	rsb	r0, r0, #28
 800a648:	4403      	add	r3, r0
 800a64a:	4480      	add	r8, r0
 800a64c:	4406      	add	r6, r0
 800a64e:	9308      	str	r3, [sp, #32]
 800a650:	f1b8 0f00 	cmp.w	r8, #0
 800a654:	dd05      	ble.n	800a662 <_dtoa_r+0x82a>
 800a656:	4649      	mov	r1, r9
 800a658:	4642      	mov	r2, r8
 800a65a:	4658      	mov	r0, fp
 800a65c:	f000 fc08 	bl	800ae70 <__lshift>
 800a660:	4681      	mov	r9, r0
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd05      	ble.n	800a674 <_dtoa_r+0x83c>
 800a668:	4621      	mov	r1, r4
 800a66a:	461a      	mov	r2, r3
 800a66c:	4658      	mov	r0, fp
 800a66e:	f000 fbff 	bl	800ae70 <__lshift>
 800a672:	4604      	mov	r4, r0
 800a674:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a676:	2b00      	cmp	r3, #0
 800a678:	d059      	beq.n	800a72e <_dtoa_r+0x8f6>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4648      	mov	r0, r9
 800a67e:	f000 fc63 	bl	800af48 <__mcmp>
 800a682:	2800      	cmp	r0, #0
 800a684:	da53      	bge.n	800a72e <_dtoa_r+0x8f6>
 800a686:	1e7b      	subs	r3, r7, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	4649      	mov	r1, r9
 800a68c:	2300      	movs	r3, #0
 800a68e:	220a      	movs	r2, #10
 800a690:	4658      	mov	r0, fp
 800a692:	f000 fa41 	bl	800ab18 <__multadd>
 800a696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a698:	4681      	mov	r9, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 8172 	beq.w	800a984 <_dtoa_r+0xb4c>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	220a      	movs	r2, #10
 800a6a6:	4658      	mov	r0, fp
 800a6a8:	f000 fa36 	bl	800ab18 <__multadd>
 800a6ac:	9b00      	ldr	r3, [sp, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	dc67      	bgt.n	800a784 <_dtoa_r+0x94c>
 800a6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	dc41      	bgt.n	800a73e <_dtoa_r+0x906>
 800a6ba:	e063      	b.n	800a784 <_dtoa_r+0x94c>
 800a6bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a6be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a6c2:	e746      	b.n	800a552 <_dtoa_r+0x71a>
 800a6c4:	9b07      	ldr	r3, [sp, #28]
 800a6c6:	1e5c      	subs	r4, r3, #1
 800a6c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ca:	42a3      	cmp	r3, r4
 800a6cc:	bfbf      	itttt	lt
 800a6ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a6d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a6d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a6d4:	1ae3      	sublt	r3, r4, r3
 800a6d6:	bfb4      	ite	lt
 800a6d8:	18d2      	addlt	r2, r2, r3
 800a6da:	1b1c      	subge	r4, r3, r4
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	bfbc      	itt	lt
 800a6e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a6e2:	2400      	movlt	r4, #0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bfb5      	itete	lt
 800a6e8:	eba8 0603 	sublt.w	r6, r8, r3
 800a6ec:	9b07      	ldrge	r3, [sp, #28]
 800a6ee:	2300      	movlt	r3, #0
 800a6f0:	4646      	movge	r6, r8
 800a6f2:	e730      	b.n	800a556 <_dtoa_r+0x71e>
 800a6f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a6f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a6f8:	4646      	mov	r6, r8
 800a6fa:	e735      	b.n	800a568 <_dtoa_r+0x730>
 800a6fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a6fe:	e75c      	b.n	800a5ba <_dtoa_r+0x782>
 800a700:	2300      	movs	r3, #0
 800a702:	e788      	b.n	800a616 <_dtoa_r+0x7de>
 800a704:	3fe00000 	.word	0x3fe00000
 800a708:	40240000 	.word	0x40240000
 800a70c:	40140000 	.word	0x40140000
 800a710:	9b02      	ldr	r3, [sp, #8]
 800a712:	e780      	b.n	800a616 <_dtoa_r+0x7de>
 800a714:	2300      	movs	r3, #0
 800a716:	930a      	str	r3, [sp, #40]	@ 0x28
 800a718:	e782      	b.n	800a620 <_dtoa_r+0x7e8>
 800a71a:	d099      	beq.n	800a650 <_dtoa_r+0x818>
 800a71c:	9a08      	ldr	r2, [sp, #32]
 800a71e:	331c      	adds	r3, #28
 800a720:	441a      	add	r2, r3
 800a722:	4498      	add	r8, r3
 800a724:	441e      	add	r6, r3
 800a726:	9208      	str	r2, [sp, #32]
 800a728:	e792      	b.n	800a650 <_dtoa_r+0x818>
 800a72a:	4603      	mov	r3, r0
 800a72c:	e7f6      	b.n	800a71c <_dtoa_r+0x8e4>
 800a72e:	9b07      	ldr	r3, [sp, #28]
 800a730:	9704      	str	r7, [sp, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	dc20      	bgt.n	800a778 <_dtoa_r+0x940>
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	dd1e      	ble.n	800a77c <_dtoa_r+0x944>
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	f47f aec0 	bne.w	800a4c6 <_dtoa_r+0x68e>
 800a746:	4621      	mov	r1, r4
 800a748:	2205      	movs	r2, #5
 800a74a:	4658      	mov	r0, fp
 800a74c:	f000 f9e4 	bl	800ab18 <__multadd>
 800a750:	4601      	mov	r1, r0
 800a752:	4604      	mov	r4, r0
 800a754:	4648      	mov	r0, r9
 800a756:	f000 fbf7 	bl	800af48 <__mcmp>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f77f aeb3 	ble.w	800a4c6 <_dtoa_r+0x68e>
 800a760:	4656      	mov	r6, sl
 800a762:	2331      	movs	r3, #49	@ 0x31
 800a764:	f806 3b01 	strb.w	r3, [r6], #1
 800a768:	9b04      	ldr	r3, [sp, #16]
 800a76a:	3301      	adds	r3, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	e6ae      	b.n	800a4ce <_dtoa_r+0x696>
 800a770:	9c07      	ldr	r4, [sp, #28]
 800a772:	9704      	str	r7, [sp, #16]
 800a774:	4625      	mov	r5, r4
 800a776:	e7f3      	b.n	800a760 <_dtoa_r+0x928>
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 8104 	beq.w	800a98c <_dtoa_r+0xb54>
 800a784:	2e00      	cmp	r6, #0
 800a786:	dd05      	ble.n	800a794 <_dtoa_r+0x95c>
 800a788:	4629      	mov	r1, r5
 800a78a:	4632      	mov	r2, r6
 800a78c:	4658      	mov	r0, fp
 800a78e:	f000 fb6f 	bl	800ae70 <__lshift>
 800a792:	4605      	mov	r5, r0
 800a794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a796:	2b00      	cmp	r3, #0
 800a798:	d05a      	beq.n	800a850 <_dtoa_r+0xa18>
 800a79a:	6869      	ldr	r1, [r5, #4]
 800a79c:	4658      	mov	r0, fp
 800a79e:	f000 f959 	bl	800aa54 <_Balloc>
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	b928      	cbnz	r0, 800a7b2 <_dtoa_r+0x97a>
 800a7a6:	4b84      	ldr	r3, [pc, #528]	@ (800a9b8 <_dtoa_r+0xb80>)
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a7ae:	f7ff bb5a 	b.w	8009e66 <_dtoa_r+0x2e>
 800a7b2:	692a      	ldr	r2, [r5, #16]
 800a7b4:	3202      	adds	r2, #2
 800a7b6:	0092      	lsls	r2, r2, #2
 800a7b8:	f105 010c 	add.w	r1, r5, #12
 800a7bc:	300c      	adds	r0, #12
 800a7be:	f7ff faa4 	bl	8009d0a <memcpy>
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4658      	mov	r0, fp
 800a7c8:	f000 fb52 	bl	800ae70 <__lshift>
 800a7cc:	f10a 0301 	add.w	r3, sl, #1
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	4453      	add	r3, sl
 800a7d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	462f      	mov	r7, r5
 800a7e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	9b07      	ldr	r3, [sp, #28]
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	4648      	mov	r0, r9
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	f7ff fa9a 	bl	8009d26 <quorem>
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	9002      	str	r0, [sp, #8]
 800a7f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7fa:	4648      	mov	r0, r9
 800a7fc:	f000 fba4 	bl	800af48 <__mcmp>
 800a800:	462a      	mov	r2, r5
 800a802:	9008      	str	r0, [sp, #32]
 800a804:	4621      	mov	r1, r4
 800a806:	4658      	mov	r0, fp
 800a808:	f000 fbba 	bl	800af80 <__mdiff>
 800a80c:	68c2      	ldr	r2, [r0, #12]
 800a80e:	4606      	mov	r6, r0
 800a810:	bb02      	cbnz	r2, 800a854 <_dtoa_r+0xa1c>
 800a812:	4601      	mov	r1, r0
 800a814:	4648      	mov	r0, r9
 800a816:	f000 fb97 	bl	800af48 <__mcmp>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4631      	mov	r1, r6
 800a81e:	4658      	mov	r0, fp
 800a820:	920e      	str	r2, [sp, #56]	@ 0x38
 800a822:	f000 f957 	bl	800aad4 <_Bfree>
 800a826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a82a:	9e07      	ldr	r6, [sp, #28]
 800a82c:	ea43 0102 	orr.w	r1, r3, r2
 800a830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a832:	4319      	orrs	r1, r3
 800a834:	d110      	bne.n	800a858 <_dtoa_r+0xa20>
 800a836:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a83a:	d029      	beq.n	800a890 <_dtoa_r+0xa58>
 800a83c:	9b08      	ldr	r3, [sp, #32]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	dd02      	ble.n	800a848 <_dtoa_r+0xa10>
 800a842:	9b02      	ldr	r3, [sp, #8]
 800a844:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a848:	9b00      	ldr	r3, [sp, #0]
 800a84a:	f883 8000 	strb.w	r8, [r3]
 800a84e:	e63f      	b.n	800a4d0 <_dtoa_r+0x698>
 800a850:	4628      	mov	r0, r5
 800a852:	e7bb      	b.n	800a7cc <_dtoa_r+0x994>
 800a854:	2201      	movs	r2, #1
 800a856:	e7e1      	b.n	800a81c <_dtoa_r+0x9e4>
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	db04      	blt.n	800a868 <_dtoa_r+0xa30>
 800a85e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a860:	430b      	orrs	r3, r1
 800a862:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a864:	430b      	orrs	r3, r1
 800a866:	d120      	bne.n	800a8aa <_dtoa_r+0xa72>
 800a868:	2a00      	cmp	r2, #0
 800a86a:	dded      	ble.n	800a848 <_dtoa_r+0xa10>
 800a86c:	4649      	mov	r1, r9
 800a86e:	2201      	movs	r2, #1
 800a870:	4658      	mov	r0, fp
 800a872:	f000 fafd 	bl	800ae70 <__lshift>
 800a876:	4621      	mov	r1, r4
 800a878:	4681      	mov	r9, r0
 800a87a:	f000 fb65 	bl	800af48 <__mcmp>
 800a87e:	2800      	cmp	r0, #0
 800a880:	dc03      	bgt.n	800a88a <_dtoa_r+0xa52>
 800a882:	d1e1      	bne.n	800a848 <_dtoa_r+0xa10>
 800a884:	f018 0f01 	tst.w	r8, #1
 800a888:	d0de      	beq.n	800a848 <_dtoa_r+0xa10>
 800a88a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a88e:	d1d8      	bne.n	800a842 <_dtoa_r+0xa0a>
 800a890:	9a00      	ldr	r2, [sp, #0]
 800a892:	2339      	movs	r3, #57	@ 0x39
 800a894:	7013      	strb	r3, [r2, #0]
 800a896:	4633      	mov	r3, r6
 800a898:	461e      	mov	r6, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a8a0:	2a39      	cmp	r2, #57	@ 0x39
 800a8a2:	d052      	beq.n	800a94a <_dtoa_r+0xb12>
 800a8a4:	3201      	adds	r2, #1
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e612      	b.n	800a4d0 <_dtoa_r+0x698>
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	dd07      	ble.n	800a8be <_dtoa_r+0xa86>
 800a8ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8b2:	d0ed      	beq.n	800a890 <_dtoa_r+0xa58>
 800a8b4:	9a00      	ldr	r2, [sp, #0]
 800a8b6:	f108 0301 	add.w	r3, r8, #1
 800a8ba:	7013      	strb	r3, [r2, #0]
 800a8bc:	e608      	b.n	800a4d0 <_dtoa_r+0x698>
 800a8be:	9b07      	ldr	r3, [sp, #28]
 800a8c0:	9a07      	ldr	r2, [sp, #28]
 800a8c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a8c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d028      	beq.n	800a91e <_dtoa_r+0xae6>
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	220a      	movs	r2, #10
 800a8d2:	4658      	mov	r0, fp
 800a8d4:	f000 f920 	bl	800ab18 <__multadd>
 800a8d8:	42af      	cmp	r7, r5
 800a8da:	4681      	mov	r9, r0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	f04f 020a 	mov.w	r2, #10
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	4658      	mov	r0, fp
 800a8e8:	d107      	bne.n	800a8fa <_dtoa_r+0xac2>
 800a8ea:	f000 f915 	bl	800ab18 <__multadd>
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	9b07      	ldr	r3, [sp, #28]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	9307      	str	r3, [sp, #28]
 800a8f8:	e774      	b.n	800a7e4 <_dtoa_r+0x9ac>
 800a8fa:	f000 f90d 	bl	800ab18 <__multadd>
 800a8fe:	4629      	mov	r1, r5
 800a900:	4607      	mov	r7, r0
 800a902:	2300      	movs	r3, #0
 800a904:	220a      	movs	r2, #10
 800a906:	4658      	mov	r0, fp
 800a908:	f000 f906 	bl	800ab18 <__multadd>
 800a90c:	4605      	mov	r5, r0
 800a90e:	e7f0      	b.n	800a8f2 <_dtoa_r+0xaba>
 800a910:	9b00      	ldr	r3, [sp, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	bfcc      	ite	gt
 800a916:	461e      	movgt	r6, r3
 800a918:	2601      	movle	r6, #1
 800a91a:	4456      	add	r6, sl
 800a91c:	2700      	movs	r7, #0
 800a91e:	4649      	mov	r1, r9
 800a920:	2201      	movs	r2, #1
 800a922:	4658      	mov	r0, fp
 800a924:	f000 faa4 	bl	800ae70 <__lshift>
 800a928:	4621      	mov	r1, r4
 800a92a:	4681      	mov	r9, r0
 800a92c:	f000 fb0c 	bl	800af48 <__mcmp>
 800a930:	2800      	cmp	r0, #0
 800a932:	dcb0      	bgt.n	800a896 <_dtoa_r+0xa5e>
 800a934:	d102      	bne.n	800a93c <_dtoa_r+0xb04>
 800a936:	f018 0f01 	tst.w	r8, #1
 800a93a:	d1ac      	bne.n	800a896 <_dtoa_r+0xa5e>
 800a93c:	4633      	mov	r3, r6
 800a93e:	461e      	mov	r6, r3
 800a940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a944:	2a30      	cmp	r2, #48	@ 0x30
 800a946:	d0fa      	beq.n	800a93e <_dtoa_r+0xb06>
 800a948:	e5c2      	b.n	800a4d0 <_dtoa_r+0x698>
 800a94a:	459a      	cmp	sl, r3
 800a94c:	d1a4      	bne.n	800a898 <_dtoa_r+0xa60>
 800a94e:	9b04      	ldr	r3, [sp, #16]
 800a950:	3301      	adds	r3, #1
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	2331      	movs	r3, #49	@ 0x31
 800a956:	f88a 3000 	strb.w	r3, [sl]
 800a95a:	e5b9      	b.n	800a4d0 <_dtoa_r+0x698>
 800a95c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a95e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a9bc <_dtoa_r+0xb84>
 800a962:	b11b      	cbz	r3, 800a96c <_dtoa_r+0xb34>
 800a964:	f10a 0308 	add.w	r3, sl, #8
 800a968:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	4650      	mov	r0, sl
 800a96e:	b019      	add	sp, #100	@ 0x64
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a976:	2b01      	cmp	r3, #1
 800a978:	f77f ae37 	ble.w	800a5ea <_dtoa_r+0x7b2>
 800a97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a980:	2001      	movs	r0, #1
 800a982:	e655      	b.n	800a630 <_dtoa_r+0x7f8>
 800a984:	9b00      	ldr	r3, [sp, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f77f aed6 	ble.w	800a738 <_dtoa_r+0x900>
 800a98c:	4656      	mov	r6, sl
 800a98e:	4621      	mov	r1, r4
 800a990:	4648      	mov	r0, r9
 800a992:	f7ff f9c8 	bl	8009d26 <quorem>
 800a996:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a99a:	f806 8b01 	strb.w	r8, [r6], #1
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	eba6 020a 	sub.w	r2, r6, sl
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	ddb3      	ble.n	800a910 <_dtoa_r+0xad8>
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	220a      	movs	r2, #10
 800a9ae:	4658      	mov	r0, fp
 800a9b0:	f000 f8b2 	bl	800ab18 <__multadd>
 800a9b4:	4681      	mov	r9, r0
 800a9b6:	e7ea      	b.n	800a98e <_dtoa_r+0xb56>
 800a9b8:	0800bb58 	.word	0x0800bb58
 800a9bc:	0800badc 	.word	0x0800badc

0800a9c0 <_free_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d041      	beq.n	800aa4c <_free_r+0x8c>
 800a9c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9cc:	1f0c      	subs	r4, r1, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bfb8      	it	lt
 800a9d2:	18e4      	addlt	r4, r4, r3
 800a9d4:	f7fe fba0 	bl	8009118 <__malloc_lock>
 800a9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <_free_r+0x90>)
 800a9da:	6813      	ldr	r3, [r2, #0]
 800a9dc:	b933      	cbnz	r3, 800a9ec <_free_r+0x2c>
 800a9de:	6063      	str	r3, [r4, #4]
 800a9e0:	6014      	str	r4, [r2, #0]
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9e8:	f7fe bb9c 	b.w	8009124 <__malloc_unlock>
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d908      	bls.n	800aa02 <_free_r+0x42>
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	1821      	adds	r1, r4, r0
 800a9f4:	428b      	cmp	r3, r1
 800a9f6:	bf01      	itttt	eq
 800a9f8:	6819      	ldreq	r1, [r3, #0]
 800a9fa:	685b      	ldreq	r3, [r3, #4]
 800a9fc:	1809      	addeq	r1, r1, r0
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	e7ed      	b.n	800a9de <_free_r+0x1e>
 800aa02:	461a      	mov	r2, r3
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	b10b      	cbz	r3, 800aa0c <_free_r+0x4c>
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d9fa      	bls.n	800aa02 <_free_r+0x42>
 800aa0c:	6811      	ldr	r1, [r2, #0]
 800aa0e:	1850      	adds	r0, r2, r1
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d10b      	bne.n	800aa2c <_free_r+0x6c>
 800aa14:	6820      	ldr	r0, [r4, #0]
 800aa16:	4401      	add	r1, r0
 800aa18:	1850      	adds	r0, r2, r1
 800aa1a:	4283      	cmp	r3, r0
 800aa1c:	6011      	str	r1, [r2, #0]
 800aa1e:	d1e0      	bne.n	800a9e2 <_free_r+0x22>
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	6053      	str	r3, [r2, #4]
 800aa26:	4408      	add	r0, r1
 800aa28:	6010      	str	r0, [r2, #0]
 800aa2a:	e7da      	b.n	800a9e2 <_free_r+0x22>
 800aa2c:	d902      	bls.n	800aa34 <_free_r+0x74>
 800aa2e:	230c      	movs	r3, #12
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	e7d6      	b.n	800a9e2 <_free_r+0x22>
 800aa34:	6820      	ldr	r0, [r4, #0]
 800aa36:	1821      	adds	r1, r4, r0
 800aa38:	428b      	cmp	r3, r1
 800aa3a:	bf04      	itt	eq
 800aa3c:	6819      	ldreq	r1, [r3, #0]
 800aa3e:	685b      	ldreq	r3, [r3, #4]
 800aa40:	6063      	str	r3, [r4, #4]
 800aa42:	bf04      	itt	eq
 800aa44:	1809      	addeq	r1, r1, r0
 800aa46:	6021      	streq	r1, [r4, #0]
 800aa48:	6054      	str	r4, [r2, #4]
 800aa4a:	e7ca      	b.n	800a9e2 <_free_r+0x22>
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	20002000 	.word	0x20002000

0800aa54 <_Balloc>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	69c6      	ldr	r6, [r0, #28]
 800aa58:	4604      	mov	r4, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	b976      	cbnz	r6, 800aa7c <_Balloc+0x28>
 800aa5e:	2010      	movs	r0, #16
 800aa60:	f7fe faa8 	bl	8008fb4 <malloc>
 800aa64:	4602      	mov	r2, r0
 800aa66:	61e0      	str	r0, [r4, #28]
 800aa68:	b920      	cbnz	r0, 800aa74 <_Balloc+0x20>
 800aa6a:	4b18      	ldr	r3, [pc, #96]	@ (800aacc <_Balloc+0x78>)
 800aa6c:	4818      	ldr	r0, [pc, #96]	@ (800aad0 <_Balloc+0x7c>)
 800aa6e:	216b      	movs	r1, #107	@ 0x6b
 800aa70:	f000 fc1e 	bl	800b2b0 <__assert_func>
 800aa74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa78:	6006      	str	r6, [r0, #0]
 800aa7a:	60c6      	str	r6, [r0, #12]
 800aa7c:	69e6      	ldr	r6, [r4, #28]
 800aa7e:	68f3      	ldr	r3, [r6, #12]
 800aa80:	b183      	cbz	r3, 800aaa4 <_Balloc+0x50>
 800aa82:	69e3      	ldr	r3, [r4, #28]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa8a:	b9b8      	cbnz	r0, 800aabc <_Balloc+0x68>
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	fa01 f605 	lsl.w	r6, r1, r5
 800aa92:	1d72      	adds	r2, r6, #5
 800aa94:	0092      	lsls	r2, r2, #2
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fc28 	bl	800b2ec <_calloc_r>
 800aa9c:	b160      	cbz	r0, 800aab8 <_Balloc+0x64>
 800aa9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaa2:	e00e      	b.n	800aac2 <_Balloc+0x6e>
 800aaa4:	2221      	movs	r2, #33	@ 0x21
 800aaa6:	2104      	movs	r1, #4
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fc1f 	bl	800b2ec <_calloc_r>
 800aaae:	69e3      	ldr	r3, [r4, #28]
 800aab0:	60f0      	str	r0, [r6, #12]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d1e4      	bne.n	800aa82 <_Balloc+0x2e>
 800aab8:	2000      	movs	r0, #0
 800aaba:	bd70      	pop	{r4, r5, r6, pc}
 800aabc:	6802      	ldr	r2, [r0, #0]
 800aabe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aac2:	2300      	movs	r3, #0
 800aac4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aac8:	e7f7      	b.n	800aaba <_Balloc+0x66>
 800aaca:	bf00      	nop
 800aacc:	0800bae9 	.word	0x0800bae9
 800aad0:	0800bb69 	.word	0x0800bb69

0800aad4 <_Bfree>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	69c6      	ldr	r6, [r0, #28]
 800aad8:	4605      	mov	r5, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	b976      	cbnz	r6, 800aafc <_Bfree+0x28>
 800aade:	2010      	movs	r0, #16
 800aae0:	f7fe fa68 	bl	8008fb4 <malloc>
 800aae4:	4602      	mov	r2, r0
 800aae6:	61e8      	str	r0, [r5, #28]
 800aae8:	b920      	cbnz	r0, 800aaf4 <_Bfree+0x20>
 800aaea:	4b09      	ldr	r3, [pc, #36]	@ (800ab10 <_Bfree+0x3c>)
 800aaec:	4809      	ldr	r0, [pc, #36]	@ (800ab14 <_Bfree+0x40>)
 800aaee:	218f      	movs	r1, #143	@ 0x8f
 800aaf0:	f000 fbde 	bl	800b2b0 <__assert_func>
 800aaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaf8:	6006      	str	r6, [r0, #0]
 800aafa:	60c6      	str	r6, [r0, #12]
 800aafc:	b13c      	cbz	r4, 800ab0e <_Bfree+0x3a>
 800aafe:	69eb      	ldr	r3, [r5, #28]
 800ab00:	6862      	ldr	r2, [r4, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab08:	6021      	str	r1, [r4, #0]
 800ab0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab0e:	bd70      	pop	{r4, r5, r6, pc}
 800ab10:	0800bae9 	.word	0x0800bae9
 800ab14:	0800bb69 	.word	0x0800bb69

0800ab18 <__multadd>:
 800ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1c:	690d      	ldr	r5, [r1, #16]
 800ab1e:	4607      	mov	r7, r0
 800ab20:	460c      	mov	r4, r1
 800ab22:	461e      	mov	r6, r3
 800ab24:	f101 0c14 	add.w	ip, r1, #20
 800ab28:	2000      	movs	r0, #0
 800ab2a:	f8dc 3000 	ldr.w	r3, [ip]
 800ab2e:	b299      	uxth	r1, r3
 800ab30:	fb02 6101 	mla	r1, r2, r1, r6
 800ab34:	0c1e      	lsrs	r6, r3, #16
 800ab36:	0c0b      	lsrs	r3, r1, #16
 800ab38:	fb02 3306 	mla	r3, r2, r6, r3
 800ab3c:	b289      	uxth	r1, r1
 800ab3e:	3001      	adds	r0, #1
 800ab40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab44:	4285      	cmp	r5, r0
 800ab46:	f84c 1b04 	str.w	r1, [ip], #4
 800ab4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab4e:	dcec      	bgt.n	800ab2a <__multadd+0x12>
 800ab50:	b30e      	cbz	r6, 800ab96 <__multadd+0x7e>
 800ab52:	68a3      	ldr	r3, [r4, #8]
 800ab54:	42ab      	cmp	r3, r5
 800ab56:	dc19      	bgt.n	800ab8c <__multadd+0x74>
 800ab58:	6861      	ldr	r1, [r4, #4]
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	3101      	adds	r1, #1
 800ab5e:	f7ff ff79 	bl	800aa54 <_Balloc>
 800ab62:	4680      	mov	r8, r0
 800ab64:	b928      	cbnz	r0, 800ab72 <__multadd+0x5a>
 800ab66:	4602      	mov	r2, r0
 800ab68:	4b0c      	ldr	r3, [pc, #48]	@ (800ab9c <__multadd+0x84>)
 800ab6a:	480d      	ldr	r0, [pc, #52]	@ (800aba0 <__multadd+0x88>)
 800ab6c:	21ba      	movs	r1, #186	@ 0xba
 800ab6e:	f000 fb9f 	bl	800b2b0 <__assert_func>
 800ab72:	6922      	ldr	r2, [r4, #16]
 800ab74:	3202      	adds	r2, #2
 800ab76:	f104 010c 	add.w	r1, r4, #12
 800ab7a:	0092      	lsls	r2, r2, #2
 800ab7c:	300c      	adds	r0, #12
 800ab7e:	f7ff f8c4 	bl	8009d0a <memcpy>
 800ab82:	4621      	mov	r1, r4
 800ab84:	4638      	mov	r0, r7
 800ab86:	f7ff ffa5 	bl	800aad4 <_Bfree>
 800ab8a:	4644      	mov	r4, r8
 800ab8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab90:	3501      	adds	r5, #1
 800ab92:	615e      	str	r6, [r3, #20]
 800ab94:	6125      	str	r5, [r4, #16]
 800ab96:	4620      	mov	r0, r4
 800ab98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab9c:	0800bb58 	.word	0x0800bb58
 800aba0:	0800bb69 	.word	0x0800bb69

0800aba4 <__hi0bits>:
 800aba4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aba8:	4603      	mov	r3, r0
 800abaa:	bf36      	itet	cc
 800abac:	0403      	lslcc	r3, r0, #16
 800abae:	2000      	movcs	r0, #0
 800abb0:	2010      	movcc	r0, #16
 800abb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abb6:	bf3c      	itt	cc
 800abb8:	021b      	lslcc	r3, r3, #8
 800abba:	3008      	addcc	r0, #8
 800abbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abc0:	bf3c      	itt	cc
 800abc2:	011b      	lslcc	r3, r3, #4
 800abc4:	3004      	addcc	r0, #4
 800abc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abca:	bf3c      	itt	cc
 800abcc:	009b      	lslcc	r3, r3, #2
 800abce:	3002      	addcc	r0, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db05      	blt.n	800abe0 <__hi0bits+0x3c>
 800abd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abd8:	f100 0001 	add.w	r0, r0, #1
 800abdc:	bf08      	it	eq
 800abde:	2020      	moveq	r0, #32
 800abe0:	4770      	bx	lr

0800abe2 <__lo0bits>:
 800abe2:	6803      	ldr	r3, [r0, #0]
 800abe4:	4602      	mov	r2, r0
 800abe6:	f013 0007 	ands.w	r0, r3, #7
 800abea:	d00b      	beq.n	800ac04 <__lo0bits+0x22>
 800abec:	07d9      	lsls	r1, r3, #31
 800abee:	d421      	bmi.n	800ac34 <__lo0bits+0x52>
 800abf0:	0798      	lsls	r0, r3, #30
 800abf2:	bf49      	itett	mi
 800abf4:	085b      	lsrmi	r3, r3, #1
 800abf6:	089b      	lsrpl	r3, r3, #2
 800abf8:	2001      	movmi	r0, #1
 800abfa:	6013      	strmi	r3, [r2, #0]
 800abfc:	bf5c      	itt	pl
 800abfe:	6013      	strpl	r3, [r2, #0]
 800ac00:	2002      	movpl	r0, #2
 800ac02:	4770      	bx	lr
 800ac04:	b299      	uxth	r1, r3
 800ac06:	b909      	cbnz	r1, 800ac0c <__lo0bits+0x2a>
 800ac08:	0c1b      	lsrs	r3, r3, #16
 800ac0a:	2010      	movs	r0, #16
 800ac0c:	b2d9      	uxtb	r1, r3
 800ac0e:	b909      	cbnz	r1, 800ac14 <__lo0bits+0x32>
 800ac10:	3008      	adds	r0, #8
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	0719      	lsls	r1, r3, #28
 800ac16:	bf04      	itt	eq
 800ac18:	091b      	lsreq	r3, r3, #4
 800ac1a:	3004      	addeq	r0, #4
 800ac1c:	0799      	lsls	r1, r3, #30
 800ac1e:	bf04      	itt	eq
 800ac20:	089b      	lsreq	r3, r3, #2
 800ac22:	3002      	addeq	r0, #2
 800ac24:	07d9      	lsls	r1, r3, #31
 800ac26:	d403      	bmi.n	800ac30 <__lo0bits+0x4e>
 800ac28:	085b      	lsrs	r3, r3, #1
 800ac2a:	f100 0001 	add.w	r0, r0, #1
 800ac2e:	d003      	beq.n	800ac38 <__lo0bits+0x56>
 800ac30:	6013      	str	r3, [r2, #0]
 800ac32:	4770      	bx	lr
 800ac34:	2000      	movs	r0, #0
 800ac36:	4770      	bx	lr
 800ac38:	2020      	movs	r0, #32
 800ac3a:	4770      	bx	lr

0800ac3c <__i2b>:
 800ac3c:	b510      	push	{r4, lr}
 800ac3e:	460c      	mov	r4, r1
 800ac40:	2101      	movs	r1, #1
 800ac42:	f7ff ff07 	bl	800aa54 <_Balloc>
 800ac46:	4602      	mov	r2, r0
 800ac48:	b928      	cbnz	r0, 800ac56 <__i2b+0x1a>
 800ac4a:	4b05      	ldr	r3, [pc, #20]	@ (800ac60 <__i2b+0x24>)
 800ac4c:	4805      	ldr	r0, [pc, #20]	@ (800ac64 <__i2b+0x28>)
 800ac4e:	f240 1145 	movw	r1, #325	@ 0x145
 800ac52:	f000 fb2d 	bl	800b2b0 <__assert_func>
 800ac56:	2301      	movs	r3, #1
 800ac58:	6144      	str	r4, [r0, #20]
 800ac5a:	6103      	str	r3, [r0, #16]
 800ac5c:	bd10      	pop	{r4, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800bb58 	.word	0x0800bb58
 800ac64:	0800bb69 	.word	0x0800bb69

0800ac68 <__multiply>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	690a      	ldr	r2, [r1, #16]
 800ac70:	6923      	ldr	r3, [r4, #16]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	bfa8      	it	ge
 800ac76:	4623      	movge	r3, r4
 800ac78:	460f      	mov	r7, r1
 800ac7a:	bfa4      	itt	ge
 800ac7c:	460c      	movge	r4, r1
 800ac7e:	461f      	movge	r7, r3
 800ac80:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac84:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ac88:	68a3      	ldr	r3, [r4, #8]
 800ac8a:	6861      	ldr	r1, [r4, #4]
 800ac8c:	eb0a 0609 	add.w	r6, sl, r9
 800ac90:	42b3      	cmp	r3, r6
 800ac92:	b085      	sub	sp, #20
 800ac94:	bfb8      	it	lt
 800ac96:	3101      	addlt	r1, #1
 800ac98:	f7ff fedc 	bl	800aa54 <_Balloc>
 800ac9c:	b930      	cbnz	r0, 800acac <__multiply+0x44>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	4b44      	ldr	r3, [pc, #272]	@ (800adb4 <__multiply+0x14c>)
 800aca2:	4845      	ldr	r0, [pc, #276]	@ (800adb8 <__multiply+0x150>)
 800aca4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aca8:	f000 fb02 	bl	800b2b0 <__assert_func>
 800acac:	f100 0514 	add.w	r5, r0, #20
 800acb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acb4:	462b      	mov	r3, r5
 800acb6:	2200      	movs	r2, #0
 800acb8:	4543      	cmp	r3, r8
 800acba:	d321      	bcc.n	800ad00 <__multiply+0x98>
 800acbc:	f107 0114 	add.w	r1, r7, #20
 800acc0:	f104 0214 	add.w	r2, r4, #20
 800acc4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800acc8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800accc:	9302      	str	r3, [sp, #8]
 800acce:	1b13      	subs	r3, r2, r4
 800acd0:	3b15      	subs	r3, #21
 800acd2:	f023 0303 	bic.w	r3, r3, #3
 800acd6:	3304      	adds	r3, #4
 800acd8:	f104 0715 	add.w	r7, r4, #21
 800acdc:	42ba      	cmp	r2, r7
 800acde:	bf38      	it	cc
 800ace0:	2304      	movcc	r3, #4
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	9103      	str	r1, [sp, #12]
 800ace8:	428b      	cmp	r3, r1
 800acea:	d80c      	bhi.n	800ad06 <__multiply+0x9e>
 800acec:	2e00      	cmp	r6, #0
 800acee:	dd03      	ble.n	800acf8 <__multiply+0x90>
 800acf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d05b      	beq.n	800adb0 <__multiply+0x148>
 800acf8:	6106      	str	r6, [r0, #16]
 800acfa:	b005      	add	sp, #20
 800acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad00:	f843 2b04 	str.w	r2, [r3], #4
 800ad04:	e7d8      	b.n	800acb8 <__multiply+0x50>
 800ad06:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad0a:	f1ba 0f00 	cmp.w	sl, #0
 800ad0e:	d024      	beq.n	800ad5a <__multiply+0xf2>
 800ad10:	f104 0e14 	add.w	lr, r4, #20
 800ad14:	46a9      	mov	r9, r5
 800ad16:	f04f 0c00 	mov.w	ip, #0
 800ad1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad1e:	f8d9 3000 	ldr.w	r3, [r9]
 800ad22:	fa1f fb87 	uxth.w	fp, r7
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ad30:	f8d9 7000 	ldr.w	r7, [r9]
 800ad34:	4463      	add	r3, ip
 800ad36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad3a:	fb0a c70b 	mla	r7, sl, fp, ip
 800ad3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad48:	4572      	cmp	r2, lr
 800ad4a:	f849 3b04 	str.w	r3, [r9], #4
 800ad4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad52:	d8e2      	bhi.n	800ad1a <__multiply+0xb2>
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	f845 c003 	str.w	ip, [r5, r3]
 800ad5a:	9b03      	ldr	r3, [sp, #12]
 800ad5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad60:	3104      	adds	r1, #4
 800ad62:	f1b9 0f00 	cmp.w	r9, #0
 800ad66:	d021      	beq.n	800adac <__multiply+0x144>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	f104 0c14 	add.w	ip, r4, #20
 800ad6e:	46ae      	mov	lr, r5
 800ad70:	f04f 0a00 	mov.w	sl, #0
 800ad74:	f8bc b000 	ldrh.w	fp, [ip]
 800ad78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad7c:	fb09 770b 	mla	r7, r9, fp, r7
 800ad80:	4457      	add	r7, sl
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad88:	f84e 3b04 	str.w	r3, [lr], #4
 800ad8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad94:	f8be 3000 	ldrh.w	r3, [lr]
 800ad98:	fb09 330a 	mla	r3, r9, sl, r3
 800ad9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ada0:	4562      	cmp	r2, ip
 800ada2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ada6:	d8e5      	bhi.n	800ad74 <__multiply+0x10c>
 800ada8:	9f01      	ldr	r7, [sp, #4]
 800adaa:	51eb      	str	r3, [r5, r7]
 800adac:	3504      	adds	r5, #4
 800adae:	e799      	b.n	800ace4 <__multiply+0x7c>
 800adb0:	3e01      	subs	r6, #1
 800adb2:	e79b      	b.n	800acec <__multiply+0x84>
 800adb4:	0800bb58 	.word	0x0800bb58
 800adb8:	0800bb69 	.word	0x0800bb69

0800adbc <__pow5mult>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	4615      	mov	r5, r2
 800adc2:	f012 0203 	ands.w	r2, r2, #3
 800adc6:	4607      	mov	r7, r0
 800adc8:	460e      	mov	r6, r1
 800adca:	d007      	beq.n	800addc <__pow5mult+0x20>
 800adcc:	4c25      	ldr	r4, [pc, #148]	@ (800ae64 <__pow5mult+0xa8>)
 800adce:	3a01      	subs	r2, #1
 800add0:	2300      	movs	r3, #0
 800add2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800add6:	f7ff fe9f 	bl	800ab18 <__multadd>
 800adda:	4606      	mov	r6, r0
 800addc:	10ad      	asrs	r5, r5, #2
 800adde:	d03d      	beq.n	800ae5c <__pow5mult+0xa0>
 800ade0:	69fc      	ldr	r4, [r7, #28]
 800ade2:	b97c      	cbnz	r4, 800ae04 <__pow5mult+0x48>
 800ade4:	2010      	movs	r0, #16
 800ade6:	f7fe f8e5 	bl	8008fb4 <malloc>
 800adea:	4602      	mov	r2, r0
 800adec:	61f8      	str	r0, [r7, #28]
 800adee:	b928      	cbnz	r0, 800adfc <__pow5mult+0x40>
 800adf0:	4b1d      	ldr	r3, [pc, #116]	@ (800ae68 <__pow5mult+0xac>)
 800adf2:	481e      	ldr	r0, [pc, #120]	@ (800ae6c <__pow5mult+0xb0>)
 800adf4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800adf8:	f000 fa5a 	bl	800b2b0 <__assert_func>
 800adfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae00:	6004      	str	r4, [r0, #0]
 800ae02:	60c4      	str	r4, [r0, #12]
 800ae04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae0c:	b94c      	cbnz	r4, 800ae22 <__pow5mult+0x66>
 800ae0e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7ff ff12 	bl	800ac3c <__i2b>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae1e:	4604      	mov	r4, r0
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	f04f 0900 	mov.w	r9, #0
 800ae26:	07eb      	lsls	r3, r5, #31
 800ae28:	d50a      	bpl.n	800ae40 <__pow5mult+0x84>
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	4638      	mov	r0, r7
 800ae30:	f7ff ff1a 	bl	800ac68 <__multiply>
 800ae34:	4631      	mov	r1, r6
 800ae36:	4680      	mov	r8, r0
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7ff fe4b 	bl	800aad4 <_Bfree>
 800ae3e:	4646      	mov	r6, r8
 800ae40:	106d      	asrs	r5, r5, #1
 800ae42:	d00b      	beq.n	800ae5c <__pow5mult+0xa0>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	b938      	cbnz	r0, 800ae58 <__pow5mult+0x9c>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f7ff ff0b 	bl	800ac68 <__multiply>
 800ae52:	6020      	str	r0, [r4, #0]
 800ae54:	f8c0 9000 	str.w	r9, [r0]
 800ae58:	4604      	mov	r4, r0
 800ae5a:	e7e4      	b.n	800ae26 <__pow5mult+0x6a>
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae62:	bf00      	nop
 800ae64:	0800bbc4 	.word	0x0800bbc4
 800ae68:	0800bae9 	.word	0x0800bae9
 800ae6c:	0800bb69 	.word	0x0800bb69

0800ae70 <__lshift>:
 800ae70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae74:	460c      	mov	r4, r1
 800ae76:	6849      	ldr	r1, [r1, #4]
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae7e:	68a3      	ldr	r3, [r4, #8]
 800ae80:	4607      	mov	r7, r0
 800ae82:	4691      	mov	r9, r2
 800ae84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae88:	f108 0601 	add.w	r6, r8, #1
 800ae8c:	42b3      	cmp	r3, r6
 800ae8e:	db0b      	blt.n	800aea8 <__lshift+0x38>
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7ff fddf 	bl	800aa54 <_Balloc>
 800ae96:	4605      	mov	r5, r0
 800ae98:	b948      	cbnz	r0, 800aeae <__lshift+0x3e>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	4b28      	ldr	r3, [pc, #160]	@ (800af40 <__lshift+0xd0>)
 800ae9e:	4829      	ldr	r0, [pc, #164]	@ (800af44 <__lshift+0xd4>)
 800aea0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aea4:	f000 fa04 	bl	800b2b0 <__assert_func>
 800aea8:	3101      	adds	r1, #1
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	e7ee      	b.n	800ae8c <__lshift+0x1c>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f100 0114 	add.w	r1, r0, #20
 800aeb4:	f100 0210 	add.w	r2, r0, #16
 800aeb8:	4618      	mov	r0, r3
 800aeba:	4553      	cmp	r3, sl
 800aebc:	db33      	blt.n	800af26 <__lshift+0xb6>
 800aebe:	6920      	ldr	r0, [r4, #16]
 800aec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aec4:	f104 0314 	add.w	r3, r4, #20
 800aec8:	f019 091f 	ands.w	r9, r9, #31
 800aecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aed4:	d02b      	beq.n	800af2e <__lshift+0xbe>
 800aed6:	f1c9 0e20 	rsb	lr, r9, #32
 800aeda:	468a      	mov	sl, r1
 800aedc:	2200      	movs	r2, #0
 800aede:	6818      	ldr	r0, [r3, #0]
 800aee0:	fa00 f009 	lsl.w	r0, r0, r9
 800aee4:	4310      	orrs	r0, r2
 800aee6:	f84a 0b04 	str.w	r0, [sl], #4
 800aeea:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeee:	459c      	cmp	ip, r3
 800aef0:	fa22 f20e 	lsr.w	r2, r2, lr
 800aef4:	d8f3      	bhi.n	800aede <__lshift+0x6e>
 800aef6:	ebac 0304 	sub.w	r3, ip, r4
 800aefa:	3b15      	subs	r3, #21
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	3304      	adds	r3, #4
 800af02:	f104 0015 	add.w	r0, r4, #21
 800af06:	4584      	cmp	ip, r0
 800af08:	bf38      	it	cc
 800af0a:	2304      	movcc	r3, #4
 800af0c:	50ca      	str	r2, [r1, r3]
 800af0e:	b10a      	cbz	r2, 800af14 <__lshift+0xa4>
 800af10:	f108 0602 	add.w	r6, r8, #2
 800af14:	3e01      	subs	r6, #1
 800af16:	4638      	mov	r0, r7
 800af18:	612e      	str	r6, [r5, #16]
 800af1a:	4621      	mov	r1, r4
 800af1c:	f7ff fdda 	bl	800aad4 <_Bfree>
 800af20:	4628      	mov	r0, r5
 800af22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af26:	f842 0f04 	str.w	r0, [r2, #4]!
 800af2a:	3301      	adds	r3, #1
 800af2c:	e7c5      	b.n	800aeba <__lshift+0x4a>
 800af2e:	3904      	subs	r1, #4
 800af30:	f853 2b04 	ldr.w	r2, [r3], #4
 800af34:	f841 2f04 	str.w	r2, [r1, #4]!
 800af38:	459c      	cmp	ip, r3
 800af3a:	d8f9      	bhi.n	800af30 <__lshift+0xc0>
 800af3c:	e7ea      	b.n	800af14 <__lshift+0xa4>
 800af3e:	bf00      	nop
 800af40:	0800bb58 	.word	0x0800bb58
 800af44:	0800bb69 	.word	0x0800bb69

0800af48 <__mcmp>:
 800af48:	690a      	ldr	r2, [r1, #16]
 800af4a:	4603      	mov	r3, r0
 800af4c:	6900      	ldr	r0, [r0, #16]
 800af4e:	1a80      	subs	r0, r0, r2
 800af50:	b530      	push	{r4, r5, lr}
 800af52:	d10e      	bne.n	800af72 <__mcmp+0x2a>
 800af54:	3314      	adds	r3, #20
 800af56:	3114      	adds	r1, #20
 800af58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af68:	4295      	cmp	r5, r2
 800af6a:	d003      	beq.n	800af74 <__mcmp+0x2c>
 800af6c:	d205      	bcs.n	800af7a <__mcmp+0x32>
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af72:	bd30      	pop	{r4, r5, pc}
 800af74:	42a3      	cmp	r3, r4
 800af76:	d3f3      	bcc.n	800af60 <__mcmp+0x18>
 800af78:	e7fb      	b.n	800af72 <__mcmp+0x2a>
 800af7a:	2001      	movs	r0, #1
 800af7c:	e7f9      	b.n	800af72 <__mcmp+0x2a>
	...

0800af80 <__mdiff>:
 800af80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	4689      	mov	r9, r1
 800af86:	4606      	mov	r6, r0
 800af88:	4611      	mov	r1, r2
 800af8a:	4648      	mov	r0, r9
 800af8c:	4614      	mov	r4, r2
 800af8e:	f7ff ffdb 	bl	800af48 <__mcmp>
 800af92:	1e05      	subs	r5, r0, #0
 800af94:	d112      	bne.n	800afbc <__mdiff+0x3c>
 800af96:	4629      	mov	r1, r5
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff fd5b 	bl	800aa54 <_Balloc>
 800af9e:	4602      	mov	r2, r0
 800afa0:	b928      	cbnz	r0, 800afae <__mdiff+0x2e>
 800afa2:	4b3f      	ldr	r3, [pc, #252]	@ (800b0a0 <__mdiff+0x120>)
 800afa4:	f240 2137 	movw	r1, #567	@ 0x237
 800afa8:	483e      	ldr	r0, [pc, #248]	@ (800b0a4 <__mdiff+0x124>)
 800afaa:	f000 f981 	bl	800b2b0 <__assert_func>
 800afae:	2301      	movs	r3, #1
 800afb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afb4:	4610      	mov	r0, r2
 800afb6:	b003      	add	sp, #12
 800afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	bfbc      	itt	lt
 800afbe:	464b      	movlt	r3, r9
 800afc0:	46a1      	movlt	r9, r4
 800afc2:	4630      	mov	r0, r6
 800afc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afc8:	bfba      	itte	lt
 800afca:	461c      	movlt	r4, r3
 800afcc:	2501      	movlt	r5, #1
 800afce:	2500      	movge	r5, #0
 800afd0:	f7ff fd40 	bl	800aa54 <_Balloc>
 800afd4:	4602      	mov	r2, r0
 800afd6:	b918      	cbnz	r0, 800afe0 <__mdiff+0x60>
 800afd8:	4b31      	ldr	r3, [pc, #196]	@ (800b0a0 <__mdiff+0x120>)
 800afda:	f240 2145 	movw	r1, #581	@ 0x245
 800afde:	e7e3      	b.n	800afa8 <__mdiff+0x28>
 800afe0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800afe4:	6926      	ldr	r6, [r4, #16]
 800afe6:	60c5      	str	r5, [r0, #12]
 800afe8:	f109 0310 	add.w	r3, r9, #16
 800afec:	f109 0514 	add.w	r5, r9, #20
 800aff0:	f104 0e14 	add.w	lr, r4, #20
 800aff4:	f100 0b14 	add.w	fp, r0, #20
 800aff8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800affc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	46d9      	mov	r9, fp
 800b004:	f04f 0c00 	mov.w	ip, #0
 800b008:	9b01      	ldr	r3, [sp, #4]
 800b00a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b00e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	fa1f f38a 	uxth.w	r3, sl
 800b018:	4619      	mov	r1, r3
 800b01a:	b283      	uxth	r3, r0
 800b01c:	1acb      	subs	r3, r1, r3
 800b01e:	0c00      	lsrs	r0, r0, #16
 800b020:	4463      	add	r3, ip
 800b022:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b026:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b030:	4576      	cmp	r6, lr
 800b032:	f849 3b04 	str.w	r3, [r9], #4
 800b036:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b03a:	d8e5      	bhi.n	800b008 <__mdiff+0x88>
 800b03c:	1b33      	subs	r3, r6, r4
 800b03e:	3b15      	subs	r3, #21
 800b040:	f023 0303 	bic.w	r3, r3, #3
 800b044:	3415      	adds	r4, #21
 800b046:	3304      	adds	r3, #4
 800b048:	42a6      	cmp	r6, r4
 800b04a:	bf38      	it	cc
 800b04c:	2304      	movcc	r3, #4
 800b04e:	441d      	add	r5, r3
 800b050:	445b      	add	r3, fp
 800b052:	461e      	mov	r6, r3
 800b054:	462c      	mov	r4, r5
 800b056:	4544      	cmp	r4, r8
 800b058:	d30e      	bcc.n	800b078 <__mdiff+0xf8>
 800b05a:	f108 0103 	add.w	r1, r8, #3
 800b05e:	1b49      	subs	r1, r1, r5
 800b060:	f021 0103 	bic.w	r1, r1, #3
 800b064:	3d03      	subs	r5, #3
 800b066:	45a8      	cmp	r8, r5
 800b068:	bf38      	it	cc
 800b06a:	2100      	movcc	r1, #0
 800b06c:	440b      	add	r3, r1
 800b06e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b072:	b191      	cbz	r1, 800b09a <__mdiff+0x11a>
 800b074:	6117      	str	r7, [r2, #16]
 800b076:	e79d      	b.n	800afb4 <__mdiff+0x34>
 800b078:	f854 1b04 	ldr.w	r1, [r4], #4
 800b07c:	46e6      	mov	lr, ip
 800b07e:	0c08      	lsrs	r0, r1, #16
 800b080:	fa1c fc81 	uxtah	ip, ip, r1
 800b084:	4471      	add	r1, lr
 800b086:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b08a:	b289      	uxth	r1, r1
 800b08c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b090:	f846 1b04 	str.w	r1, [r6], #4
 800b094:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b098:	e7dd      	b.n	800b056 <__mdiff+0xd6>
 800b09a:	3f01      	subs	r7, #1
 800b09c:	e7e7      	b.n	800b06e <__mdiff+0xee>
 800b09e:	bf00      	nop
 800b0a0:	0800bb58 	.word	0x0800bb58
 800b0a4:	0800bb69 	.word	0x0800bb69

0800b0a8 <__d2b>:
 800b0a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	ec59 8b10 	vmov	r8, r9, d0
 800b0b4:	4616      	mov	r6, r2
 800b0b6:	f7ff fccd 	bl	800aa54 <_Balloc>
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	b930      	cbnz	r0, 800b0cc <__d2b+0x24>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b23      	ldr	r3, [pc, #140]	@ (800b150 <__d2b+0xa8>)
 800b0c2:	4824      	ldr	r0, [pc, #144]	@ (800b154 <__d2b+0xac>)
 800b0c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b0c8:	f000 f8f2 	bl	800b2b0 <__assert_func>
 800b0cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b0d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0d4:	b10d      	cbz	r5, 800b0da <__d2b+0x32>
 800b0d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	f1b8 0300 	subs.w	r3, r8, #0
 800b0e0:	d023      	beq.n	800b12a <__d2b+0x82>
 800b0e2:	4668      	mov	r0, sp
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	f7ff fd7c 	bl	800abe2 <__lo0bits>
 800b0ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0ee:	b1d0      	cbz	r0, 800b126 <__d2b+0x7e>
 800b0f0:	f1c0 0320 	rsb	r3, r0, #32
 800b0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f8:	430b      	orrs	r3, r1
 800b0fa:	40c2      	lsrs	r2, r0
 800b0fc:	6163      	str	r3, [r4, #20]
 800b0fe:	9201      	str	r2, [sp, #4]
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	61a3      	str	r3, [r4, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	bf0c      	ite	eq
 800b108:	2201      	moveq	r2, #1
 800b10a:	2202      	movne	r2, #2
 800b10c:	6122      	str	r2, [r4, #16]
 800b10e:	b1a5      	cbz	r5, 800b13a <__d2b+0x92>
 800b110:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b114:	4405      	add	r5, r0
 800b116:	603d      	str	r5, [r7, #0]
 800b118:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b11c:	6030      	str	r0, [r6, #0]
 800b11e:	4620      	mov	r0, r4
 800b120:	b003      	add	sp, #12
 800b122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b126:	6161      	str	r1, [r4, #20]
 800b128:	e7ea      	b.n	800b100 <__d2b+0x58>
 800b12a:	a801      	add	r0, sp, #4
 800b12c:	f7ff fd59 	bl	800abe2 <__lo0bits>
 800b130:	9b01      	ldr	r3, [sp, #4]
 800b132:	6163      	str	r3, [r4, #20]
 800b134:	3020      	adds	r0, #32
 800b136:	2201      	movs	r2, #1
 800b138:	e7e8      	b.n	800b10c <__d2b+0x64>
 800b13a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b13e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b142:	6038      	str	r0, [r7, #0]
 800b144:	6918      	ldr	r0, [r3, #16]
 800b146:	f7ff fd2d 	bl	800aba4 <__hi0bits>
 800b14a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b14e:	e7e5      	b.n	800b11c <__d2b+0x74>
 800b150:	0800bb58 	.word	0x0800bb58
 800b154:	0800bb69 	.word	0x0800bb69

0800b158 <__sflush_r>:
 800b158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b160:	0716      	lsls	r6, r2, #28
 800b162:	4605      	mov	r5, r0
 800b164:	460c      	mov	r4, r1
 800b166:	d454      	bmi.n	800b212 <__sflush_r+0xba>
 800b168:	684b      	ldr	r3, [r1, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	dc02      	bgt.n	800b174 <__sflush_r+0x1c>
 800b16e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	dd48      	ble.n	800b206 <__sflush_r+0xae>
 800b174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b176:	2e00      	cmp	r6, #0
 800b178:	d045      	beq.n	800b206 <__sflush_r+0xae>
 800b17a:	2300      	movs	r3, #0
 800b17c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b180:	682f      	ldr	r7, [r5, #0]
 800b182:	6a21      	ldr	r1, [r4, #32]
 800b184:	602b      	str	r3, [r5, #0]
 800b186:	d030      	beq.n	800b1ea <__sflush_r+0x92>
 800b188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	0759      	lsls	r1, r3, #29
 800b18e:	d505      	bpl.n	800b19c <__sflush_r+0x44>
 800b190:	6863      	ldr	r3, [r4, #4]
 800b192:	1ad2      	subs	r2, r2, r3
 800b194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b196:	b10b      	cbz	r3, 800b19c <__sflush_r+0x44>
 800b198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b19a:	1ad2      	subs	r2, r2, r3
 800b19c:	2300      	movs	r3, #0
 800b19e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1a0:	6a21      	ldr	r1, [r4, #32]
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b0      	blx	r6
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	d106      	bne.n	800b1ba <__sflush_r+0x62>
 800b1ac:	6829      	ldr	r1, [r5, #0]
 800b1ae:	291d      	cmp	r1, #29
 800b1b0:	d82b      	bhi.n	800b20a <__sflush_r+0xb2>
 800b1b2:	4a2a      	ldr	r2, [pc, #168]	@ (800b25c <__sflush_r+0x104>)
 800b1b4:	410a      	asrs	r2, r1
 800b1b6:	07d6      	lsls	r6, r2, #31
 800b1b8:	d427      	bmi.n	800b20a <__sflush_r+0xb2>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	6062      	str	r2, [r4, #4]
 800b1be:	04d9      	lsls	r1, r3, #19
 800b1c0:	6922      	ldr	r2, [r4, #16]
 800b1c2:	6022      	str	r2, [r4, #0]
 800b1c4:	d504      	bpl.n	800b1d0 <__sflush_r+0x78>
 800b1c6:	1c42      	adds	r2, r0, #1
 800b1c8:	d101      	bne.n	800b1ce <__sflush_r+0x76>
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	b903      	cbnz	r3, 800b1d0 <__sflush_r+0x78>
 800b1ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800b1d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1d2:	602f      	str	r7, [r5, #0]
 800b1d4:	b1b9      	cbz	r1, 800b206 <__sflush_r+0xae>
 800b1d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1da:	4299      	cmp	r1, r3
 800b1dc:	d002      	beq.n	800b1e4 <__sflush_r+0x8c>
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7ff fbee 	bl	800a9c0 <_free_r>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1e8:	e00d      	b.n	800b206 <__sflush_r+0xae>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	47b0      	blx	r6
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	1c50      	adds	r0, r2, #1
 800b1f4:	d1c9      	bne.n	800b18a <__sflush_r+0x32>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d0c6      	beq.n	800b18a <__sflush_r+0x32>
 800b1fc:	2b1d      	cmp	r3, #29
 800b1fe:	d001      	beq.n	800b204 <__sflush_r+0xac>
 800b200:	2b16      	cmp	r3, #22
 800b202:	d11e      	bne.n	800b242 <__sflush_r+0xea>
 800b204:	602f      	str	r7, [r5, #0]
 800b206:	2000      	movs	r0, #0
 800b208:	e022      	b.n	800b250 <__sflush_r+0xf8>
 800b20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20e:	b21b      	sxth	r3, r3
 800b210:	e01b      	b.n	800b24a <__sflush_r+0xf2>
 800b212:	690f      	ldr	r7, [r1, #16]
 800b214:	2f00      	cmp	r7, #0
 800b216:	d0f6      	beq.n	800b206 <__sflush_r+0xae>
 800b218:	0793      	lsls	r3, r2, #30
 800b21a:	680e      	ldr	r6, [r1, #0]
 800b21c:	bf08      	it	eq
 800b21e:	694b      	ldreq	r3, [r1, #20]
 800b220:	600f      	str	r7, [r1, #0]
 800b222:	bf18      	it	ne
 800b224:	2300      	movne	r3, #0
 800b226:	eba6 0807 	sub.w	r8, r6, r7
 800b22a:	608b      	str	r3, [r1, #8]
 800b22c:	f1b8 0f00 	cmp.w	r8, #0
 800b230:	dde9      	ble.n	800b206 <__sflush_r+0xae>
 800b232:	6a21      	ldr	r1, [r4, #32]
 800b234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b236:	4643      	mov	r3, r8
 800b238:	463a      	mov	r2, r7
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b0      	blx	r6
 800b23e:	2800      	cmp	r0, #0
 800b240:	dc08      	bgt.n	800b254 <__sflush_r+0xfc>
 800b242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	4407      	add	r7, r0
 800b256:	eba8 0800 	sub.w	r8, r8, r0
 800b25a:	e7e7      	b.n	800b22c <__sflush_r+0xd4>
 800b25c:	dfbffffe 	.word	0xdfbffffe

0800b260 <_fflush_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	690b      	ldr	r3, [r1, #16]
 800b264:	4605      	mov	r5, r0
 800b266:	460c      	mov	r4, r1
 800b268:	b913      	cbnz	r3, 800b270 <_fflush_r+0x10>
 800b26a:	2500      	movs	r5, #0
 800b26c:	4628      	mov	r0, r5
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	b118      	cbz	r0, 800b27a <_fflush_r+0x1a>
 800b272:	6a03      	ldr	r3, [r0, #32]
 800b274:	b90b      	cbnz	r3, 800b27a <_fflush_r+0x1a>
 800b276:	f7fe fc3f 	bl	8009af8 <__sinit>
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0f3      	beq.n	800b26a <_fflush_r+0xa>
 800b282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b284:	07d0      	lsls	r0, r2, #31
 800b286:	d404      	bmi.n	800b292 <_fflush_r+0x32>
 800b288:	0599      	lsls	r1, r3, #22
 800b28a:	d402      	bmi.n	800b292 <_fflush_r+0x32>
 800b28c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b28e:	f7fe fd3a 	bl	8009d06 <__retarget_lock_acquire_recursive>
 800b292:	4628      	mov	r0, r5
 800b294:	4621      	mov	r1, r4
 800b296:	f7ff ff5f 	bl	800b158 <__sflush_r>
 800b29a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b29c:	07da      	lsls	r2, r3, #31
 800b29e:	4605      	mov	r5, r0
 800b2a0:	d4e4      	bmi.n	800b26c <_fflush_r+0xc>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	059b      	lsls	r3, r3, #22
 800b2a6:	d4e1      	bmi.n	800b26c <_fflush_r+0xc>
 800b2a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2aa:	f7fe fd2d 	bl	8009d08 <__retarget_lock_release_recursive>
 800b2ae:	e7dd      	b.n	800b26c <_fflush_r+0xc>

0800b2b0 <__assert_func>:
 800b2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2b2:	4614      	mov	r4, r2
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4b09      	ldr	r3, [pc, #36]	@ (800b2dc <__assert_func+0x2c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	68d8      	ldr	r0, [r3, #12]
 800b2be:	b954      	cbnz	r4, 800b2d6 <__assert_func+0x26>
 800b2c0:	4b07      	ldr	r3, [pc, #28]	@ (800b2e0 <__assert_func+0x30>)
 800b2c2:	461c      	mov	r4, r3
 800b2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2c8:	9100      	str	r1, [sp, #0]
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	4905      	ldr	r1, [pc, #20]	@ (800b2e4 <__assert_func+0x34>)
 800b2ce:	f000 f841 	bl	800b354 <fiprintf>
 800b2d2:	f000 f851 	bl	800b378 <abort>
 800b2d6:	4b04      	ldr	r3, [pc, #16]	@ (800b2e8 <__assert_func+0x38>)
 800b2d8:	e7f4      	b.n	800b2c4 <__assert_func+0x14>
 800b2da:	bf00      	nop
 800b2dc:	20000118 	.word	0x20000118
 800b2e0:	0800bd05 	.word	0x0800bd05
 800b2e4:	0800bcd7 	.word	0x0800bcd7
 800b2e8:	0800bcca 	.word	0x0800bcca

0800b2ec <_calloc_r>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	fba1 5402 	umull	r5, r4, r1, r2
 800b2f2:	b93c      	cbnz	r4, 800b304 <_calloc_r+0x18>
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	f7fd fe8f 	bl	8009018 <_malloc_r>
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	b928      	cbnz	r0, 800b30a <_calloc_r+0x1e>
 800b2fe:	2600      	movs	r6, #0
 800b300:	4630      	mov	r0, r6
 800b302:	bd70      	pop	{r4, r5, r6, pc}
 800b304:	220c      	movs	r2, #12
 800b306:	6002      	str	r2, [r0, #0]
 800b308:	e7f9      	b.n	800b2fe <_calloc_r+0x12>
 800b30a:	462a      	mov	r2, r5
 800b30c:	4621      	mov	r1, r4
 800b30e:	f7fe fc6c 	bl	8009bea <memset>
 800b312:	e7f5      	b.n	800b300 <_calloc_r+0x14>

0800b314 <__ascii_mbtowc>:
 800b314:	b082      	sub	sp, #8
 800b316:	b901      	cbnz	r1, 800b31a <__ascii_mbtowc+0x6>
 800b318:	a901      	add	r1, sp, #4
 800b31a:	b142      	cbz	r2, 800b32e <__ascii_mbtowc+0x1a>
 800b31c:	b14b      	cbz	r3, 800b332 <__ascii_mbtowc+0x1e>
 800b31e:	7813      	ldrb	r3, [r2, #0]
 800b320:	600b      	str	r3, [r1, #0]
 800b322:	7812      	ldrb	r2, [r2, #0]
 800b324:	1e10      	subs	r0, r2, #0
 800b326:	bf18      	it	ne
 800b328:	2001      	movne	r0, #1
 800b32a:	b002      	add	sp, #8
 800b32c:	4770      	bx	lr
 800b32e:	4610      	mov	r0, r2
 800b330:	e7fb      	b.n	800b32a <__ascii_mbtowc+0x16>
 800b332:	f06f 0001 	mvn.w	r0, #1
 800b336:	e7f8      	b.n	800b32a <__ascii_mbtowc+0x16>

0800b338 <__ascii_wctomb>:
 800b338:	4603      	mov	r3, r0
 800b33a:	4608      	mov	r0, r1
 800b33c:	b141      	cbz	r1, 800b350 <__ascii_wctomb+0x18>
 800b33e:	2aff      	cmp	r2, #255	@ 0xff
 800b340:	d904      	bls.n	800b34c <__ascii_wctomb+0x14>
 800b342:	228a      	movs	r2, #138	@ 0x8a
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b34a:	4770      	bx	lr
 800b34c:	700a      	strb	r2, [r1, #0]
 800b34e:	2001      	movs	r0, #1
 800b350:	4770      	bx	lr
	...

0800b354 <fiprintf>:
 800b354:	b40e      	push	{r1, r2, r3}
 800b356:	b503      	push	{r0, r1, lr}
 800b358:	4601      	mov	r1, r0
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	4805      	ldr	r0, [pc, #20]	@ (800b374 <fiprintf+0x20>)
 800b35e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b362:	6800      	ldr	r0, [r0, #0]
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	f000 f837 	bl	800b3d8 <_vfiprintf_r>
 800b36a:	b002      	add	sp, #8
 800b36c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b370:	b003      	add	sp, #12
 800b372:	4770      	bx	lr
 800b374:	20000118 	.word	0x20000118

0800b378 <abort>:
 800b378:	b508      	push	{r3, lr}
 800b37a:	2006      	movs	r0, #6
 800b37c:	f000 fa00 	bl	800b780 <raise>
 800b380:	2001      	movs	r0, #1
 800b382:	f7f6 fd29 	bl	8001dd8 <_exit>

0800b386 <__sfputc_r>:
 800b386:	6893      	ldr	r3, [r2, #8]
 800b388:	3b01      	subs	r3, #1
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	b410      	push	{r4}
 800b38e:	6093      	str	r3, [r2, #8]
 800b390:	da08      	bge.n	800b3a4 <__sfputc_r+0x1e>
 800b392:	6994      	ldr	r4, [r2, #24]
 800b394:	42a3      	cmp	r3, r4
 800b396:	db01      	blt.n	800b39c <__sfputc_r+0x16>
 800b398:	290a      	cmp	r1, #10
 800b39a:	d103      	bne.n	800b3a4 <__sfputc_r+0x1e>
 800b39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a0:	f000 b932 	b.w	800b608 <__swbuf_r>
 800b3a4:	6813      	ldr	r3, [r2, #0]
 800b3a6:	1c58      	adds	r0, r3, #1
 800b3a8:	6010      	str	r0, [r2, #0]
 800b3aa:	7019      	strb	r1, [r3, #0]
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <__sfputs_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	460f      	mov	r7, r1
 800b3ba:	4614      	mov	r4, r2
 800b3bc:	18d5      	adds	r5, r2, r3
 800b3be:	42ac      	cmp	r4, r5
 800b3c0:	d101      	bne.n	800b3c6 <__sfputs_r+0x12>
 800b3c2:	2000      	movs	r0, #0
 800b3c4:	e007      	b.n	800b3d6 <__sfputs_r+0x22>
 800b3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ca:	463a      	mov	r2, r7
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7ff ffda 	bl	800b386 <__sfputc_r>
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	d1f3      	bne.n	800b3be <__sfputs_r+0xa>
 800b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3d8 <_vfiprintf_r>:
 800b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	460d      	mov	r5, r1
 800b3de:	b09d      	sub	sp, #116	@ 0x74
 800b3e0:	4614      	mov	r4, r2
 800b3e2:	4698      	mov	r8, r3
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	b118      	cbz	r0, 800b3f0 <_vfiprintf_r+0x18>
 800b3e8:	6a03      	ldr	r3, [r0, #32]
 800b3ea:	b90b      	cbnz	r3, 800b3f0 <_vfiprintf_r+0x18>
 800b3ec:	f7fe fb84 	bl	8009af8 <__sinit>
 800b3f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3f2:	07d9      	lsls	r1, r3, #31
 800b3f4:	d405      	bmi.n	800b402 <_vfiprintf_r+0x2a>
 800b3f6:	89ab      	ldrh	r3, [r5, #12]
 800b3f8:	059a      	lsls	r2, r3, #22
 800b3fa:	d402      	bmi.n	800b402 <_vfiprintf_r+0x2a>
 800b3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3fe:	f7fe fc82 	bl	8009d06 <__retarget_lock_acquire_recursive>
 800b402:	89ab      	ldrh	r3, [r5, #12]
 800b404:	071b      	lsls	r3, r3, #28
 800b406:	d501      	bpl.n	800b40c <_vfiprintf_r+0x34>
 800b408:	692b      	ldr	r3, [r5, #16]
 800b40a:	b99b      	cbnz	r3, 800b434 <_vfiprintf_r+0x5c>
 800b40c:	4629      	mov	r1, r5
 800b40e:	4630      	mov	r0, r6
 800b410:	f000 f938 	bl	800b684 <__swsetup_r>
 800b414:	b170      	cbz	r0, 800b434 <_vfiprintf_r+0x5c>
 800b416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b418:	07dc      	lsls	r4, r3, #31
 800b41a:	d504      	bpl.n	800b426 <_vfiprintf_r+0x4e>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b420:	b01d      	add	sp, #116	@ 0x74
 800b422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b426:	89ab      	ldrh	r3, [r5, #12]
 800b428:	0598      	lsls	r0, r3, #22
 800b42a:	d4f7      	bmi.n	800b41c <_vfiprintf_r+0x44>
 800b42c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b42e:	f7fe fc6b 	bl	8009d08 <__retarget_lock_release_recursive>
 800b432:	e7f3      	b.n	800b41c <_vfiprintf_r+0x44>
 800b434:	2300      	movs	r3, #0
 800b436:	9309      	str	r3, [sp, #36]	@ 0x24
 800b438:	2320      	movs	r3, #32
 800b43a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b442:	2330      	movs	r3, #48	@ 0x30
 800b444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5f4 <_vfiprintf_r+0x21c>
 800b448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b44c:	f04f 0901 	mov.w	r9, #1
 800b450:	4623      	mov	r3, r4
 800b452:	469a      	mov	sl, r3
 800b454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b458:	b10a      	cbz	r2, 800b45e <_vfiprintf_r+0x86>
 800b45a:	2a25      	cmp	r2, #37	@ 0x25
 800b45c:	d1f9      	bne.n	800b452 <_vfiprintf_r+0x7a>
 800b45e:	ebba 0b04 	subs.w	fp, sl, r4
 800b462:	d00b      	beq.n	800b47c <_vfiprintf_r+0xa4>
 800b464:	465b      	mov	r3, fp
 800b466:	4622      	mov	r2, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	4630      	mov	r0, r6
 800b46c:	f7ff ffa2 	bl	800b3b4 <__sfputs_r>
 800b470:	3001      	adds	r0, #1
 800b472:	f000 80a7 	beq.w	800b5c4 <_vfiprintf_r+0x1ec>
 800b476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b478:	445a      	add	r2, fp
 800b47a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b47c:	f89a 3000 	ldrb.w	r3, [sl]
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 809f 	beq.w	800b5c4 <_vfiprintf_r+0x1ec>
 800b486:	2300      	movs	r3, #0
 800b488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b490:	f10a 0a01 	add.w	sl, sl, #1
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	9307      	str	r3, [sp, #28]
 800b498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b49c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b49e:	4654      	mov	r4, sl
 800b4a0:	2205      	movs	r2, #5
 800b4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a6:	4853      	ldr	r0, [pc, #332]	@ (800b5f4 <_vfiprintf_r+0x21c>)
 800b4a8:	f7f4 fe9a 	bl	80001e0 <memchr>
 800b4ac:	9a04      	ldr	r2, [sp, #16]
 800b4ae:	b9d8      	cbnz	r0, 800b4e8 <_vfiprintf_r+0x110>
 800b4b0:	06d1      	lsls	r1, r2, #27
 800b4b2:	bf44      	itt	mi
 800b4b4:	2320      	movmi	r3, #32
 800b4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4ba:	0713      	lsls	r3, r2, #28
 800b4bc:	bf44      	itt	mi
 800b4be:	232b      	movmi	r3, #43	@ 0x2b
 800b4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ca:	d015      	beq.n	800b4f8 <_vfiprintf_r+0x120>
 800b4cc:	9a07      	ldr	r2, [sp, #28]
 800b4ce:	4654      	mov	r4, sl
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	f04f 0c0a 	mov.w	ip, #10
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4dc:	3b30      	subs	r3, #48	@ 0x30
 800b4de:	2b09      	cmp	r3, #9
 800b4e0:	d94b      	bls.n	800b57a <_vfiprintf_r+0x1a2>
 800b4e2:	b1b0      	cbz	r0, 800b512 <_vfiprintf_r+0x13a>
 800b4e4:	9207      	str	r2, [sp, #28]
 800b4e6:	e014      	b.n	800b512 <_vfiprintf_r+0x13a>
 800b4e8:	eba0 0308 	sub.w	r3, r0, r8
 800b4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	9304      	str	r3, [sp, #16]
 800b4f4:	46a2      	mov	sl, r4
 800b4f6:	e7d2      	b.n	800b49e <_vfiprintf_r+0xc6>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	1d19      	adds	r1, r3, #4
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	9103      	str	r1, [sp, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	bfbb      	ittet	lt
 800b504:	425b      	neglt	r3, r3
 800b506:	f042 0202 	orrlt.w	r2, r2, #2
 800b50a:	9307      	strge	r3, [sp, #28]
 800b50c:	9307      	strlt	r3, [sp, #28]
 800b50e:	bfb8      	it	lt
 800b510:	9204      	strlt	r2, [sp, #16]
 800b512:	7823      	ldrb	r3, [r4, #0]
 800b514:	2b2e      	cmp	r3, #46	@ 0x2e
 800b516:	d10a      	bne.n	800b52e <_vfiprintf_r+0x156>
 800b518:	7863      	ldrb	r3, [r4, #1]
 800b51a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b51c:	d132      	bne.n	800b584 <_vfiprintf_r+0x1ac>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	1d1a      	adds	r2, r3, #4
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	9203      	str	r2, [sp, #12]
 800b526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b52a:	3402      	adds	r4, #2
 800b52c:	9305      	str	r3, [sp, #20]
 800b52e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b604 <_vfiprintf_r+0x22c>
 800b532:	7821      	ldrb	r1, [r4, #0]
 800b534:	2203      	movs	r2, #3
 800b536:	4650      	mov	r0, sl
 800b538:	f7f4 fe52 	bl	80001e0 <memchr>
 800b53c:	b138      	cbz	r0, 800b54e <_vfiprintf_r+0x176>
 800b53e:	9b04      	ldr	r3, [sp, #16]
 800b540:	eba0 000a 	sub.w	r0, r0, sl
 800b544:	2240      	movs	r2, #64	@ 0x40
 800b546:	4082      	lsls	r2, r0
 800b548:	4313      	orrs	r3, r2
 800b54a:	3401      	adds	r4, #1
 800b54c:	9304      	str	r3, [sp, #16]
 800b54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b552:	4829      	ldr	r0, [pc, #164]	@ (800b5f8 <_vfiprintf_r+0x220>)
 800b554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b558:	2206      	movs	r2, #6
 800b55a:	f7f4 fe41 	bl	80001e0 <memchr>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d03f      	beq.n	800b5e2 <_vfiprintf_r+0x20a>
 800b562:	4b26      	ldr	r3, [pc, #152]	@ (800b5fc <_vfiprintf_r+0x224>)
 800b564:	bb1b      	cbnz	r3, 800b5ae <_vfiprintf_r+0x1d6>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	3307      	adds	r3, #7
 800b56a:	f023 0307 	bic.w	r3, r3, #7
 800b56e:	3308      	adds	r3, #8
 800b570:	9303      	str	r3, [sp, #12]
 800b572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b574:	443b      	add	r3, r7
 800b576:	9309      	str	r3, [sp, #36]	@ 0x24
 800b578:	e76a      	b.n	800b450 <_vfiprintf_r+0x78>
 800b57a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b57e:	460c      	mov	r4, r1
 800b580:	2001      	movs	r0, #1
 800b582:	e7a8      	b.n	800b4d6 <_vfiprintf_r+0xfe>
 800b584:	2300      	movs	r3, #0
 800b586:	3401      	adds	r4, #1
 800b588:	9305      	str	r3, [sp, #20]
 800b58a:	4619      	mov	r1, r3
 800b58c:	f04f 0c0a 	mov.w	ip, #10
 800b590:	4620      	mov	r0, r4
 800b592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b596:	3a30      	subs	r2, #48	@ 0x30
 800b598:	2a09      	cmp	r2, #9
 800b59a:	d903      	bls.n	800b5a4 <_vfiprintf_r+0x1cc>
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0c6      	beq.n	800b52e <_vfiprintf_r+0x156>
 800b5a0:	9105      	str	r1, [sp, #20]
 800b5a2:	e7c4      	b.n	800b52e <_vfiprintf_r+0x156>
 800b5a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e7f0      	b.n	800b590 <_vfiprintf_r+0x1b8>
 800b5ae:	ab03      	add	r3, sp, #12
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	4b12      	ldr	r3, [pc, #72]	@ (800b600 <_vfiprintf_r+0x228>)
 800b5b6:	a904      	add	r1, sp, #16
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7fd fe59 	bl	8009270 <_printf_float>
 800b5be:	4607      	mov	r7, r0
 800b5c0:	1c78      	adds	r0, r7, #1
 800b5c2:	d1d6      	bne.n	800b572 <_vfiprintf_r+0x19a>
 800b5c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5c6:	07d9      	lsls	r1, r3, #31
 800b5c8:	d405      	bmi.n	800b5d6 <_vfiprintf_r+0x1fe>
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	059a      	lsls	r2, r3, #22
 800b5ce:	d402      	bmi.n	800b5d6 <_vfiprintf_r+0x1fe>
 800b5d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5d2:	f7fe fb99 	bl	8009d08 <__retarget_lock_release_recursive>
 800b5d6:	89ab      	ldrh	r3, [r5, #12]
 800b5d8:	065b      	lsls	r3, r3, #25
 800b5da:	f53f af1f 	bmi.w	800b41c <_vfiprintf_r+0x44>
 800b5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5e0:	e71e      	b.n	800b420 <_vfiprintf_r+0x48>
 800b5e2:	ab03      	add	r3, sp, #12
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	462a      	mov	r2, r5
 800b5e8:	4b05      	ldr	r3, [pc, #20]	@ (800b600 <_vfiprintf_r+0x228>)
 800b5ea:	a904      	add	r1, sp, #16
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7fe f8d7 	bl	80097a0 <_printf_i>
 800b5f2:	e7e4      	b.n	800b5be <_vfiprintf_r+0x1e6>
 800b5f4:	0800be07 	.word	0x0800be07
 800b5f8:	0800be11 	.word	0x0800be11
 800b5fc:	08009271 	.word	0x08009271
 800b600:	0800b3b5 	.word	0x0800b3b5
 800b604:	0800be0d 	.word	0x0800be0d

0800b608 <__swbuf_r>:
 800b608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60a:	460e      	mov	r6, r1
 800b60c:	4614      	mov	r4, r2
 800b60e:	4605      	mov	r5, r0
 800b610:	b118      	cbz	r0, 800b61a <__swbuf_r+0x12>
 800b612:	6a03      	ldr	r3, [r0, #32]
 800b614:	b90b      	cbnz	r3, 800b61a <__swbuf_r+0x12>
 800b616:	f7fe fa6f 	bl	8009af8 <__sinit>
 800b61a:	69a3      	ldr	r3, [r4, #24]
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	071a      	lsls	r2, r3, #28
 800b622:	d501      	bpl.n	800b628 <__swbuf_r+0x20>
 800b624:	6923      	ldr	r3, [r4, #16]
 800b626:	b943      	cbnz	r3, 800b63a <__swbuf_r+0x32>
 800b628:	4621      	mov	r1, r4
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 f82a 	bl	800b684 <__swsetup_r>
 800b630:	b118      	cbz	r0, 800b63a <__swbuf_r+0x32>
 800b632:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b636:	4638      	mov	r0, r7
 800b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	6922      	ldr	r2, [r4, #16]
 800b63e:	1a98      	subs	r0, r3, r2
 800b640:	6963      	ldr	r3, [r4, #20]
 800b642:	b2f6      	uxtb	r6, r6
 800b644:	4283      	cmp	r3, r0
 800b646:	4637      	mov	r7, r6
 800b648:	dc05      	bgt.n	800b656 <__swbuf_r+0x4e>
 800b64a:	4621      	mov	r1, r4
 800b64c:	4628      	mov	r0, r5
 800b64e:	f7ff fe07 	bl	800b260 <_fflush_r>
 800b652:	2800      	cmp	r0, #0
 800b654:	d1ed      	bne.n	800b632 <__swbuf_r+0x2a>
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	3b01      	subs	r3, #1
 800b65a:	60a3      	str	r3, [r4, #8]
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	6022      	str	r2, [r4, #0]
 800b662:	701e      	strb	r6, [r3, #0]
 800b664:	6962      	ldr	r2, [r4, #20]
 800b666:	1c43      	adds	r3, r0, #1
 800b668:	429a      	cmp	r2, r3
 800b66a:	d004      	beq.n	800b676 <__swbuf_r+0x6e>
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	07db      	lsls	r3, r3, #31
 800b670:	d5e1      	bpl.n	800b636 <__swbuf_r+0x2e>
 800b672:	2e0a      	cmp	r6, #10
 800b674:	d1df      	bne.n	800b636 <__swbuf_r+0x2e>
 800b676:	4621      	mov	r1, r4
 800b678:	4628      	mov	r0, r5
 800b67a:	f7ff fdf1 	bl	800b260 <_fflush_r>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d0d9      	beq.n	800b636 <__swbuf_r+0x2e>
 800b682:	e7d6      	b.n	800b632 <__swbuf_r+0x2a>

0800b684 <__swsetup_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4b29      	ldr	r3, [pc, #164]	@ (800b72c <__swsetup_r+0xa8>)
 800b688:	4605      	mov	r5, r0
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	460c      	mov	r4, r1
 800b68e:	b118      	cbz	r0, 800b698 <__swsetup_r+0x14>
 800b690:	6a03      	ldr	r3, [r0, #32]
 800b692:	b90b      	cbnz	r3, 800b698 <__swsetup_r+0x14>
 800b694:	f7fe fa30 	bl	8009af8 <__sinit>
 800b698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69c:	0719      	lsls	r1, r3, #28
 800b69e:	d422      	bmi.n	800b6e6 <__swsetup_r+0x62>
 800b6a0:	06da      	lsls	r2, r3, #27
 800b6a2:	d407      	bmi.n	800b6b4 <__swsetup_r+0x30>
 800b6a4:	2209      	movs	r2, #9
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ac:	81a3      	strh	r3, [r4, #12]
 800b6ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6b2:	e033      	b.n	800b71c <__swsetup_r+0x98>
 800b6b4:	0758      	lsls	r0, r3, #29
 800b6b6:	d512      	bpl.n	800b6de <__swsetup_r+0x5a>
 800b6b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6ba:	b141      	cbz	r1, 800b6ce <__swsetup_r+0x4a>
 800b6bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6c0:	4299      	cmp	r1, r3
 800b6c2:	d002      	beq.n	800b6ca <__swsetup_r+0x46>
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f7ff f97b 	bl	800a9c0 <_free_r>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	6063      	str	r3, [r4, #4]
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	89a3      	ldrh	r3, [r4, #12]
 800b6e0:	f043 0308 	orr.w	r3, r3, #8
 800b6e4:	81a3      	strh	r3, [r4, #12]
 800b6e6:	6923      	ldr	r3, [r4, #16]
 800b6e8:	b94b      	cbnz	r3, 800b6fe <__swsetup_r+0x7a>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6f4:	d003      	beq.n	800b6fe <__swsetup_r+0x7a>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f000 f883 	bl	800b804 <__smakebuf_r>
 800b6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b702:	f013 0201 	ands.w	r2, r3, #1
 800b706:	d00a      	beq.n	800b71e <__swsetup_r+0x9a>
 800b708:	2200      	movs	r2, #0
 800b70a:	60a2      	str	r2, [r4, #8]
 800b70c:	6962      	ldr	r2, [r4, #20]
 800b70e:	4252      	negs	r2, r2
 800b710:	61a2      	str	r2, [r4, #24]
 800b712:	6922      	ldr	r2, [r4, #16]
 800b714:	b942      	cbnz	r2, 800b728 <__swsetup_r+0xa4>
 800b716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b71a:	d1c5      	bne.n	800b6a8 <__swsetup_r+0x24>
 800b71c:	bd38      	pop	{r3, r4, r5, pc}
 800b71e:	0799      	lsls	r1, r3, #30
 800b720:	bf58      	it	pl
 800b722:	6962      	ldrpl	r2, [r4, #20]
 800b724:	60a2      	str	r2, [r4, #8]
 800b726:	e7f4      	b.n	800b712 <__swsetup_r+0x8e>
 800b728:	2000      	movs	r0, #0
 800b72a:	e7f7      	b.n	800b71c <__swsetup_r+0x98>
 800b72c:	20000118 	.word	0x20000118

0800b730 <_raise_r>:
 800b730:	291f      	cmp	r1, #31
 800b732:	b538      	push	{r3, r4, r5, lr}
 800b734:	4605      	mov	r5, r0
 800b736:	460c      	mov	r4, r1
 800b738:	d904      	bls.n	800b744 <_raise_r+0x14>
 800b73a:	2316      	movs	r3, #22
 800b73c:	6003      	str	r3, [r0, #0]
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b746:	b112      	cbz	r2, 800b74e <_raise_r+0x1e>
 800b748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b74c:	b94b      	cbnz	r3, 800b762 <_raise_r+0x32>
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 f830 	bl	800b7b4 <_getpid_r>
 800b754:	4622      	mov	r2, r4
 800b756:	4601      	mov	r1, r0
 800b758:	4628      	mov	r0, r5
 800b75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b75e:	f000 b817 	b.w	800b790 <_kill_r>
 800b762:	2b01      	cmp	r3, #1
 800b764:	d00a      	beq.n	800b77c <_raise_r+0x4c>
 800b766:	1c59      	adds	r1, r3, #1
 800b768:	d103      	bne.n	800b772 <_raise_r+0x42>
 800b76a:	2316      	movs	r3, #22
 800b76c:	6003      	str	r3, [r0, #0]
 800b76e:	2001      	movs	r0, #1
 800b770:	e7e7      	b.n	800b742 <_raise_r+0x12>
 800b772:	2100      	movs	r1, #0
 800b774:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b778:	4620      	mov	r0, r4
 800b77a:	4798      	blx	r3
 800b77c:	2000      	movs	r0, #0
 800b77e:	e7e0      	b.n	800b742 <_raise_r+0x12>

0800b780 <raise>:
 800b780:	4b02      	ldr	r3, [pc, #8]	@ (800b78c <raise+0xc>)
 800b782:	4601      	mov	r1, r0
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	f7ff bfd3 	b.w	800b730 <_raise_r>
 800b78a:	bf00      	nop
 800b78c:	20000118 	.word	0x20000118

0800b790 <_kill_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4d07      	ldr	r5, [pc, #28]	@ (800b7b0 <_kill_r+0x20>)
 800b794:	2300      	movs	r3, #0
 800b796:	4604      	mov	r4, r0
 800b798:	4608      	mov	r0, r1
 800b79a:	4611      	mov	r1, r2
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	f7f6 fb0b 	bl	8001db8 <_kill>
 800b7a2:	1c43      	adds	r3, r0, #1
 800b7a4:	d102      	bne.n	800b7ac <_kill_r+0x1c>
 800b7a6:	682b      	ldr	r3, [r5, #0]
 800b7a8:	b103      	cbz	r3, 800b7ac <_kill_r+0x1c>
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20002140 	.word	0x20002140

0800b7b4 <_getpid_r>:
 800b7b4:	f7f6 baf8 	b.w	8001da8 <_getpid>

0800b7b8 <__swhatbuf_r>:
 800b7b8:	b570      	push	{r4, r5, r6, lr}
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	b096      	sub	sp, #88	@ 0x58
 800b7c4:	4615      	mov	r5, r2
 800b7c6:	461e      	mov	r6, r3
 800b7c8:	da0d      	bge.n	800b7e6 <__swhatbuf_r+0x2e>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7d0:	f04f 0100 	mov.w	r1, #0
 800b7d4:	bf14      	ite	ne
 800b7d6:	2340      	movne	r3, #64	@ 0x40
 800b7d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7dc:	2000      	movs	r0, #0
 800b7de:	6031      	str	r1, [r6, #0]
 800b7e0:	602b      	str	r3, [r5, #0]
 800b7e2:	b016      	add	sp, #88	@ 0x58
 800b7e4:	bd70      	pop	{r4, r5, r6, pc}
 800b7e6:	466a      	mov	r2, sp
 800b7e8:	f000 f848 	bl	800b87c <_fstat_r>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dbec      	blt.n	800b7ca <__swhatbuf_r+0x12>
 800b7f0:	9901      	ldr	r1, [sp, #4]
 800b7f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7fa:	4259      	negs	r1, r3
 800b7fc:	4159      	adcs	r1, r3
 800b7fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b802:	e7eb      	b.n	800b7dc <__swhatbuf_r+0x24>

0800b804 <__smakebuf_r>:
 800b804:	898b      	ldrh	r3, [r1, #12]
 800b806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b808:	079d      	lsls	r5, r3, #30
 800b80a:	4606      	mov	r6, r0
 800b80c:	460c      	mov	r4, r1
 800b80e:	d507      	bpl.n	800b820 <__smakebuf_r+0x1c>
 800b810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	6123      	str	r3, [r4, #16]
 800b818:	2301      	movs	r3, #1
 800b81a:	6163      	str	r3, [r4, #20]
 800b81c:	b003      	add	sp, #12
 800b81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b820:	ab01      	add	r3, sp, #4
 800b822:	466a      	mov	r2, sp
 800b824:	f7ff ffc8 	bl	800b7b8 <__swhatbuf_r>
 800b828:	9f00      	ldr	r7, [sp, #0]
 800b82a:	4605      	mov	r5, r0
 800b82c:	4639      	mov	r1, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	f7fd fbf2 	bl	8009018 <_malloc_r>
 800b834:	b948      	cbnz	r0, 800b84a <__smakebuf_r+0x46>
 800b836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b83a:	059a      	lsls	r2, r3, #22
 800b83c:	d4ee      	bmi.n	800b81c <__smakebuf_r+0x18>
 800b83e:	f023 0303 	bic.w	r3, r3, #3
 800b842:	f043 0302 	orr.w	r3, r3, #2
 800b846:	81a3      	strh	r3, [r4, #12]
 800b848:	e7e2      	b.n	800b810 <__smakebuf_r+0xc>
 800b84a:	89a3      	ldrh	r3, [r4, #12]
 800b84c:	6020      	str	r0, [r4, #0]
 800b84e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	9b01      	ldr	r3, [sp, #4]
 800b856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b85a:	b15b      	cbz	r3, 800b874 <__smakebuf_r+0x70>
 800b85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b860:	4630      	mov	r0, r6
 800b862:	f000 f81d 	bl	800b8a0 <_isatty_r>
 800b866:	b128      	cbz	r0, 800b874 <__smakebuf_r+0x70>
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	f043 0301 	orr.w	r3, r3, #1
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	89a3      	ldrh	r3, [r4, #12]
 800b876:	431d      	orrs	r5, r3
 800b878:	81a5      	strh	r5, [r4, #12]
 800b87a:	e7cf      	b.n	800b81c <__smakebuf_r+0x18>

0800b87c <_fstat_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d07      	ldr	r5, [pc, #28]	@ (800b89c <_fstat_r+0x20>)
 800b880:	2300      	movs	r3, #0
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	4611      	mov	r1, r2
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	f7f6 faf5 	bl	8001e78 <_fstat>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	d102      	bne.n	800b898 <_fstat_r+0x1c>
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	b103      	cbz	r3, 800b898 <_fstat_r+0x1c>
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	bd38      	pop	{r3, r4, r5, pc}
 800b89a:	bf00      	nop
 800b89c:	20002140 	.word	0x20002140

0800b8a0 <_isatty_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d06      	ldr	r5, [pc, #24]	@ (800b8bc <_isatty_r+0x1c>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	602b      	str	r3, [r5, #0]
 800b8ac:	f7f6 faf4 	bl	8001e98 <_isatty>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_isatty_r+0x1a>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_isatty_r+0x1a>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	20002140 	.word	0x20002140

0800b8c0 <_init>:
 800b8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c2:	bf00      	nop
 800b8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c6:	bc08      	pop	{r3}
 800b8c8:	469e      	mov	lr, r3
 800b8ca:	4770      	bx	lr

0800b8cc <_fini>:
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ce:	bf00      	nop
 800b8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d2:	bc08      	pop	{r3}
 800b8d4:	469e      	mov	lr, r3
 800b8d6:	4770      	bx	lr
