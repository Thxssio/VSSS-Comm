
stm32_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800b1d0  0800b1d0  0000c1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d8  0800b5d8  0000d2cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d8  0800b5d8  0000c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e0  0800b5e0  0000d2cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e0  0800b5e0  0000c5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b5e4  0800b5e4  0000c5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800b5e8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db4  200002cc  0800b8b4  0000d2cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002080  0800b8b4  0000e080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a4  00000000  00000000  0000d2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000326f  00000000  00000000  0001dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00020e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ade  00000000  00000000  00021cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193fe  00000000  00000000  00022796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c21  00000000  00000000  0003bb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b288  00000000  00000000  0004d7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a84  00000000  00000000  000d8a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000dd504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b1b8 	.word	0x0800b1b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800b1b8 	.word	0x0800b1b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <process_USB_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void process_USB_data(void) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    if (recData != NULL && recDataSize > 0) {
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <process_USB_data+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d028      	beq.n	8000f06 <process_USB_data+0x5e>
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <process_USB_data+0x68>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d024      	beq.n	8000f06 <process_USB_data+0x5e>
        CDC_Transmit_FS(recData, recDataSize);
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <process_USB_data+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a13      	ldr	r2, [pc, #76]	@ (8000f10 <process_USB_data+0x68>)
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f007 f89d 	bl	8008008 <CDC_Transmit_FS>
        if (NRF24_Transmit(recData) == 1) {
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <process_USB_data+0x64>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fafc 	bl	80014d0 <NRF24_Transmit>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d104      	bne.n	8000ee8 <process_USB_data+0x40>
            CDC_Transmit_FS((uint8_t *)"nRF24: TX OK\n", 13);
 8000ede:	210d      	movs	r1, #13
 8000ee0:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <process_USB_data+0x6c>)
 8000ee2:	f007 f891 	bl	8008008 <CDC_Transmit_FS>
 8000ee6:	e003      	b.n	8000ef0 <process_USB_data+0x48>
        } else {
            CDC_Transmit_FS((uint8_t *)"nRF24: TX FAIL\n", 15);
 8000ee8:	210f      	movs	r1, #15
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <process_USB_data+0x70>)
 8000eec:	f007 f88c 	bl	8008008 <CDC_Transmit_FS>
        }

        free(recData);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <process_USB_data+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f007 fce1 	bl	80088bc <free>
        recData = NULL;
 8000efa:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <process_USB_data+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
        recDataSize = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <process_USB_data+0x68>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
    }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000340 	.word	0x20000340
 8000f10:	20000344 	.word	0x20000344
 8000f14:	0800b1d0 	.word	0x0800b1d0
 8000f18:	0800b1e0 	.word	0x0800b1e0

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fcc0 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f818 	bl	8000f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 f8b4 	bl	8001094 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f2c:	f000 f87c 	bl	8001028 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000f30:	f006 ff6c 	bl	8007e0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000f34:	f000 fa7e 	bl	8001434 <NRF24_Init>
  NRF24_TxMode(TxAddress, 76);
 8000f38:	214c      	movs	r1, #76	@ 0x4c
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <main+0x34>)
 8000f3c:	f000 faa1 	bl	8001482 <NRF24_TxMode>
  CDC_Transmit_FS((uint8_t *)"USB Ready\n", 10);
 8000f40:	210a      	movs	r1, #10
 8000f42:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <main+0x38>)
 8000f44:	f007 f860 	bl	8008008 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_USB_data();
 8000f48:	f7ff ffae 	bl	8000ea8 <process_USB_data>
 8000f4c:	e7fc      	b.n	8000f48 <main+0x2c>
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000
 8000f54:	0800b1f0 	.word	0x0800b1f0

08000f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b094      	sub	sp, #80	@ 0x50
 8000f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5e:	f107 0320 	add.w	r3, r7, #32
 8000f62:	2230      	movs	r2, #48	@ 0x30
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 fabb 	bl	80094e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	4b27      	ldr	r3, [pc, #156]	@ (8001020 <SystemClock_Config+0xc8>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f84:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <SystemClock_Config+0xc8>)
 8000f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8c:	4b24      	ldr	r3, [pc, #144]	@ (8001020 <SystemClock_Config+0xc8>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <SystemClock_Config+0xcc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a20      	ldr	r2, [pc, #128]	@ (8001024 <SystemClock_Config+0xcc>)
 8000fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <SystemClock_Config+0xcc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbc:	2310      	movs	r3, #16
 8000fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000fcc:	2364      	movs	r3, #100	@ 0x64
 8000fce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 f9f9 	bl	80033d4 <HAL_RCC_OscConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe8:	f000 f8ca 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2103      	movs	r1, #3
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fc5b 	bl	80038c4 <HAL_RCC_ClockConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001014:	f000 f8b4 	bl	8001180 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3750      	adds	r7, #80	@ 0x50
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_SPI1_Init+0x64>)
 800102e:	4a18      	ldr	r2, [pc, #96]	@ (8001090 <MX_SPI1_Init+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_SPI1_Init+0x64>)
 8001034:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_SPI1_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <MX_SPI1_Init+0x64>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001046:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_SPI1_Init+0x64>)
 8001054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001058:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_SPI1_Init+0x64>)
 800105c:	2218      	movs	r2, #24
 800105e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <MX_SPI1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_SPI1_Init+0x64>)
 8001074:	220a      	movs	r2, #10
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_SPI1_Init+0x64>)
 800107a:	f002 fddb 	bl	8003c34 <HAL_SPI_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001084:	f000 f87c 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002e8 	.word	0x200002e8
 8001090:	40013000 	.word	0x40013000

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a29      	ldr	r2, [pc, #164]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b23      	ldr	r3, [pc, #140]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <MX_GPIO_Init+0xe0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <MX_GPIO_Init+0xe0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a1b      	ldr	r2, [pc, #108]	@ (8001174 <MX_GPIO_Init+0xe0>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <MX_GPIO_Init+0xe0>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001120:	4815      	ldr	r0, [pc, #84]	@ (8001178 <MX_GPIO_Init+0xe4>)
 8001122:	f000 feeb 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2103      	movs	r1, #3
 800112a:	4814      	ldr	r0, [pc, #80]	@ (800117c <MX_GPIO_Init+0xe8>)
 800112c:	f000 fee6 	bl	8001efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001130:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	@ (8001178 <MX_GPIO_Init+0xe4>)
 800114a:	f000 fd53 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 800114e:	2303      	movs	r3, #3
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <MX_GPIO_Init+0xe8>)
 8001166:	f000 fd45 	bl	8001bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	@ 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020400 	.word	0x40020400

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <Error_Handler+0x8>

0800118c <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_0


void CS_Select (void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2101      	movs	r1, #1
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <CS_Select+0x14>)
 8001196:	f000 feb1 	bl	8001efc <HAL_GPIO_WritePin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40020400 	.word	0x40020400

080011a4 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2101      	movs	r1, #1
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <CS_UnSelect+0x14>)
 80011ae:	f000 fea5 	bl	8001efc <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400

080011bc <CE_Enable>:


void CE_Enable (void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2102      	movs	r1, #2
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <CE_Enable+0x14>)
 80011c6:	f000 fe99 	bl	8001efc <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020400 	.word	0x40020400

080011d4 <CE_Disable>:

void CE_Disable (void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2102      	movs	r1, #2
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <CE_Disable+0x14>)
 80011de:	f000 fe8d 	bl	8001efc <HAL_GPIO_WritePin>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020400 	.word	0x40020400

080011ec <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f043 0320 	orr.w	r3, r3, #32
 8001202:	b2db      	uxtb	r3, r3
 8001204:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800120a:	f7ff ffbf 	bl	800118c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800120e:	f107 010c 	add.w	r1, r7, #12
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	2202      	movs	r2, #2
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <nrf24_WriteReg+0x40>)
 800121a:	f002 fd94 	bl	8003d46 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800121e:	f7ff ffc1 	bl	80011a4 <CS_UnSelect>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200002e8 	.word	0x200002e8

08001230 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	b2db      	uxtb	r3, r3
 8001246:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001248:	f7ff ffa0 	bl	800118c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800124c:	f107 0114 	add.w	r1, r7, #20
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	2201      	movs	r2, #1
 8001254:	4808      	ldr	r0, [pc, #32]	@ (8001278 <nrf24_WriteRegMulti+0x48>)
 8001256:	f002 fd76 	bl	8003d46 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b29a      	uxth	r2, r3
 800125e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	4804      	ldr	r0, [pc, #16]	@ (8001278 <nrf24_WriteRegMulti+0x48>)
 8001266:	f002 fd6e 	bl	8003d46 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800126a:	f7ff ff9b 	bl	80011a4 <CS_UnSelect>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200002e8 	.word	0x200002e8

0800127c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800128a:	f7ff ff7f 	bl	800118c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800128e:	1df9      	adds	r1, r7, #7
 8001290:	2364      	movs	r3, #100	@ 0x64
 8001292:	2201      	movs	r2, #1
 8001294:	4808      	ldr	r0, [pc, #32]	@ (80012b8 <nrf24_ReadReg+0x3c>)
 8001296:	f002 fd56 	bl	8003d46 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800129a:	f107 010f 	add.w	r1, r7, #15
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	2201      	movs	r2, #1
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <nrf24_ReadReg+0x3c>)
 80012a4:	f002 fe93 	bl	8003fce <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80012a8:	f7ff ff7c 	bl	80011a4 <CS_UnSelect>

	return data;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002e8 	.word	0x200002e8

080012bc <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80012c6:	f7ff ff61 	bl	800118c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80012ca:	1df9      	adds	r1, r7, #7
 80012cc:	2364      	movs	r3, #100	@ 0x64
 80012ce:	2201      	movs	r2, #1
 80012d0:	4804      	ldr	r0, [pc, #16]	@ (80012e4 <nrfsendCmd+0x28>)
 80012d2:	f002 fd38 	bl	8003d46 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80012d6:	f7ff ff65 	bl	80011a4 <CS_UnSelect>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002e8 	.word	0x200002e8

080012e8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	d104      	bne.n	8001302 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2007      	movs	r0, #7
 80012fc:	f7ff ff76 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001300:	e090      	b.n	8001424 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b17      	cmp	r3, #23
 8001306:	d104      	bne.n	8001312 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff ff6e 	bl	80011ec <nrf24_WriteReg>
}
 8001310:	e088      	b.n	8001424 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001312:	2108      	movs	r1, #8
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ff69 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800131a:	213f      	movs	r1, #63	@ 0x3f
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff ff65 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001322:	2103      	movs	r1, #3
 8001324:	2002      	movs	r0, #2
 8001326:	f7ff ff61 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800132a:	2103      	movs	r1, #3
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff ff5d 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8001332:	2103      	movs	r1, #3
 8001334:	2004      	movs	r0, #4
 8001336:	f7ff ff59 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800133a:	2102      	movs	r1, #2
 800133c:	2005      	movs	r0, #5
 800133e:	f7ff ff55 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001342:	210e      	movs	r1, #14
 8001344:	2006      	movs	r0, #6
 8001346:	f7ff ff51 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800134a:	2100      	movs	r1, #0
 800134c:	2007      	movs	r0, #7
 800134e:	f7ff ff4d 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001352:	2100      	movs	r1, #0
 8001354:	2008      	movs	r0, #8
 8001356:	f7ff ff49 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800135a:	2100      	movs	r1, #0
 800135c:	2009      	movs	r0, #9
 800135e:	f7ff ff45 	bl	80011ec <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001362:	4a32      	ldr	r2, [pc, #200]	@ (800142c <nrf24_reset+0x144>)
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800136c:	6018      	str	r0, [r3, #0]
 800136e:	3304      	adds	r3, #4
 8001370:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	2205      	movs	r2, #5
 8001378:	4619      	mov	r1, r3
 800137a:	200a      	movs	r0, #10
 800137c:	f7ff ff58 	bl	8001230 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001380:	4a2b      	ldr	r2, [pc, #172]	@ (8001430 <nrf24_reset+0x148>)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138a:	6018      	str	r0, [r3, #0]
 800138c:	3304      	adds	r3, #4
 800138e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2205      	movs	r2, #5
 8001396:	4619      	mov	r1, r3
 8001398:	200b      	movs	r0, #11
 800139a:	f7ff ff49 	bl	8001230 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800139e:	21c3      	movs	r1, #195	@ 0xc3
 80013a0:	200c      	movs	r0, #12
 80013a2:	f7ff ff23 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80013a6:	21c4      	movs	r1, #196	@ 0xc4
 80013a8:	200d      	movs	r0, #13
 80013aa:	f7ff ff1f 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80013ae:	21c5      	movs	r1, #197	@ 0xc5
 80013b0:	200e      	movs	r0, #14
 80013b2:	f7ff ff1b 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80013b6:	21c6      	movs	r1, #198	@ 0xc6
 80013b8:	200f      	movs	r0, #15
 80013ba:	f7ff ff17 	bl	80011ec <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80013be:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <nrf24_reset+0x144>)
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c8:	6018      	str	r0, [r3, #0]
 80013ca:	3304      	adds	r3, #4
 80013cc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2205      	movs	r2, #5
 80013d4:	4619      	mov	r1, r3
 80013d6:	2010      	movs	r0, #16
 80013d8:	f7ff ff2a 	bl	8001230 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80013dc:	2100      	movs	r1, #0
 80013de:	2011      	movs	r0, #17
 80013e0:	f7ff ff04 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80013e4:	2100      	movs	r1, #0
 80013e6:	2012      	movs	r0, #18
 80013e8:	f7ff ff00 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	2013      	movs	r0, #19
 80013f0:	f7ff fefc 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2014      	movs	r0, #20
 80013f8:	f7ff fef8 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2015      	movs	r0, #21
 8001400:	f7ff fef4 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001404:	2100      	movs	r1, #0
 8001406:	2016      	movs	r0, #22
 8001408:	f7ff fef0 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800140c:	2111      	movs	r1, #17
 800140e:	2017      	movs	r0, #23
 8001410:	f7ff feec 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001414:	2100      	movs	r1, #0
 8001416:	201c      	movs	r0, #28
 8001418:	f7ff fee8 	bl	80011ec <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800141c:	2100      	movs	r1, #0
 800141e:	201d      	movs	r0, #29
 8001420:	f7ff fee4 	bl	80011ec <nrf24_WriteReg>
}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	0800b1fc 	.word	0x0800b1fc
 8001430:	0800b204 	.word	0x0800b204

08001434 <NRF24_Init>:




void NRF24_Init (void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001438:	f7ff fecc 	bl	80011d4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff ff53 	bl	80012e8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001442:	2100      	movs	r1, #0
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff fed1 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800144a:	2100      	movs	r1, #0
 800144c:	2001      	movs	r0, #1
 800144e:	f7ff fecd 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001452:	2100      	movs	r1, #0
 8001454:	2002      	movs	r0, #2
 8001456:	f7ff fec9 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800145a:	2103      	movs	r1, #3
 800145c:	2003      	movs	r0, #3
 800145e:	f7ff fec5 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8001462:	2100      	movs	r1, #0
 8001464:	2004      	movs	r0, #4
 8001466:	f7ff fec1 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800146a:	2100      	movs	r1, #0
 800146c:	2005      	movs	r0, #5
 800146e:	f7ff febd 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8001472:	210e      	movs	r1, #14
 8001474:	2006      	movs	r0, #6
 8001476:	f7ff feb9 	bl	80011ec <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800147a:	f7ff fe9f 	bl	80011bc <CE_Enable>

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}

08001482 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800148e:	f7ff fea1 	bl	80011d4 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	2005      	movs	r0, #5
 8001498:	f7ff fea8 	bl	80011ec <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800149c:	2205      	movs	r2, #5
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	2010      	movs	r0, #16
 80014a2:	f7ff fec5 	bl	8001230 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fee8 	bl	800127c <nrf24_ReadReg>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	73fb      	strb	r3, [r7, #15]
//	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	4619      	mov	r1, r3
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff fe95 	bl	80011ec <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80014c2:	f7ff fe7b 	bl	80011bc <CE_Enable>
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 80014dc:	f7ff fe56 	bl	800118c <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80014e0:	23a0      	movs	r3, #160	@ 0xa0
 80014e2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80014e4:	f107 010e 	add.w	r1, r7, #14
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	2201      	movs	r2, #1
 80014ec:	4816      	ldr	r0, [pc, #88]	@ (8001548 <NRF24_Transmit+0x78>)
 80014ee:	f002 fc2a 	bl	8003d46 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80014f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014f6:	2220      	movs	r2, #32
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4813      	ldr	r0, [pc, #76]	@ (8001548 <NRF24_Transmit+0x78>)
 80014fc:	f002 fc23 	bl	8003d46 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8001500:	f7ff fe50 	bl	80011a4 <CS_UnSelect>

	HAL_Delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f000 fa3f 	bl	8001988 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 800150a:	2017      	movs	r0, #23
 800150c:	f7ff feb6 	bl	800127c <nrf24_ReadReg>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00f      	beq.n	800153e <NRF24_Transmit+0x6e>
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 8001528:	23e1      	movs	r3, #225	@ 0xe1
 800152a:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fec4 	bl	80012bc <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8001534:	2017      	movs	r0, #23
 8001536:	f7ff fed7 	bl	80012e8 <nrf24_reset>

		return 1;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <NRF24_Transmit+0x70>
	}

	return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002e8 	.word	0x200002e8

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_MspInit+0x4c>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a0f      	ldr	r2, [pc, #60]	@ (8001598 <HAL_MspInit+0x4c>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_MspInit+0x4c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <HAL_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <HAL_MspInit+0x4c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	@ (8001620 <HAL_SPI_MspInit+0x84>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d12b      	bne.n	8001616 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_SPI_MspInit+0x88>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <HAL_SPI_MspInit+0x88>)
 80015c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_SPI_MspInit+0x88>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_SPI_MspInit+0x88>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a10      	ldr	r2, [pc, #64]	@ (8001624 <HAL_SPI_MspInit+0x88>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <HAL_SPI_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23e0      	movs	r3, #224	@ 0xe0
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001606:	2305      	movs	r3, #5
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_SPI_MspInit+0x8c>)
 8001612:	f000 faef 	bl	8001bf4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40013000 	.word	0x40013000
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 f961 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <OTG_FS_IRQHandler+0x10>)
 8001692:	f000 fd90 	bl	80021b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20001830 	.word	0x20001830

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ba:	f007 ff75 	bl	80095a8 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <_exit+0x12>

080016e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e00a      	b.n	800170e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f8:	f3af 8000 	nop.w
 80016fc:	4601      	mov	r1, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf0      	blt.n	80016f8 <_read+0x12>
  }

  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e009      	b.n	8001746 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	dbf1      	blt.n	8001732 <_write+0x12>
  }
  return len;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_close>:

int _close(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001780:	605a      	str	r2, [r3, #4]
  return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_isatty>:

int _isatty(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f007 feda 	bl	80095a8 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20020000 	.word	0x20020000
 8001820:	00000400 	.word	0x00000400
 8001824:	20000348 	.word	0x20000348
 8001828:	20002080 	.word	0x20002080

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001854:	f7ff ffea 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f007 fe99 	bl	80095b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff fb4b 	bl	8000f1c <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001894:	0800b5e8 	.word	0x0800b5e8
  ldr r2, =_sbss
 8001898:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800189c:	20002080 	.word	0x20002080

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f94f 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fe38 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f967 	bl	8001bda <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001924:	f000 f92f 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000008 	.word	0x20000008
 8001940:	20000010 	.word	0x20000010
 8001944:	2000000c 	.word	0x2000000c

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000010 	.word	0x20000010
 800196c:	2000034c 	.word	0x2000034c

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	2000034c 	.word	0x2000034c

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000010 	.word	0x20000010

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b50:	f7ff ff8e 	bl	8001a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff29 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff3e 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff8e 	bl	8001ac4 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5d 	bl	8001a70 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff31 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	@ 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	e159      	b.n	8001ec4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8148 	bne.w	8001ebe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d005      	beq.n	8001c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d130      	bne.n	8001ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2203      	movs	r2, #3
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0201 	and.w	r2, r3, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d017      	beq.n	8001ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d123      	bne.n	8001d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	08da      	lsrs	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3208      	adds	r2, #8
 8001cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	69b9      	ldr	r1, [r7, #24]
 8001d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a2 	beq.w	8001ebe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b57      	ldr	r3, [pc, #348]	@ (8001edc <HAL_GPIO_Init+0x2e8>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a56      	ldr	r2, [pc, #344]	@ (8001edc <HAL_GPIO_Init+0x2e8>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8a:	4b54      	ldr	r3, [pc, #336]	@ (8001edc <HAL_GPIO_Init+0x2e8>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d96:	4a52      	ldr	r2, [pc, #328]	@ (8001ee0 <HAL_GPIO_Init+0x2ec>)
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a49      	ldr	r2, [pc, #292]	@ (8001ee4 <HAL_GPIO_Init+0x2f0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x202>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a48      	ldr	r2, [pc, #288]	@ (8001ee8 <HAL_GPIO_Init+0x2f4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x1fe>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a47      	ldr	r2, [pc, #284]	@ (8001eec <HAL_GPIO_Init+0x2f8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x1fa>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a46      	ldr	r2, [pc, #280]	@ (8001ef0 <HAL_GPIO_Init+0x2fc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x1f6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a45      	ldr	r2, [pc, #276]	@ (8001ef4 <HAL_GPIO_Init+0x300>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x1f2>
 8001de2:	2304      	movs	r3, #4
 8001de4:	e008      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x204>
 8001df6:	2300      	movs	r3, #0
 8001df8:	69fa      	ldr	r2, [r7, #28]
 8001dfa:	f002 0203 	and.w	r2, r2, #3
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <HAL_GPIO_Init+0x2ec>)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b38      	ldr	r3, [pc, #224]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a24      	ldr	r2, [pc, #144]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef8 <HAL_GPIO_Init+0x304>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	2b0f      	cmp	r3, #15
 8001ec8:	f67f aea2 	bls.w	8001c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3724      	adds	r7, #36	@ 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40013800 	.word	0x40013800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020c00 	.word	0x40020c00
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f0c:	787b      	ldrb	r3, [r7, #1]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f12:	887a      	ldrh	r2, [r7, #2]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f18:	e003      	b.n	8001f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	041a      	lsls	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	619a      	str	r2, [r3, #24]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af02      	add	r7, sp, #8
 8001f34:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e101      	b.n	8002144 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f006 f99c 	bl	8008298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2203      	movs	r2, #3
 8001f64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f6e:	d102      	bne.n	8001f76 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fd43 	bl	8004a06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7c1a      	ldrb	r2, [r3, #16]
 8001f88:	f88d 2000 	strb.w	r2, [sp]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	f002 fc22 	bl	80047d8 <USB_CoreInit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0ce      	b.n	8002144 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fd3b 	bl	8004a28 <USB_SetCurrentMode>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0bf      	b.n	8002144 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e04a      	b.n	8002060 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3315      	adds	r3, #21
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3314      	adds	r3, #20
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	332e      	adds	r3, #46	@ 0x2e
 8002006:	4602      	mov	r2, r0
 8002008:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3318      	adds	r3, #24
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	331c      	adds	r3, #28
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3320      	adds	r3, #32
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3324      	adds	r3, #36	@ 0x24
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	3301      	adds	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	429a      	cmp	r2, r3
 8002068:	d3af      	bcc.n	8001fca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e044      	b.n	80020fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3301      	adds	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	429a      	cmp	r2, r3
 8002102:	d3b5      	bcc.n	8002070 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7c1a      	ldrb	r2, [r3, #16]
 800210c:	f88d 2000 	strb.w	r2, [sp]
 8002110:	3304      	adds	r3, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	f002 fcd4 	bl	8004ac0 <USB_DevInit>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00c      	b.n	8002144 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fd1e 	bl	8005b7e <USB_DevDisconnect>

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_PCD_Start+0x1c>
 8002164:	2302      	movs	r3, #2
 8002166:	e022      	b.n	80021ae <HAL_PCD_Start+0x62>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002188:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fc25 	bl	80049e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fccc 	bl	8005b3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b08d      	sub	sp, #52	@ 0x34
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 fd8a 	bl	8005ce6 <USB_GetMode>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f040 848c 	bne.w	8002af2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fcee 	bl	8005bc0 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8482 	beq.w	8002af0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 fcdb 	bl	8005bc0 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b02      	cmp	r3, #2
 8002212:	d107      	bne.n	8002224 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f002 0202 	and.w	r2, r2, #2
 8002222:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fcc9 	bl	8005bc0 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b10      	cmp	r3, #16
 8002236:	d161      	bne.n	80022fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0210 	bic.w	r2, r2, #16
 8002246:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f003 020f 	and.w	r2, r3, #15
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	0c5b      	lsrs	r3, r3, #17
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	2b02      	cmp	r3, #2
 8002272:	d124      	bne.n	80022be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d035      	beq.n	80022ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800228a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	6a38      	ldr	r0, [r7, #32]
 8002294:	f003 fb00 	bl	8005898 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a4:	441a      	add	r2, r3
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b6:	441a      	add	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	615a      	str	r2, [r3, #20]
 80022bc:	e016      	b.n	80022ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	0c5b      	lsrs	r3, r3, #17
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	2b06      	cmp	r3, #6
 80022c8:	d110      	bne.n	80022ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022d0:	2208      	movs	r2, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	6a38      	ldr	r0, [r7, #32]
 80022d6:	f003 fadf 	bl	8005898 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e6:	441a      	add	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699a      	ldr	r2, [r3, #24]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0210 	orr.w	r2, r2, #16
 80022fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fc5d 	bl	8005bc0 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800230c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002310:	f040 80a7 	bne.w	8002462 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f003 fc62 	bl	8005be6 <USB_ReadDevAllOutEpInterrupt>
 8002322:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002324:	e099      	b.n	800245a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 808e 	beq.w	800244e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fc86 	bl	8005c4e <USB_ReadDevOutEPInterrupt>
 8002342:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	4413      	add	r3, r2
 8002356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800235a:	461a      	mov	r2, r3
 800235c:	2301      	movs	r3, #1
 800235e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fea4 	bl	80030b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00c      	beq.n	800238c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800237e:	461a      	mov	r2, r3
 8002380:	2308      	movs	r3, #8
 8002382:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002384:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 ff7a 	bl	8003280 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a2:	461a      	mov	r2, r3
 80023a4:	2310      	movs	r3, #16
 80023a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d030      	beq.n	8002414 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ba:	2b80      	cmp	r3, #128	@ 0x80
 80023bc:	d109      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	78db      	ldrb	r3, [r3, #3]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2200      	movs	r2, #0
 80023f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f006 f847 	bl	8008490 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240e:	461a      	mov	r2, r3
 8002410:	2302      	movs	r3, #2
 8002412:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	4413      	add	r3, r2
 8002426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800242a:	461a      	mov	r2, r3
 800242c:	2320      	movs	r3, #32
 800242e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002446:	461a      	mov	r2, r3
 8002448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800244c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	3301      	adds	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	f47f af62 	bne.w	8002326 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f003 fbaa 	bl	8005bc0 <USB_ReadInterrupts>
 800246c:	4603      	mov	r3, r0
 800246e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002472:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002476:	f040 80db 	bne.w	8002630 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 fbcb 	bl	8005c1a <USB_ReadDevAllInEpInterrupt>
 8002484:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800248a:	e0cd      	b.n	8002628 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80c2 	beq.w	800261c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fbf1 	bl	8005c8a <USB_ReadDevInEPInterrupt>
 80024a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d057      	beq.n	8002564 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	2201      	movs	r2, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69f9      	ldr	r1, [r7, #28]
 80024d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024d4:	4013      	ands	r3, r2
 80024d6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80024e4:	461a      	mov	r2, r3
 80024e6:	2301      	movs	r3, #1
 80024e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	799b      	ldrb	r3, [r3, #6]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d132      	bne.n	8002558 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	4613      	mov	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3320      	adds	r3, #32
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4403      	add	r3, r0
 8002512:	331c      	adds	r3, #28
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4419      	add	r1, r3
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4403      	add	r3, r0
 8002526:	3320      	adds	r3, #32
 8002528:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d113      	bne.n	8002558 <HAL_PCD_IRQHandler+0x3a2>
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3324      	adds	r3, #36	@ 0x24
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002550:	461a      	mov	r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	f003 fbf8 	bl	8005d48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f005 ff1b 	bl	800839a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800257a:	461a      	mov	r2, r3
 800257c:	2308      	movs	r3, #8
 800257e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002596:	461a      	mov	r2, r3
 8002598:	2310      	movs	r3, #16
 800259a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025b2:	461a      	mov	r2, r3
 80025b4:	2340      	movs	r3, #64	@ 0x40
 80025b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d023      	beq.n	800260a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025c4:	6a38      	ldr	r0, [r7, #32]
 80025c6:	f002 fbdf 	bl	8004d88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025cc:	4613      	mov	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3310      	adds	r3, #16
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	3304      	adds	r3, #4
 80025dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	78db      	ldrb	r3, [r3, #3]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d108      	bne.n	80025f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2200      	movs	r2, #0
 80025ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f005 ff5e 	bl	80084b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002604:	461a      	mov	r2, r3
 8002606:	2302      	movs	r3, #2
 8002608:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002614:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fcbd 	bl	8002f96 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	3301      	adds	r3, #1
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	f47f af2e 	bne.w	800248c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 fac3 	bl	8005bc0 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002644:	d122      	bne.n	800268c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002660:	2b01      	cmp	r3, #1
 8002662:	d108      	bne.n	8002676 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800266c:	2100      	movs	r1, #0
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fea4 	bl	80033bc <HAL_PCDEx_LPM_Callback>
 8002674:	e002      	b.n	800267c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f005 fefc 	bl	8008474 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695a      	ldr	r2, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800268a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 fa95 	bl	8005bc0 <USB_ReadInterrupts>
 8002696:	4603      	mov	r3, r0
 8002698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026a0:	d112      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d102      	bne.n	80026b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f005 feb8 	bl	8008428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026c6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fa77 	bl	8005bc0 <USB_ReadInterrupts>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026dc:	f040 80b7 	bne.w	800284e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2110      	movs	r1, #16
 80026fa:	4618      	mov	r0, r3
 80026fc:	f002 fb44 	bl	8004d88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002704:	e046      	b.n	8002794 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002712:	461a      	mov	r2, r3
 8002714:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002718:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	4413      	add	r3, r2
 8002722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800272a:	0151      	lsls	r1, r2, #5
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	440a      	add	r2, r1
 8002730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002734:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002738:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	4413      	add	r3, r2
 8002742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002746:	461a      	mov	r2, r3
 8002748:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800274c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	440a      	add	r2, r1
 8002764:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002768:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800276c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800276e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	4413      	add	r3, r2
 8002776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800277e:	0151      	lsls	r1, r2, #5
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	440a      	add	r2, r1
 8002784:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800278c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002790:	3301      	adds	r3, #1
 8002792:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	791b      	ldrb	r3, [r3, #4]
 8002798:	461a      	mov	r2, r3
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	4293      	cmp	r3, r2
 800279e:	d3b2      	bcc.n	8002706 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027ae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80027b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7bdb      	ldrb	r3, [r3, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d016      	beq.n	80027ea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027cc:	f043 030b 	orr.w	r3, r3, #11
 80027d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027e2:	f043 030b 	orr.w	r3, r3, #11
 80027e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e8:	e015      	b.n	8002816 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027fc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002800:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002810:	f043 030b 	orr.w	r3, r3, #11
 8002814:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002824:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002828:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002838:	461a      	mov	r2, r3
 800283a:	f003 fa85 	bl	8005d48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800284c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f9b4 	bl	8005bc0 <USB_ReadInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002862:	d123      	bne.n	80028ac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fa4a 	bl	8005d02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f002 fb01 	bl	8004e7a <USB_GetDevSpeed>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681c      	ldr	r4, [r3, #0]
 8002884:	f001 f9ca 	bl	8003c1c <HAL_RCC_GetHCLKFreq>
 8002888:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800288e:	461a      	mov	r2, r3
 8002890:	4620      	mov	r0, r4
 8002892:	f002 f805 	bl	80048a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f005 fda7 	bl	80083ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 f985 	bl	8005bc0 <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d10a      	bne.n	80028d6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f005 fd84 	bl	80083ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f002 0208 	and.w	r2, r2, #8
 80028d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f970 	bl	8005bc0 <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e6:	2b80      	cmp	r3, #128	@ 0x80
 80028e8:	d123      	bne.n	8002932 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f6:	2301      	movs	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	e014      	b.n	8002926 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d105      	bne.n	8002920 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fb0a 	bl	8002f34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	3301      	adds	r3, #1
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	791b      	ldrb	r3, [r3, #4]
 800292a:	461a      	mov	r2, r3
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	4293      	cmp	r3, r2
 8002930:	d3e4      	bcc.n	80028fc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 f942 	bl	8005bc0 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002942:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002946:	d13c      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002948:	2301      	movs	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
 800294c:	e02b      	b.n	80029a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3318      	adds	r3, #24
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d115      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002974:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	da12      	bge.n	80029a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3317      	adds	r3, #23
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 faca 	bl	8002f34 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	3301      	adds	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d3cd      	bcc.n	800294e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80029c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 f8fa 	bl	8005bc0 <USB_ReadInterrupts>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029d6:	d156      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d8:	2301      	movs	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
 80029dc:	e045      	b.n	8002a6a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d12e      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da2b      	bge.n	8002a64 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a18:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d121      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a60:	6053      	str	r3, [r2, #4]
            break;
 8002a62:	e008      	b.n	8002a76 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	3301      	adds	r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d3b3      	bcc.n	80029de <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 f898 	bl	8005bc0 <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f005 fd1b 	bl	80084d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695a      	ldr	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 f882 	bl	8005bc0 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d115      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f005 fd0b 	bl	80084f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e000      	b.n	8002af2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002af0:	bf00      	nop
    }
  }
}
 8002af2:	3734      	adds	r7, #52	@ 0x34
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_SetAddress+0x1a>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e012      	b.n	8002b38 <HAL_PCD_SetAddress+0x40>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 ffe1 	bl	8005af0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	4608      	mov	r0, r1
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	70fb      	strb	r3, [r7, #3]
 8002b52:	460b      	mov	r3, r1
 8002b54:	803b      	strh	r3, [r7, #0]
 8002b56:	4613      	mov	r3, r2
 8002b58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da0f      	bge.n	8002b86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	f003 020f 	and.w	r2, r3, #15
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	3310      	adds	r3, #16
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	705a      	strb	r2, [r3, #1]
 8002b84:	e00f      	b.n	8002ba6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 020f 	and.w	r2, r3, #15
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002bb2:	883b      	ldrh	r3, [r7, #0]
 8002bb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	78ba      	ldrb	r2, [r7, #2]
 8002bc0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bd4:	78bb      	ldrb	r3, [r7, #2]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d102      	bne.n	8002be0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_PCD_EP_Open+0xae>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e00e      	b.n	8002c0c <HAL_PCD_EP_Open+0xcc>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 f961 	bl	8004ec4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da0f      	bge.n	8002c48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f003 020f 	and.w	r2, r3, #15
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	3310      	adds	r3, #16
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	705a      	strb	r2, [r3, #1]
 8002c46:	e00f      	b.n	8002c68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_PCD_EP_Close+0x6e>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e00e      	b.n	8002ca0 <HAL_PCD_EP_Close+0x8c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68f9      	ldr	r1, [r7, #12]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f002 f99f 	bl	8004fd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	799b      	ldrb	r3, [r3, #6]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	799b      	ldrb	r3, [r3, #6]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	f002 fa3c 	bl	800518c <USB_EPStartXfer>

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002d40:	681b      	ldr	r3, [r3, #0]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b086      	sub	sp, #24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d5e:	7afb      	ldrb	r3, [r7, #11]
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	3310      	adds	r3, #16
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	3304      	adds	r3, #4
 8002d74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	799b      	ldrb	r3, [r3, #6]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	799b      	ldrb	r3, [r3, #6]
 8002db0:	461a      	mov	r2, r3
 8002db2:	6979      	ldr	r1, [r7, #20]
 8002db4:	f002 f9ea 	bl	800518c <USB_EPStartXfer>

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	7912      	ldrb	r2, [r2, #4]
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d901      	bls.n	8002de0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e04f      	b.n	8002e80 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	da0f      	bge.n	8002e08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	3310      	adds	r3, #16
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	705a      	strb	r2, [r3, #1]
 8002e06:	e00d      	b.n	8002e24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_EP_SetStall+0x82>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e01d      	b.n	8002e80 <HAL_PCD_EP_SetStall+0xbe>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68f9      	ldr	r1, [r7, #12]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fd78 	bl	8005948 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7999      	ldrb	r1, [r3, #6]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e70:	461a      	mov	r2, r3
 8002e72:	f002 ff69 	bl	8005d48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	7912      	ldrb	r2, [r2, #4]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e042      	b.n	8002f2c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da0f      	bge.n	8002ece <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 020f 	and.w	r2, r3, #15
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	705a      	strb	r2, [r3, #1]
 8002ecc:	e00f      	b.n	8002eee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_PCD_EP_ClrStall+0x86>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00e      	b.n	8002f2c <HAL_PCD_EP_ClrStall+0xa4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 fd81 	bl	8005a24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da0c      	bge.n	8002f62 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3310      	adds	r3, #16
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e00c      	b.n	8002f7c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68f9      	ldr	r1, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fba0 	bl	80056c8 <USB_EPStopXfer>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b08a      	sub	sp, #40	@ 0x28
 8002f9a:	af02      	add	r7, sp, #8
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	3310      	adds	r3, #16
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3304      	adds	r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d901      	bls.n	8002fce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e06b      	b.n	80030a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d902      	bls.n	8002fea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	3303      	adds	r3, #3
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ff2:	e02a      	b.n	800304a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	69fa      	ldr	r2, [r7, #28]
 8003006:	429a      	cmp	r2, r3
 8003008:	d902      	bls.n	8003010 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3303      	adds	r3, #3
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	68d9      	ldr	r1, [r3, #12]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	b2da      	uxtb	r2, r3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	4603      	mov	r3, r0
 800302c:	6978      	ldr	r0, [r7, #20]
 800302e:	f002 fbf5 	bl	800581c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	441a      	add	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	429a      	cmp	r2, r3
 800305e:	d809      	bhi.n	8003074 <PCD_WriteEmptyTxFifo+0xde>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003068:	429a      	cmp	r2, r3
 800306a:	d203      	bcs.n	8003074 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1bf      	bne.n	8002ff4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	d811      	bhi.n	80030a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	2201      	movs	r2, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	43db      	mvns	r3, r3
 800309a:	6939      	ldr	r1, [r7, #16]
 800309c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030a0:	4013      	ands	r3, r2
 80030a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	333c      	adds	r3, #60	@ 0x3c
 80030c8:	3304      	adds	r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	799b      	ldrb	r3, [r3, #6]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d17b      	bne.n	80031de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4a61      	ldr	r2, [pc, #388]	@ (8003278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	f240 80b9 	bls.w	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80b3 	beq.w	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003118:	6093      	str	r3, [r2, #8]
 800311a:	e0a7      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003132:	461a      	mov	r2, r3
 8003134:	2320      	movs	r3, #32
 8003136:	6093      	str	r3, [r2, #8]
 8003138:	e098      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 8093 	bne.w	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	4a4b      	ldr	r2, [pc, #300]	@ (8003278 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d90f      	bls.n	800316e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316a:	6093      	str	r3, [r2, #8]
 800316c:	e07e      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	440b      	add	r3, r1
 8003190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	1ad2      	subs	r2, r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d114      	bne.n	80031d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031b8:	461a      	mov	r2, r3
 80031ba:	2101      	movs	r1, #1
 80031bc:	f002 fdc4 	bl	8005d48 <USB_EP0_OutStart>
 80031c0:	e006      	b.n	80031d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f005 f8c4 	bl	8008364 <HAL_PCD_DataOutStageCallback>
 80031dc:	e046      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	4a26      	ldr	r2, [pc, #152]	@ (800327c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d124      	bne.n	8003230 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	e032      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2320      	movs	r3, #32
 8003220:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f005 f89b 	bl	8008364 <HAL_PCD_DataOutStageCallback>
 800322e:	e01d      	b.n	800326c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d114      	bne.n	8003260 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003258:	461a      	mov	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f002 fd74 	bl	8005d48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	4619      	mov	r1, r3
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f005 f87c 	bl	8008364 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	4f54300a 	.word	0x4f54300a
 800327c:	4f54310a 	.word	0x4f54310a

08003280 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	333c      	adds	r3, #60	@ 0x3c
 8003298:	3304      	adds	r3, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a15      	ldr	r2, [pc, #84]	@ (8003308 <PCD_EP_OutSetupPacket_int+0x88>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d90e      	bls.n	80032d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032cc:	461a      	mov	r2, r3
 80032ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f005 f833 	bl	8008340 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <PCD_EP_OutSetupPacket_int+0x88>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d90c      	bls.n	80032fc <PCD_EP_OutSetupPacket_int+0x7c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d108      	bne.n	80032fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032f4:	461a      	mov	r2, r3
 80032f6:	2101      	movs	r1, #1
 80032f8:	f002 fd26 	bl	8005d48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	4f54300a 	.word	0x4f54300a

0800330c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	70fb      	strb	r3, [r7, #3]
 8003318:	4613      	mov	r3, r2
 800331a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800332a:	883b      	ldrh	r3, [r7, #0]
 800332c:	0419      	lsls	r1, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	430a      	orrs	r2, r1
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
 8003338:	e028      	b.n	800338c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	4413      	add	r3, r2
 8003346:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e00d      	b.n	800336a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	3340      	adds	r3, #64	@ 0x40
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	3301      	adds	r3, #1
 8003368:	73fb      	strb	r3, [r7, #15]
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	3b01      	subs	r3, #1
 8003370:	429a      	cmp	r2, r3
 8003372:	d3ec      	bcc.n	800334e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003374:	883b      	ldrh	r3, [r7, #0]
 8003376:	0418      	lsls	r0, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6819      	ldr	r1, [r3, #0]
 800337c:	78fb      	ldrb	r3, [r7, #3]
 800337e:	3b01      	subs	r3, #1
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4302      	orrs	r2, r0
 8003384:	3340      	adds	r3, #64	@ 0x40
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	887a      	ldrh	r2, [r7, #2]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e267      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d075      	beq.n	80034de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033f2:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d00c      	beq.n	8003418 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fe:	4b85      	ldr	r3, [pc, #532]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003406:	2b08      	cmp	r3, #8
 8003408:	d112      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340a:	4b82      	ldr	r3, [pc, #520]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b7e      	ldr	r3, [pc, #504]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d05b      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d157      	bne.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e242      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x74>
 800343a:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a75      	ldr	r2, [pc, #468]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b70      	ldr	r3, [pc, #448]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6f      	ldr	r2, [pc, #444]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6d      	ldr	r3, [pc, #436]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6c      	ldr	r2, [pc, #432]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xb0>
 800346c:	4b69      	ldr	r3, [pc, #420]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a68      	ldr	r2, [pc, #416]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a65      	ldr	r2, [pc, #404]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fa70 	bl	8001970 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fa6c 	bl	8001970 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e207      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xc0>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fa5c 	bl	8001970 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fa58 	bl	8001970 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	@ 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1f3      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b51      	ldr	r3, [pc, #324]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f6:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003502:	4b44      	ldr	r3, [pc, #272]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x152>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c7      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b3b      	ldr	r3, [pc, #236]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4937      	ldr	r1, [pc, #220]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <HAL_RCC_OscConfig+0x244>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe fa11 	bl	8001970 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe fa0d 	bl	8001970 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1a8      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	4b2b      	ldr	r3, [pc, #172]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b28      	ldr	r3, [pc, #160]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4925      	ldr	r1, [pc, #148]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <HAL_RCC_OscConfig+0x244>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe f9f0 	bl	8001970 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe f9ec 	bl	8001970 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e187      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d036      	beq.n	800362c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	4b15      	ldr	r3, [pc, #84]	@ (800361c <HAL_RCC_OscConfig+0x248>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fe f9d0 	bl	8001970 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe f9cc 	bl	8001970 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e167      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCC_OscConfig+0x240>)
 80035e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x200>
 80035f2:	e01b      	b.n	800362c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f4:	4b09      	ldr	r3, [pc, #36]	@ (800361c <HAL_RCC_OscConfig+0x248>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fe f9b9 	bl	8001970 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	e00e      	b.n	8003620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003602:	f7fe f9b5 	bl	8001970 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d907      	bls.n	8003620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e150      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
 8003614:	40023800 	.word	0x40023800
 8003618:	42470000 	.word	0x42470000
 800361c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	4b88      	ldr	r3, [pc, #544]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ea      	bne.n	8003602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8097 	beq.w	8003768 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363e:	4b81      	ldr	r3, [pc, #516]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10f      	bne.n	800366a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	4b7d      	ldr	r3, [pc, #500]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	4a7c      	ldr	r2, [pc, #496]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	@ 0x40
 800365a:	4b7a      	ldr	r3, [pc, #488]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366a:	4b77      	ldr	r3, [pc, #476]	@ (8003848 <HAL_RCC_OscConfig+0x474>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	2b00      	cmp	r3, #0
 8003674:	d118      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003676:	4b74      	ldr	r3, [pc, #464]	@ (8003848 <HAL_RCC_OscConfig+0x474>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a73      	ldr	r2, [pc, #460]	@ (8003848 <HAL_RCC_OscConfig+0x474>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003682:	f7fe f975 	bl	8001970 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368a:	f7fe f971 	bl	8001970 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e10c      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4b6a      	ldr	r3, [pc, #424]	@ (8003848 <HAL_RCC_OscConfig+0x474>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <HAL_RCC_OscConfig+0x2ea>
 80036b0:	4b64      	ldr	r3, [pc, #400]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b4:	4a63      	ldr	r2, [pc, #396]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80036bc:	e01c      	b.n	80036f8 <HAL_RCC_OscConfig+0x324>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x30c>
 80036c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0x324>
 80036e0:	4b58      	ldr	r3, [pc, #352]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e4:	4a57      	ldr	r2, [pc, #348]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ec:	4b55      	ldr	r3, [pc, #340]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a54      	ldr	r2, [pc, #336]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f023 0304 	bic.w	r3, r3, #4
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d015      	beq.n	800372c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe f936 	bl	8001970 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe f932 	bl	8001970 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0cb      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371e:	4b49      	ldr	r3, [pc, #292]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ee      	beq.n	8003708 <HAL_RCC_OscConfig+0x334>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372c:	f7fe f920 	bl	8001970 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe f91c 	bl	8001970 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0b5      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374a:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ee      	bne.n	8003734 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d105      	bne.n	8003768 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375c:	4b39      	ldr	r3, [pc, #228]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	4a38      	ldr	r2, [pc, #224]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003766:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 80a1 	beq.w	80038b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003772:	4b34      	ldr	r3, [pc, #208]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	2b08      	cmp	r3, #8
 800377c:	d05c      	beq.n	8003838 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d141      	bne.n	800380a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <HAL_RCC_OscConfig+0x478>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe f8f0 	bl	8001970 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fe f8ec 	bl	8001970 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e087      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	4b27      	ldr	r3, [pc, #156]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	019b      	lsls	r3, r3, #6
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	3b01      	subs	r3, #1
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	491b      	ldr	r1, [pc, #108]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_RCC_OscConfig+0x478>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e2:	f7fe f8c5 	bl	8001970 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fe f8c1 	bl	8001970 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e05c      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	4b11      	ldr	r3, [pc, #68]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x416>
 8003808:	e054      	b.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800380a:	4b10      	ldr	r3, [pc, #64]	@ (800384c <HAL_RCC_OscConfig+0x478>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003810:	f7fe f8ae 	bl	8001970 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe f8aa 	bl	8001970 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e045      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <HAL_RCC_OscConfig+0x470>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x444>
 8003836:	e03d      	b.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e038      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
 8003844:	40023800 	.word	0x40023800
 8003848:	40007000 	.word	0x40007000
 800384c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <HAL_RCC_OscConfig+0x4ec>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d028      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d121      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d11a      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003880:	4013      	ands	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003886:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003888:	4293      	cmp	r3, r2
 800388a:	d111      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	3b01      	subs	r3, #1
 800389a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d107      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0cc      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b68      	ldr	r3, [pc, #416]	@ (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d90c      	bls.n	8003900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b65      	ldr	r3, [pc, #404]	@ (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b63      	ldr	r3, [pc, #396]	@ (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0b8      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d020      	beq.n	800394e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003918:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a58      	ldr	r2, [pc, #352]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003922:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003930:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a52      	ldr	r2, [pc, #328]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800393a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800393c:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	494d      	ldr	r1, [pc, #308]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d119      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397e:	2b03      	cmp	r3, #3
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003982:	4b3f      	ldr	r3, [pc, #252]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e067      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039a2:	4b37      	ldr	r3, [pc, #220]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 0203 	bic.w	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4934      	ldr	r1, [pc, #208]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b4:	f7fd ffdc 	bl	8001970 <HAL_GetTick>
 80039b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039bc:	f7fd ffd8 	bl	8001970 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e04f      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 020c 	and.w	r2, r3, #12
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d1eb      	bne.n	80039bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039e4:	4b25      	ldr	r3, [pc, #148]	@ (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d20c      	bcs.n	8003a0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e032      	b.n	8003a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d008      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a18:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4916      	ldr	r1, [pc, #88]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a36:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	490e      	ldr	r1, [pc, #56]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a4a:	f000 f821 	bl	8003a90 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	490a      	ldr	r1, [pc, #40]	@ (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	5ccb      	ldrb	r3, [r1, r3]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <HAL_RCC_ClockConfig+0x1c4>)
 8003a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a66:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd ff3c 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40023c00 	.word	0x40023c00
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800b254 	.word	0x0800b254
 8003a88:	20000008 	.word	0x20000008
 8003a8c:	2000000c 	.word	0x2000000c

08003a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a94:	b090      	sub	sp, #64	@ 0x40
 8003a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa8:	4b59      	ldr	r3, [pc, #356]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 030c 	and.w	r3, r3, #12
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	f200 80a1 	bhi.w	8003bfc <HAL_RCC_GetSysClockFreq+0x16c>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac2:	e09b      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b53      	ldr	r3, [pc, #332]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ac8:	e09b      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aca:	4b53      	ldr	r3, [pc, #332]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ace:	e098      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad0:	4b4f      	ldr	r3, [pc, #316]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ad8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ada:	4b4d      	ldr	r3, [pc, #308]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d028      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	099b      	lsrs	r3, r3, #6
 8003aec:	2200      	movs	r2, #0
 8003aee:	623b      	str	r3, [r7, #32]
 8003af0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af8:	2100      	movs	r1, #0
 8003afa:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003afc:	fb03 f201 	mul.w	r2, r3, r1
 8003b00:	2300      	movs	r3, #0
 8003b02:	fb00 f303 	mul.w	r3, r0, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	4a43      	ldr	r2, [pc, #268]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b10:	460a      	mov	r2, r1
 8003b12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b16:	4413      	add	r3, r2
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	61fa      	str	r2, [r7, #28]
 8003b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b2a:	f7fd f845 	bl	8000bb8 <__aeabi_uldivmod>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	460b      	mov	r3, r1
 8003b32:	4613      	mov	r3, r2
 8003b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b36:	e053      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b38:	4b35      	ldr	r3, [pc, #212]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	2200      	movs	r2, #0
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	617a      	str	r2, [r7, #20]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b4a:	f04f 0b00 	mov.w	fp, #0
 8003b4e:	4652      	mov	r2, sl
 8003b50:	465b      	mov	r3, fp
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f04f 0100 	mov.w	r1, #0
 8003b5a:	0159      	lsls	r1, r3, #5
 8003b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b60:	0150      	lsls	r0, r2, #5
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	ebb2 080a 	subs.w	r8, r2, sl
 8003b6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b82:	ebb2 0408 	subs.w	r4, r2, r8
 8003b86:	eb63 0509 	sbc.w	r5, r3, r9
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	00eb      	lsls	r3, r5, #3
 8003b94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b98:	00e2      	lsls	r2, r4, #3
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	eb14 030a 	adds.w	r3, r4, sl
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	eb45 030b 	adc.w	r3, r5, fp
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	028b      	lsls	r3, r1, #10
 8003bba:	4621      	mov	r1, r4
 8003bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	028a      	lsls	r2, r1, #10
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	60fa      	str	r2, [r7, #12]
 8003bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd4:	f7fc fff0 	bl	8000bb8 <__aeabi_uldivmod>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4613      	mov	r3, r2
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	3301      	adds	r3, #1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003bf0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3740      	adds	r7, #64	@ 0x40
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	017d7840 	.word	0x017d7840

08003c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c20:	4b03      	ldr	r3, [pc, #12]	@ (8003c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000008 	.word	0x20000008

08003c34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e07b      	b.n	8003d3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c56:	d009      	beq.n	8003c6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
 8003c5e:	e005      	b.n	8003c6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd fc88 	bl	800159c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ca2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0104 	and.w	r1, r3, #4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	f003 0210 	and.w	r2, r3, #16
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b088      	sub	sp, #32
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	603b      	str	r3, [r7, #0]
 8003d52:	4613      	mov	r3, r2
 8003d54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d56:	f7fd fe0b 	bl	8001970 <HAL_GetTick>
 8003d5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d001      	beq.n	8003d70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e12a      	b.n	8003fc6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x36>
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e122      	b.n	8003fc6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_SPI_Transmit+0x48>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e11b      	b.n	8003fc6 <HAL_SPI_Transmit+0x280>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ddc:	d10f      	bne.n	8003dfe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b40      	cmp	r3, #64	@ 0x40
 8003e0a:	d007      	beq.n	8003e1c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e24:	d152      	bne.n	8003ecc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Transmit+0xee>
 8003e2e:	8b7b      	ldrh	r3, [r7, #26]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d145      	bne.n	8003ec0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e58:	e032      	b.n	8003ec0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d112      	bne.n	8003e8e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e8c:	e018      	b.n	8003ec0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8e:	f7fd fd6f 	bl	8001970 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d803      	bhi.n	8003ea6 <HAL_SPI_Transmit+0x160>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ea4:	d102      	bne.n	8003eac <HAL_SPI_Transmit+0x166>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d109      	bne.n	8003ec0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e082      	b.n	8003fc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1c7      	bne.n	8003e5a <HAL_SPI_Transmit+0x114>
 8003eca:	e053      	b.n	8003f74 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Transmit+0x194>
 8003ed4:	8b7b      	ldrh	r3, [r7, #26]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d147      	bne.n	8003f6a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f00:	e033      	b.n	8003f6a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d113      	bne.n	8003f38 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	7812      	ldrb	r2, [r2, #0]
 8003f1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f36:	e018      	b.n	8003f6a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f38:	f7fd fd1a 	bl	8001970 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d803      	bhi.n	8003f50 <HAL_SPI_Transmit+0x20a>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f4e:	d102      	bne.n	8003f56 <HAL_SPI_Transmit+0x210>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e02d      	b.n	8003fc6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1c6      	bne.n	8003f02 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	6839      	ldr	r1, [r7, #0]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fbd9 	bl	8004730 <SPI_EndRxTxTransaction>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b088      	sub	sp, #32
 8003fd2:	af02      	add	r7, sp, #8
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d001      	beq.n	8003fee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
 8003fec:	e104      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff6:	d112      	bne.n	800401e <HAL_SPI_Receive+0x50>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10e      	bne.n	800401e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2204      	movs	r2, #4
 8004004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004008:	88fa      	ldrh	r2, [r7, #6]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f8f3 	bl	8004200 <HAL_SPI_TransmitReceive>
 800401a:	4603      	mov	r3, r0
 800401c:	e0ec      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800401e:	f7fd fca7 	bl	8001970 <HAL_GetTick>
 8004022:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_SPI_Receive+0x62>
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0e1      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_SPI_Receive+0x74>
 800403e:	2302      	movs	r3, #2
 8004040:	e0da      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2204      	movs	r2, #4
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	88fa      	ldrh	r2, [r7, #6]
 8004062:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004090:	d10f      	bne.n	80040b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b40      	cmp	r3, #64	@ 0x40
 80040be:	d007      	beq.n	80040d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d170      	bne.n	80041ba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80040d8:	e035      	b.n	8004146 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d115      	bne.n	8004114 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f103 020c 	add.w	r2, r3, #12
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004112:	e018      	b.n	8004146 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004114:	f7fd fc2c 	bl	8001970 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d803      	bhi.n	800412c <HAL_SPI_Receive+0x15e>
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800412a:	d102      	bne.n	8004132 <HAL_SPI_Receive+0x164>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e058      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1c4      	bne.n	80040da <HAL_SPI_Receive+0x10c>
 8004150:	e038      	b.n	80041c4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d113      	bne.n	8004188 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416a:	b292      	uxth	r2, r2
 800416c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004186:	e018      	b.n	80041ba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004188:	f7fd fbf2 	bl	8001970 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d803      	bhi.n	80041a0 <HAL_SPI_Receive+0x1d2>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800419e:	d102      	bne.n	80041a6 <HAL_SPI_Receive+0x1d8>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e01e      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1c6      	bne.n	8004152 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fa4b 	bl	8004664 <SPI_EndRxTransaction>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80041f6:	2300      	movs	r3, #0
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	@ 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800420e:	2301      	movs	r3, #1
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004212:	f7fd fbad 	bl	8001970 <HAL_GetTick>
 8004216:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d00c      	beq.n	800424a <HAL_SPI_TransmitReceive+0x4a>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004236:	d106      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <HAL_SPI_TransmitReceive+0x46>
 8004240:	7ffb      	ldrb	r3, [r7, #31]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d001      	beq.n	800424a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
 8004248:	e17f      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_SPI_TransmitReceive+0x5c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_SPI_TransmitReceive+0x5c>
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e174      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_SPI_TransmitReceive+0x6e>
 800426a:	2302      	movs	r3, #2
 800426c:	e16d      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2205      	movs	r2, #5
 8004286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	887a      	ldrh	r2, [r7, #2]
 800429a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	887a      	ldrh	r2, [r7, #2]
 80042ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	887a      	ldrh	r2, [r7, #2]
 80042b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b40      	cmp	r3, #64	@ 0x40
 80042cc:	d007      	beq.n	80042de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042e6:	d17e      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0xf6>
 80042f0:	8afb      	ldrh	r3, [r7, #22]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d16c      	bne.n	80043d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	881a      	ldrh	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	1c9a      	adds	r2, r3, #2
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	e059      	b.n	80043d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d11b      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x162>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_SPI_TransmitReceive+0x162>
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	2b01      	cmp	r3, #1
 8004338:	d113      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	881a      	ldrh	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	1c9a      	adds	r2, r3, #2
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b01      	cmp	r3, #1
 800436e:	d119      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x1a4>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004374:	b29b      	uxth	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d014      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004384:	b292      	uxth	r2, r2
 8004386:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043a0:	2301      	movs	r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043a4:	f7fd fae4 	bl	8001970 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d80d      	bhi.n	80043d0 <HAL_SPI_TransmitReceive+0x1d0>
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ba:	d009      	beq.n	80043d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0bc      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1a0      	bne.n	800431c <HAL_SPI_TransmitReceive+0x11c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d19b      	bne.n	800431c <HAL_SPI_TransmitReceive+0x11c>
 80043e4:	e082      	b.n	80044ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_SPI_TransmitReceive+0x1f4>
 80043ee:	8afb      	ldrh	r3, [r7, #22]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d171      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	7812      	ldrb	r2, [r2, #0]
 8004400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800441a:	e05d      	b.n	80044d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d11c      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x264>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d017      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x264>
 8004434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004436:	2b01      	cmp	r3, #1
 8004438:	d114      	bne.n	8004464 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d119      	bne.n	80044a6 <HAL_SPI_TransmitReceive+0x2a6>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d014      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a2:	2301      	movs	r3, #1
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044a6:	f7fd fa63 	bl	8001970 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d803      	bhi.n	80044be <HAL_SPI_TransmitReceive+0x2be>
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044bc:	d102      	bne.n	80044c4 <HAL_SPI_TransmitReceive+0x2c4>
 80044be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d109      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e038      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d19c      	bne.n	800441c <HAL_SPI_TransmitReceive+0x21c>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d197      	bne.n	800441c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ec:	6a3a      	ldr	r2, [r7, #32]
 80044ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 f91d 	bl	8004730 <SPI_EndRxTxTransaction>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e01d      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004548:	2300      	movs	r3, #0
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3728      	adds	r7, #40	@ 0x28
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004564:	f7fd fa04 	bl	8001970 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	4413      	add	r3, r2
 8004572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004574:	f7fd f9fc 	bl	8001970 <HAL_GetTick>
 8004578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800457a:	4b39      	ldr	r3, [pc, #228]	@ (8004660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	015b      	lsls	r3, r3, #5
 8004580:	0d1b      	lsrs	r3, r3, #20
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800458a:	e054      	b.n	8004636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004592:	d050      	beq.n	8004636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004594:	f7fd f9ec 	bl	8001970 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d902      	bls.n	80045aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d13d      	bne.n	8004626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045c2:	d111      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045cc:	d004      	beq.n	80045d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d6:	d107      	bne.n	80045e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f0:	d10f      	bne.n	8004612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e017      	b.n	8004656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3b01      	subs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4013      	ands	r3, r2
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	429a      	cmp	r2, r3
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	429a      	cmp	r2, r3
 8004652:	d19b      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000008 	.word	0x20000008

08004664 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004678:	d111      	bne.n	800469e <SPI_EndRxTransaction+0x3a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004682:	d004      	beq.n	800468e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468c:	d107      	bne.n	800469e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800469c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046a6:	d12a      	bne.n	80046fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b0:	d012      	beq.n	80046d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	@ 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff ff49 	bl	8004554 <SPI_WaitFlagStateUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d02d      	beq.n	8004724 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e026      	b.n	8004726 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2200      	movs	r2, #0
 80046e0:	2101      	movs	r1, #1
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f7ff ff36 	bl	8004554 <SPI_WaitFlagStateUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d01a      	beq.n	8004724 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f2:	f043 0220 	orr.w	r2, r3, #32
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e013      	b.n	8004726 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2200      	movs	r2, #0
 8004706:	2101      	movs	r1, #1
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff ff23 	bl	8004554 <SPI_WaitFlagStateUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e000      	b.n	8004726 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2201      	movs	r2, #1
 8004744:	2102      	movs	r1, #2
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ff04 	bl	8004554 <SPI_WaitFlagStateUntilTimeout>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004756:	f043 0220 	orr.w	r2, r3, #32
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e032      	b.n	80047c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <SPI_EndRxTxTransaction+0xa0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <SPI_EndRxTxTransaction+0xa4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	0d5b      	lsrs	r3, r3, #21
 800476e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004772:	fb02 f303 	mul.w	r3, r2, r3
 8004776:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004780:	d112      	bne.n	80047a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2200      	movs	r2, #0
 800478a:	2180      	movs	r1, #128	@ 0x80
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fee1 	bl	8004554 <SPI_WaitFlagStateUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d016      	beq.n	80047c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e00f      	b.n	80047c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b80      	cmp	r3, #128	@ 0x80
 80047c0:	d0f2      	beq.n	80047a8 <SPI_EndRxTxTransaction+0x78>
 80047c2:	e000      	b.n	80047c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80047c4:	bf00      	nop
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000008 	.word	0x20000008
 80047d4:	165e9f81 	.word	0x165e9f81

080047d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d8:	b084      	sub	sp, #16
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	f107 001c 	add.w	r0, r7, #28
 80047e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d123      	bne.n	800483a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800481a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800481e:	2b01      	cmp	r3, #1
 8004820:	d105      	bne.n	800482e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f001 fae8 	bl	8005e04 <USB_CoreReset>
 8004834:	4603      	mov	r3, r0
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e01b      	b.n	8004872 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 fadc 	bl	8005e04 <USB_CoreReset>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004850:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
 8004864:	e005      	b.n	8004872 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004872:	7fbb      	ldrb	r3, [r7, #30]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10b      	bne.n	8004890 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f043 0206 	orr.w	r2, r3, #6
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800489c:	b004      	add	sp, #16
 800489e:	4770      	bx	lr

080048a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d165      	bne.n	8004980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4a41      	ldr	r2, [pc, #260]	@ (80049bc <USB_SetTurnaroundTime+0x11c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d906      	bls.n	80048ca <USB_SetTurnaroundTime+0x2a>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4a40      	ldr	r2, [pc, #256]	@ (80049c0 <USB_SetTurnaroundTime+0x120>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d202      	bcs.n	80048ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048c4:	230f      	movs	r3, #15
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e062      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a3c      	ldr	r2, [pc, #240]	@ (80049c0 <USB_SetTurnaroundTime+0x120>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d306      	bcc.n	80048e0 <USB_SetTurnaroundTime+0x40>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a3b      	ldr	r2, [pc, #236]	@ (80049c4 <USB_SetTurnaroundTime+0x124>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d202      	bcs.n	80048e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048da:	230e      	movs	r3, #14
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e057      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <USB_SetTurnaroundTime+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d306      	bcc.n	80048f6 <USB_SetTurnaroundTime+0x56>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4a37      	ldr	r2, [pc, #220]	@ (80049c8 <USB_SetTurnaroundTime+0x128>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d202      	bcs.n	80048f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048f0:	230d      	movs	r3, #13
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	e04c      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a33      	ldr	r2, [pc, #204]	@ (80049c8 <USB_SetTurnaroundTime+0x128>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d306      	bcc.n	800490c <USB_SetTurnaroundTime+0x6c>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4a32      	ldr	r2, [pc, #200]	@ (80049cc <USB_SetTurnaroundTime+0x12c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d802      	bhi.n	800490c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004906:	230c      	movs	r3, #12
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e041      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4a2f      	ldr	r2, [pc, #188]	@ (80049cc <USB_SetTurnaroundTime+0x12c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d906      	bls.n	8004922 <USB_SetTurnaroundTime+0x82>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4a2e      	ldr	r2, [pc, #184]	@ (80049d0 <USB_SetTurnaroundTime+0x130>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d802      	bhi.n	8004922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800491c:	230b      	movs	r3, #11
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e036      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4a2a      	ldr	r2, [pc, #168]	@ (80049d0 <USB_SetTurnaroundTime+0x130>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d906      	bls.n	8004938 <USB_SetTurnaroundTime+0x98>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4a29      	ldr	r2, [pc, #164]	@ (80049d4 <USB_SetTurnaroundTime+0x134>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d802      	bhi.n	8004938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004932:	230a      	movs	r3, #10
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e02b      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4a26      	ldr	r2, [pc, #152]	@ (80049d4 <USB_SetTurnaroundTime+0x134>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d906      	bls.n	800494e <USB_SetTurnaroundTime+0xae>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a25      	ldr	r2, [pc, #148]	@ (80049d8 <USB_SetTurnaroundTime+0x138>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d202      	bcs.n	800494e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004948:	2309      	movs	r3, #9
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e020      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4a21      	ldr	r2, [pc, #132]	@ (80049d8 <USB_SetTurnaroundTime+0x138>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d306      	bcc.n	8004964 <USB_SetTurnaroundTime+0xc4>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a20      	ldr	r2, [pc, #128]	@ (80049dc <USB_SetTurnaroundTime+0x13c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d802      	bhi.n	8004964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800495e:	2308      	movs	r3, #8
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e015      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a1d      	ldr	r2, [pc, #116]	@ (80049dc <USB_SetTurnaroundTime+0x13c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d906      	bls.n	800497a <USB_SetTurnaroundTime+0xda>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4a1c      	ldr	r2, [pc, #112]	@ (80049e0 <USB_SetTurnaroundTime+0x140>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d202      	bcs.n	800497a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004974:	2307      	movs	r3, #7
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e00a      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800497a:	2306      	movs	r3, #6
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e007      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004980:	79fb      	ldrb	r3, [r7, #7]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004986:	2309      	movs	r3, #9
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e001      	b.n	8004990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800498c:	2309      	movs	r3, #9
 800498e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	00d8acbf 	.word	0x00d8acbf
 80049c0:	00e4e1c0 	.word	0x00e4e1c0
 80049c4:	00f42400 	.word	0x00f42400
 80049c8:	01067380 	.word	0x01067380
 80049cc:	011a499f 	.word	0x011a499f
 80049d0:	01312cff 	.word	0x01312cff
 80049d4:	014ca43f 	.word	0x014ca43f
 80049d8:	016e3600 	.word	0x016e3600
 80049dc:	01a6ab1f 	.word	0x01a6ab1f
 80049e0:	01e84800 	.word	0x01e84800

080049e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f043 0201 	orr.w	r2, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f023 0201 	bic.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d115      	bne.n	8004a76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a56:	200a      	movs	r0, #10
 8004a58:	f7fc ff96 	bl	8001988 <HAL_Delay>
      ms += 10U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	330a      	adds	r3, #10
 8004a60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f001 f93f 	bl	8005ce6 <USB_GetMode>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d01e      	beq.n	8004aac <USB_SetCurrentMode+0x84>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a72:	d9f0      	bls.n	8004a56 <USB_SetCurrentMode+0x2e>
 8004a74:	e01a      	b.n	8004aac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d115      	bne.n	8004aa8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a88:	200a      	movs	r0, #10
 8004a8a:	f7fc ff7d 	bl	8001988 <HAL_Delay>
      ms += 10U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	330a      	adds	r3, #10
 8004a92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f001 f926 	bl	8005ce6 <USB_GetMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <USB_SetCurrentMode+0x84>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2bc7      	cmp	r3, #199	@ 0xc7
 8004aa4:	d9f0      	bls.n	8004a88 <USB_SetCurrentMode+0x60>
 8004aa6:	e001      	b.n	8004aac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e005      	b.n	8004ab8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2bc8      	cmp	r3, #200	@ 0xc8
 8004ab0:	d101      	bne.n	8004ab6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	e009      	b.n	8004af4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3340      	adds	r3, #64	@ 0x40
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3301      	adds	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b0e      	cmp	r3, #14
 8004af8:	d9f2      	bls.n	8004ae0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004afa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d11c      	bne.n	8004b3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b26:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b32:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b3a:	e00b      	b.n	8004b54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d10d      	bne.n	8004b84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b70:	2100      	movs	r1, #0
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f968 	bl	8004e48 <USB_SetDevSpeed>
 8004b78:	e008      	b.n	8004b8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f963 	bl	8004e48 <USB_SetDevSpeed>
 8004b82:	e003      	b.n	8004b8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b84:	2103      	movs	r1, #3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f95e 	bl	8004e48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b8c:	2110      	movs	r1, #16
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8fa 	bl	8004d88 <USB_FlushTxFifo>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f924 	bl	8004dec <USB_FlushRxFifo>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	e043      	b.n	8004c60 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bee:	d118      	bne.n	8004c22 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e013      	b.n	8004c34 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e008      	b.n	8004c34 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2300      	movs	r3, #0
 8004c32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c40:	461a      	mov	r2, r3
 8004c42:	2300      	movs	r3, #0
 8004c44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c52:	461a      	mov	r2, r3
 8004c54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c64:	461a      	mov	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d3b5      	bcc.n	8004bd8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	e043      	b.n	8004cfa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c88:	d118      	bne.n	8004cbc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e013      	b.n	8004cce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e008      	b.n	8004cce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cec:	461a      	mov	r2, r3
 8004cee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cfe:	461a      	mov	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d3b5      	bcc.n	8004c72 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d105      	bne.n	8004d3c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f043 0210 	orr.w	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <USB_DevInit+0x2c4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f043 0208 	orr.w	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d107      	bne.n	8004d74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d80:	b004      	add	sp, #16
 8004d82:	4770      	bx	lr
 8004d84:	803c3800 	.word	0x803c3800

08004d88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da2:	d901      	bls.n	8004da8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e01b      	b.n	8004de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	daf2      	bge.n	8004d96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dcc:	d901      	bls.n	8004dd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e006      	b.n	8004de0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	d0f0      	beq.n	8004dc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e04:	d901      	bls.n	8004e0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e018      	b.n	8004e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	daf2      	bge.n	8004df8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e28:	d901      	bls.n	8004e2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e006      	b.n	8004e3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b10      	cmp	r3, #16
 8004e38:	d0f0      	beq.n	8004e1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0306 	and.w	r3, r3, #6
 8004e92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	75fb      	strb	r3, [r7, #23]
 8004e9e:	e00a      	b.n	8004eb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d002      	beq.n	8004eac <USB_GetDevSpeed+0x32>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	d102      	bne.n	8004eb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004eac:	2302      	movs	r3, #2
 8004eae:	75fb      	strb	r3, [r7, #23]
 8004eb0:	e001      	b.n	8004eb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004eb2:	230f      	movs	r3, #15
 8004eb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d13a      	bne.n	8004f56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d155      	bne.n	8004fc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	791b      	ldrb	r3, [r3, #4]
 8004f32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	059b      	lsls	r3, r3, #22
 8004f3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e036      	b.n	8004fc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	2101      	movs	r1, #1
 8004f68:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11a      	bne.n	8004fc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	791b      	ldrb	r3, [r3, #4]
 8004fa8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004faa:	430b      	orrs	r3, r1
 8004fac:	4313      	orrs	r3, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d161      	bne.n	80050b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005006:	d11f      	bne.n	8005048 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005022:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005026:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005042:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	2101      	movs	r1, #1
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	b29b      	uxth	r3, r3
 8005060:	43db      	mvns	r3, r3
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005068:	4013      	ands	r3, r2
 800506a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	b29b      	uxth	r3, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800508c:	4013      	ands	r3, r2
 800508e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0159      	lsls	r1, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	440b      	add	r3, r1
 80050a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050aa:	4619      	mov	r1, r3
 80050ac:	4b35      	ldr	r3, [pc, #212]	@ (8005184 <USB_DeactivateEndpoint+0x1b0>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]
 80050b2:	e060      	b.n	8005176 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ca:	d11f      	bne.n	800510c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	0151      	lsls	r1, r2, #5
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	440a      	add	r2, r1
 8005102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005106:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800510a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	f003 030f 	and.w	r3, r3, #15
 800511c:	2101      	movs	r1, #1
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	43db      	mvns	r3, r3
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800512c:	4013      	ands	r3, r2
 800512e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	2101      	movs	r1, #1
 8005142:	fa01 f303 	lsl.w	r3, r1, r3
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	43db      	mvns	r3, r3
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005150:	4013      	ands	r3, r2
 8005152:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	0159      	lsls	r1, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	440b      	add	r3, r1
 800516a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800516e:	4619      	mov	r1, r3
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <USB_DeactivateEndpoint+0x1b4>)
 8005172:	4013      	ands	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	ec337800 	.word	0xec337800
 8005188:	eff37800 	.word	0xeff37800

0800518c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	@ 0x28
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4613      	mov	r3, r2
 8005198:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	f040 817f 	bne.w	80054ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d132      	bne.n	800521c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005214:	0cdb      	lsrs	r3, r3, #19
 8005216:	04db      	lsls	r3, r3, #19
 8005218:	6113      	str	r3, [r2, #16]
 800521a:	e097      	b.n	800534c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005236:	0cdb      	lsrs	r3, r3, #19
 8005238:	04db      	lsls	r3, r3, #19
 800523a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005256:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800525a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800525e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11a      	bne.n	800529c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	d903      	bls.n	800527a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	0151      	lsls	r1, r2, #5
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	440a      	add	r2, r1
 8005290:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005294:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005298:	6113      	str	r3, [r2, #16]
 800529a:	e044      	b.n	8005326 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	4413      	add	r3, r2
 80052a6:	1e5a      	subs	r2, r3, #1
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	8afb      	ldrh	r3, [r7, #22]
 80052c2:	04d9      	lsls	r1, r3, #19
 80052c4:	4ba4      	ldr	r3, [pc, #656]	@ (8005558 <USB_EPStartXfer+0x3cc>)
 80052c6:	400b      	ands	r3, r1
 80052c8:	69b9      	ldr	r1, [r7, #24]
 80052ca:	0148      	lsls	r0, r1, #5
 80052cc:	69f9      	ldr	r1, [r7, #28]
 80052ce:	4401      	add	r1, r0
 80052d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052d4:	4313      	orrs	r3, r2
 80052d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	791b      	ldrb	r3, [r3, #4]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d122      	bne.n	8005326 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80052fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	075b      	lsls	r3, r3, #29
 8005312:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005316:	69b9      	ldr	r1, [r7, #24]
 8005318:	0148      	lsls	r0, r1, #5
 800531a:	69f9      	ldr	r1, [r7, #28]
 800531c:	4401      	add	r1, r0
 800531e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005322:	4313      	orrs	r3, r2
 8005324:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	0148      	lsls	r0, r1, #5
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	4401      	add	r1, r0
 8005344:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d14b      	bne.n	80053ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	791b      	ldrb	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d128      	bne.n	80053c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d110      	bne.n	80053a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e00f      	b.n	80053c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	0151      	lsls	r1, r2, #5
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	440a      	add	r2, r1
 80053de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	e166      	b.n	80056b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005404:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005408:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	791b      	ldrb	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d015      	beq.n	800543e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 814e 	beq.w	80056b8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005422:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	2101      	movs	r1, #1
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	69f9      	ldr	r1, [r7, #28]
 8005434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005438:	4313      	orrs	r3, r2
 800543a:	634b      	str	r3, [r1, #52]	@ 0x34
 800543c:	e13c      	b.n	80056b8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544a:	2b00      	cmp	r3, #0
 800544c:	d110      	bne.n	8005470 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005468:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	e00f      	b.n	8005490 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	68d9      	ldr	r1, [r3, #12]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	b298      	uxth	r0, r3
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	4603      	mov	r3, r0
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f9b9 	bl	800581c <USB_WritePacket>
 80054aa:	e105      	b.n	80056b8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c6:	0cdb      	lsrs	r3, r3, #19
 80054c8:	04db      	lsls	r3, r3, #19
 80054ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d132      	bne.n	800555c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005524:	69b9      	ldr	r1, [r7, #24]
 8005526:	0148      	lsls	r0, r1, #5
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	4401      	add	r1, r0
 800552c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005530:	4313      	orrs	r3, r2
 8005532:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800554e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005552:	6113      	str	r3, [r2, #16]
 8005554:	e062      	b.n	800561c <USB_EPStartXfer+0x490>
 8005556:	bf00      	nop
 8005558:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d123      	bne.n	80055ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557a:	69b9      	ldr	r1, [r7, #24]
 800557c:	0148      	lsls	r0, r1, #5
 800557e:	69f9      	ldr	r1, [r7, #28]
 8005580:	4401      	add	r1, r0
 8005582:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005586:	4313      	orrs	r3, r2
 8005588:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	69fa      	ldr	r2, [r7, #28]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80055a8:	6113      	str	r3, [r2, #16]
 80055aa:	e037      	b.n	800561c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4413      	add	r3, r2
 80055b6:	1e5a      	subs	r2, r3, #1
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	8afa      	ldrh	r2, [r7, #22]
 80055c8:	fb03 f202 	mul.w	r2, r3, r2
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	8afb      	ldrh	r3, [r7, #22]
 80055e0:	04d9      	lsls	r1, r3, #19
 80055e2:	4b38      	ldr	r3, [pc, #224]	@ (80056c4 <USB_EPStartXfer+0x538>)
 80055e4:	400b      	ands	r3, r1
 80055e6:	69b9      	ldr	r1, [r7, #24]
 80055e8:	0148      	lsls	r0, r1, #5
 80055ea:	69f9      	ldr	r1, [r7, #28]
 80055ec:	4401      	add	r1, r0
 80055ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	0148      	lsls	r0, r1, #5
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	4401      	add	r1, r0
 8005614:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10d      	bne.n	800563e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68d9      	ldr	r1, [r3, #12]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563a:	460a      	mov	r2, r1
 800563c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d128      	bne.n	8005698 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d110      	bne.n	8005678 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005670:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00f      	b.n	8005698 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005696:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80056b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	1ff80000 	.word	0x1ff80000

080056c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d14a      	bne.n	800577c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056fe:	f040 8086 	bne.w	800580e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005720:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005724:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005744:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005748:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005756:	4293      	cmp	r3, r2
 8005758:	d902      	bls.n	8005760 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	75fb      	strb	r3, [r7, #23]
          break;
 800575e:	e056      	b.n	800580e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005778:	d0e7      	beq.n	800574a <USB_EPStopXfer+0x82>
 800577a:	e048      	b.n	800580e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005794:	d13b      	bne.n	800580e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	7812      	ldrb	r2, [r2, #0]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	7812      	ldrb	r2, [r2, #0]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d902      	bls.n	80057f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
          break;
 80057f2:	e00c      	b.n	800580e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800580c:	d0e7      	beq.n	80057de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800580e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800581c:	b480      	push	{r7}
 800581e:	b089      	sub	sp, #36	@ 0x24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4611      	mov	r1, r2
 8005828:	461a      	mov	r2, r3
 800582a:	460b      	mov	r3, r1
 800582c:	71fb      	strb	r3, [r7, #7]
 800582e:	4613      	mov	r3, r2
 8005830:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800583a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d123      	bne.n	800588a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005842:	88bb      	ldrh	r3, [r7, #4]
 8005844:	3303      	adds	r3, #3
 8005846:	089b      	lsrs	r3, r3, #2
 8005848:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	e018      	b.n	8005882 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	031a      	lsls	r2, r3, #12
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585c:	461a      	mov	r2, r3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3301      	adds	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	3301      	adds	r3, #1
 800586e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3301      	adds	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3301      	adds	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	3301      	adds	r3, #1
 8005880:	61bb      	str	r3, [r7, #24]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	429a      	cmp	r2, r3
 8005888:	d3e2      	bcc.n	8005850 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3724      	adds	r7, #36	@ 0x24
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005898:	b480      	push	{r7}
 800589a:	b08b      	sub	sp, #44	@ 0x2c
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058be:	2300      	movs	r3, #0
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	e014      	b.n	80058ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80058d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d2:	3301      	adds	r3, #1
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	3301      	adds	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058de:	3301      	adds	r3, #1
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	3301      	adds	r3, #1
 80058e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	3301      	adds	r3, #1
 80058ec:	623b      	str	r3, [r7, #32]
 80058ee:	6a3a      	ldr	r2, [r7, #32]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d3e6      	bcc.n	80058c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058f6:	8bfb      	ldrh	r3, [r7, #30]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01e      	beq.n	800593a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005906:	461a      	mov	r2, r3
 8005908:	f107 0310 	add.w	r3, r7, #16
 800590c:	6812      	ldr	r2, [r2, #0]
 800590e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
 800591c:	b2da      	uxtb	r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	701a      	strb	r2, [r3, #0]
      i++;
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	3301      	adds	r3, #1
 8005926:	623b      	str	r3, [r7, #32]
      pDest++;
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	3301      	adds	r3, #1
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800592e:	8bfb      	ldrh	r3, [r7, #30]
 8005930:	3b01      	subs	r3, #1
 8005932:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005934:	8bfb      	ldrh	r3, [r7, #30]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ea      	bne.n	8005910 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800593c:	4618      	mov	r0, r3
 800593e:	372c      	adds	r7, #44	@ 0x2c
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d12c      	bne.n	80059be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	db12      	blt.n	800599c <USB_EPSetStall+0x54>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00f      	beq.n	800599c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005996:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800599a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	e02b      	b.n	8005a16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	db12      	blt.n	80059f6 <USB_EPSetStall+0xae>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00f      	beq.n	80059f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005a14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	785b      	ldrb	r3, [r3, #1]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d128      	bne.n	8005a92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	791b      	ldrb	r3, [r3, #4]
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d003      	beq.n	8005a70 <USB_EPClearStall+0x4c>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	791b      	ldrb	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d138      	bne.n	8005ae2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e027      	b.n	8005ae2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ab0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	791b      	ldrb	r3, [r3, #4]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d003      	beq.n	8005ac2 <USB_EPClearStall+0x9e>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	791b      	ldrb	r3, [r3, #4]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d10f      	bne.n	8005ae2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	0151      	lsls	r1, r2, #5
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	440a      	add	r2, r1
 8005ad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ae0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b56:	f023 0303 	bic.w	r3, r3, #3
 8005b5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b6a:	f023 0302 	bic.w	r3, r3, #2
 8005b6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b98:	f023 0303 	bic.w	r3, r3, #3
 8005b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b085      	sub	sp, #20
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	b29b      	uxth	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4013      	ands	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d20:	f023 0307 	bic.w	r3, r3, #7
 8005d24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	460b      	mov	r3, r1
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	333c      	adds	r3, #60	@ 0x3c
 8005d5e:	3304      	adds	r3, #4
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4a26      	ldr	r2, [pc, #152]	@ (8005e00 <USB_EP0_OutStart+0xb8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d90a      	bls.n	8005d82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d7c:	d101      	bne.n	8005d82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e037      	b.n	8005df2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005da0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db0:	f043 0318 	orr.w	r3, r3, #24
 8005db4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dc4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005dc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005dca:	7afb      	ldrb	r3, [r7, #11]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d10f      	bne.n	8005df0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005dee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	4f54300a 	.word	0x4f54300a

08005e04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e1c:	d901      	bls.n	8005e22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e01b      	b.n	8005e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	daf2      	bge.n	8005e10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f043 0201 	orr.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e46:	d901      	bls.n	8005e4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e006      	b.n	8005e5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d0f0      	beq.n	8005e3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e78:	f002 fcd4 	bl	8008824 <USBD_static_malloc>
 8005e7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d109      	bne.n	8005e98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32b0      	adds	r2, #176	@ 0xb0
 8005e8e:	2100      	movs	r1, #0
 8005e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e94:	2302      	movs	r3, #2
 8005e96:	e0d4      	b.n	8006042 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f003 fb1f 	bl	80094e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	32b0      	adds	r2, #176	@ 0xb0
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	32b0      	adds	r2, #176	@ 0xb0
 8005ebe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	7c1b      	ldrb	r3, [r3, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d138      	bne.n	8005f42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ed0:	4b5e      	ldr	r3, [pc, #376]	@ (800604c <USBD_CDC_Init+0x1e4>)
 8005ed2:	7819      	ldrb	r1, [r3, #0]
 8005ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ed8:	2202      	movs	r2, #2
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f002 fb7f 	bl	80085de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800604c <USBD_CDC_Init+0x1e4>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005efa:	4b55      	ldr	r3, [pc, #340]	@ (8006050 <USBD_CDC_Init+0x1e8>)
 8005efc:	7819      	ldrb	r1, [r3, #0]
 8005efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f02:	2202      	movs	r2, #2
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 fb6a 	bl	80085de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f0a:	4b51      	ldr	r3, [pc, #324]	@ (8006050 <USBD_CDC_Init+0x1e8>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	f003 020f 	and.w	r2, r3, #15
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f22:	2201      	movs	r2, #1
 8005f24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f26:	4b4b      	ldr	r3, [pc, #300]	@ (8006054 <USBD_CDC_Init+0x1ec>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	3326      	adds	r3, #38	@ 0x26
 8005f3c:	2210      	movs	r2, #16
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e035      	b.n	8005fae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f42:	4b42      	ldr	r3, [pc, #264]	@ (800604c <USBD_CDC_Init+0x1e4>)
 8005f44:	7819      	ldrb	r1, [r3, #0]
 8005f46:	2340      	movs	r3, #64	@ 0x40
 8005f48:	2202      	movs	r2, #2
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 fb47 	bl	80085de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f50:	4b3e      	ldr	r3, [pc, #248]	@ (800604c <USBD_CDC_Init+0x1e4>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	3324      	adds	r3, #36	@ 0x24
 8005f66:	2201      	movs	r2, #1
 8005f68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f6a:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <USBD_CDC_Init+0x1e8>)
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	2340      	movs	r3, #64	@ 0x40
 8005f70:	2202      	movs	r2, #2
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fb33 	bl	80085de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f78:	4b35      	ldr	r3, [pc, #212]	@ (8006050 <USBD_CDC_Init+0x1e8>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f90:	2201      	movs	r2, #1
 8005f92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f94:	4b2f      	ldr	r3, [pc, #188]	@ (8006054 <USBD_CDC_Init+0x1ec>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3326      	adds	r3, #38	@ 0x26
 8005faa:	2210      	movs	r2, #16
 8005fac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fae:	4b29      	ldr	r3, [pc, #164]	@ (8006054 <USBD_CDC_Init+0x1ec>)
 8005fb0:	7819      	ldrb	r1, [r3, #0]
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f002 fb11 	bl	80085de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005fbc:	4b25      	ldr	r3, [pc, #148]	@ (8006054 <USBD_CDC_Init+0x1ec>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	3324      	adds	r3, #36	@ 0x24
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	33b0      	adds	r3, #176	@ 0xb0
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800600c:	2302      	movs	r3, #2
 800600e:	e018      	b.n	8006042 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7c1b      	ldrb	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006018:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <USBD_CDC_Init+0x1e8>)
 800601a:	7819      	ldrb	r1, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f002 fbc8 	bl	80087bc <USBD_LL_PrepareReceive>
 800602c:	e008      	b.n	8006040 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800602e:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <USBD_CDC_Init+0x1e8>)
 8006030:	7819      	ldrb	r1, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006038:	2340      	movs	r3, #64	@ 0x40
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f002 fbbe 	bl	80087bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2000009b 	.word	0x2000009b
 8006050:	2000009c 	.word	0x2000009c
 8006054:	2000009d 	.word	0x2000009d

08006058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006064:	4b3a      	ldr	r3, [pc, #232]	@ (8006150 <USBD_CDC_DeInit+0xf8>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f002 fadd 	bl	800862a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006070:	4b37      	ldr	r3, [pc, #220]	@ (8006150 <USBD_CDC_DeInit+0xf8>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f003 020f 	and.w	r2, r3, #15
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	3324      	adds	r3, #36	@ 0x24
 8006086:	2200      	movs	r2, #0
 8006088:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800608a:	4b32      	ldr	r3, [pc, #200]	@ (8006154 <USBD_CDC_DeInit+0xfc>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f002 faca 	bl	800862a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006096:	4b2f      	ldr	r3, [pc, #188]	@ (8006154 <USBD_CDC_DeInit+0xfc>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f003 020f 	and.w	r2, r3, #15
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060ae:	2200      	movs	r2, #0
 80060b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060b2:	4b29      	ldr	r3, [pc, #164]	@ (8006158 <USBD_CDC_DeInit+0x100>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f002 fab6 	bl	800862a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060be:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <USBD_CDC_DeInit+0x100>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 020f 	and.w	r2, r3, #15
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	3324      	adds	r3, #36	@ 0x24
 80060d4:	2200      	movs	r2, #0
 80060d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80060d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006158 <USBD_CDC_DeInit+0x100>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	f003 020f 	and.w	r2, r3, #15
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	3326      	adds	r3, #38	@ 0x26
 80060ee:	2200      	movs	r2, #0
 80060f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	32b0      	adds	r2, #176	@ 0xb0
 80060fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01f      	beq.n	8006144 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	33b0      	adds	r3, #176	@ 0xb0
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32b0      	adds	r2, #176	@ 0xb0
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	4618      	mov	r0, r3
 8006128:	f002 fb8a 	bl	8008840 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	32b0      	adds	r2, #176	@ 0xb0
 8006136:	2100      	movs	r1, #0
 8006138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	2000009b 	.word	0x2000009b
 8006154:	2000009c 	.word	0x2000009c
 8006158:	2000009d 	.word	0x2000009d

0800615c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	32b0      	adds	r2, #176	@ 0xb0
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006188:	2303      	movs	r3, #3
 800618a:	e0bf      	b.n	800630c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006194:	2b00      	cmp	r3, #0
 8006196:	d050      	beq.n	800623a <USBD_CDC_Setup+0xde>
 8006198:	2b20      	cmp	r3, #32
 800619a:	f040 80af 	bne.w	80062fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	88db      	ldrh	r3, [r3, #6]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d03a      	beq.n	800621c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b25b      	sxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da1b      	bge.n	80061e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	33b0      	adds	r3, #176	@ 0xb0
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80061c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	88d2      	ldrh	r2, [r2, #6]
 80061cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	88db      	ldrh	r3, [r3, #6]
 80061d2:	2b07      	cmp	r3, #7
 80061d4:	bf28      	it	cs
 80061d6:	2307      	movcs	r3, #7
 80061d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	89fa      	ldrh	r2, [r7, #14]
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 fd93 	bl	8007d0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80061e6:	e090      	b.n	800630a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785a      	ldrb	r2, [r3, #1]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	88db      	ldrh	r3, [r3, #6]
 80061f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80061f8:	d803      	bhi.n	8006202 <USBD_CDC_Setup+0xa6>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	88db      	ldrh	r3, [r3, #6]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	e000      	b.n	8006204 <USBD_CDC_Setup+0xa8>
 8006202:	2240      	movs	r2, #64	@ 0x40
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800620a:	6939      	ldr	r1, [r7, #16]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006212:	461a      	mov	r2, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 fda5 	bl	8007d64 <USBD_CtlPrepareRx>
      break;
 800621a:	e076      	b.n	800630a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	33b0      	adds	r3, #176	@ 0xb0
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	7850      	ldrb	r0, [r2, #1]
 8006232:	2200      	movs	r2, #0
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	4798      	blx	r3
      break;
 8006238:	e067      	b.n	800630a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	785b      	ldrb	r3, [r3, #1]
 800623e:	2b0b      	cmp	r3, #11
 8006240:	d851      	bhi.n	80062e6 <USBD_CDC_Setup+0x18a>
 8006242:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <USBD_CDC_Setup+0xec>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006279 	.word	0x08006279
 800624c:	080062f5 	.word	0x080062f5
 8006250:	080062e7 	.word	0x080062e7
 8006254:	080062e7 	.word	0x080062e7
 8006258:	080062e7 	.word	0x080062e7
 800625c:	080062e7 	.word	0x080062e7
 8006260:	080062e7 	.word	0x080062e7
 8006264:	080062e7 	.word	0x080062e7
 8006268:	080062e7 	.word	0x080062e7
 800626c:	080062e7 	.word	0x080062e7
 8006270:	080062a3 	.word	0x080062a3
 8006274:	080062cd 	.word	0x080062cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b03      	cmp	r3, #3
 8006282:	d107      	bne.n	8006294 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006284:	f107 030a 	add.w	r3, r7, #10
 8006288:	2202      	movs	r2, #2
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 fd3d 	bl	8007d0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006292:	e032      	b.n	80062fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fcbb 	bl	8007c12 <USBD_CtlError>
            ret = USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	75fb      	strb	r3, [r7, #23]
          break;
 80062a0:	e02b      	b.n	80062fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d107      	bne.n	80062be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062ae:	f107 030d 	add.w	r3, r7, #13
 80062b2:	2201      	movs	r2, #1
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fd28 	bl	8007d0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062bc:	e01d      	b.n	80062fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f001 fca6 	bl	8007c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80062c6:	2303      	movs	r3, #3
 80062c8:	75fb      	strb	r3, [r7, #23]
          break;
 80062ca:	e016      	b.n	80062fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d00f      	beq.n	80062f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 fc99 	bl	8007c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062e4:	e008      	b.n	80062f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 fc92 	bl	8007c12 <USBD_CtlError>
          ret = USBD_FAIL;
 80062ee:	2303      	movs	r3, #3
 80062f0:	75fb      	strb	r3, [r7, #23]
          break;
 80062f2:	e002      	b.n	80062fa <USBD_CDC_Setup+0x19e>
          break;
 80062f4:	bf00      	nop
 80062f6:	e008      	b.n	800630a <USBD_CDC_Setup+0x1ae>
          break;
 80062f8:	bf00      	nop
      }
      break;
 80062fa:	e006      	b.n	800630a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 fc87 	bl	8007c12 <USBD_CtlError>
      ret = USBD_FAIL;
 8006304:	2303      	movs	r3, #3
 8006306:	75fb      	strb	r3, [r7, #23]
      break;
 8006308:	bf00      	nop
  }

  return (uint8_t)ret;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006326:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	32b0      	adds	r2, #176	@ 0xb0
 8006332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	e065      	b.n	800640a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	32b0      	adds	r2, #176	@ 0xb0
 8006348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800634c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	6879      	ldr	r1, [r7, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3318      	adds	r3, #24
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02f      	beq.n	80063c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	f003 020f 	and.w	r2, r3, #15
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	440b      	add	r3, r1
 800637a:	3318      	adds	r3, #24
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 010f 	and.w	r1, r3, #15
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	460b      	mov	r3, r1
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	440b      	add	r3, r1
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4403      	add	r3, r0
 8006390:	331c      	adds	r3, #28
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	fbb2 f1f3 	udiv	r1, r2, r3
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d112      	bne.n	80063c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	f003 020f 	and.w	r2, r3, #15
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	3318      	adds	r3, #24
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063ba:	78f9      	ldrb	r1, [r7, #3]
 80063bc:	2300      	movs	r3, #0
 80063be:	2200      	movs	r2, #0
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f002 f9da 	bl	800877a <USBD_LL_Transmit>
 80063c6:	e01f      	b.n	8006408 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	33b0      	adds	r3, #176	@ 0xb0
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d010      	beq.n	8006408 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	33b0      	adds	r3, #176	@ 0xb0
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	32b0      	adds	r2, #176	@ 0xb0
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	32b0      	adds	r2, #176	@ 0xb0
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006440:	2303      	movs	r3, #3
 8006442:	e01a      	b.n	800647a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f002 f9d8 	bl	80087fe <USBD_LL_GetRxDataSize>
 800644e:	4602      	mov	r2, r0
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	33b0      	adds	r3, #176	@ 0xb0
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006474:	4611      	mov	r1, r2
 8006476:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	32b0      	adds	r2, #176	@ 0xb0
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e024      	b.n	80064ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	33b0      	adds	r3, #176	@ 0xb0
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d019      	beq.n	80064ec <USBD_CDC_EP0_RxReady+0x6a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80064be:	2bff      	cmp	r3, #255	@ 0xff
 80064c0:	d014      	beq.n	80064ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	33b0      	adds	r3, #176	@ 0xb0
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80064da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	22ff      	movs	r2, #255	@ 0xff
 80064e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006500:	2182      	movs	r1, #130	@ 0x82
 8006502:	4818      	ldr	r0, [pc, #96]	@ (8006564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006504:	f000 fd4f 	bl	8006fa6 <USBD_GetEpDesc>
 8006508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800650a:	2101      	movs	r1, #1
 800650c:	4815      	ldr	r0, [pc, #84]	@ (8006564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800650e:	f000 fd4a 	bl	8006fa6 <USBD_GetEpDesc>
 8006512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006514:	2181      	movs	r1, #129	@ 0x81
 8006516:	4813      	ldr	r0, [pc, #76]	@ (8006564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006518:	f000 fd45 	bl	8006fa6 <USBD_GetEpDesc>
 800651c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2210      	movs	r2, #16
 8006528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2200      	movs	r2, #0
 8006534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006538:	711a      	strb	r2, [r3, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800654c:	711a      	strb	r2, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2243      	movs	r2, #67	@ 0x43
 8006556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006558:	4b02      	ldr	r3, [pc, #8]	@ (8006564 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000058 	.word	0x20000058

08006568 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006570:	2182      	movs	r1, #130	@ 0x82
 8006572:	4818      	ldr	r0, [pc, #96]	@ (80065d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006574:	f000 fd17 	bl	8006fa6 <USBD_GetEpDesc>
 8006578:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800657a:	2101      	movs	r1, #1
 800657c:	4815      	ldr	r0, [pc, #84]	@ (80065d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800657e:	f000 fd12 	bl	8006fa6 <USBD_GetEpDesc>
 8006582:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006584:	2181      	movs	r1, #129	@ 0x81
 8006586:	4813      	ldr	r0, [pc, #76]	@ (80065d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006588:	f000 fd0d 	bl	8006fa6 <USBD_GetEpDesc>
 800658c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	2210      	movs	r2, #16
 8006598:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d006      	beq.n	80065ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	2200      	movs	r2, #0
 80065a4:	711a      	strb	r2, [r3, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f042 0202 	orr.w	r2, r2, #2
 80065ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d006      	beq.n	80065c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	711a      	strb	r2, [r3, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f042 0202 	orr.w	r2, r2, #2
 80065c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2243      	movs	r2, #67	@ 0x43
 80065c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065c8:	4b02      	ldr	r3, [pc, #8]	@ (80065d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000058 	.word	0x20000058

080065d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065e0:	2182      	movs	r1, #130	@ 0x82
 80065e2:	4818      	ldr	r0, [pc, #96]	@ (8006644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065e4:	f000 fcdf 	bl	8006fa6 <USBD_GetEpDesc>
 80065e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ea:	2101      	movs	r1, #1
 80065ec:	4815      	ldr	r0, [pc, #84]	@ (8006644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065ee:	f000 fcda 	bl	8006fa6 <USBD_GetEpDesc>
 80065f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065f4:	2181      	movs	r1, #129	@ 0x81
 80065f6:	4813      	ldr	r0, [pc, #76]	@ (8006644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065f8:	f000 fcd5 	bl	8006fa6 <USBD_GetEpDesc>
 80065fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d002      	beq.n	800660a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2210      	movs	r2, #16
 8006608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d006      	beq.n	800661e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2200      	movs	r2, #0
 8006614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006618:	711a      	strb	r2, [r3, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d006      	beq.n	8006632 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800662c:	711a      	strb	r2, [r3, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2243      	movs	r2, #67	@ 0x43
 8006636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006638:	4b02      	ldr	r3, [pc, #8]	@ (8006644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000058 	.word	0x20000058

08006648 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	220a      	movs	r2, #10
 8006654:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006656:	4b03      	ldr	r3, [pc, #12]	@ (8006664 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	20000014 	.word	0x20000014

08006668 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006678:	2303      	movs	r3, #3
 800667a:	e009      	b.n	8006690 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	33b0      	adds	r3, #176	@ 0xb0
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	32b0      	adds	r2, #176	@ 0xb0
 80066b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066be:	2303      	movs	r3, #3
 80066c0:	e008      	b.n	80066d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	32b0      	adds	r2, #176	@ 0xb0
 80066f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	e004      	b.n	800670e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	32b0      	adds	r2, #176	@ 0xb0
 800672e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006732:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006734:	2301      	movs	r3, #1
 8006736:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800673e:	2303      	movs	r3, #3
 8006740:	e025      	b.n	800678e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11f      	bne.n	800678c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2201      	movs	r2, #1
 8006750:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006754:	4b10      	ldr	r3, [pc, #64]	@ (8006798 <USBD_CDC_TransmitPacket+0x7c>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 020f 	and.w	r2, r3, #15
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4613      	mov	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4403      	add	r3, r0
 800676e:	3318      	adds	r3, #24
 8006770:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006772:	4b09      	ldr	r3, [pc, #36]	@ (8006798 <USBD_CDC_TransmitPacket+0x7c>)
 8006774:	7819      	ldrb	r1, [r3, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fff9 	bl	800877a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800678c:	7bfb      	ldrb	r3, [r7, #15]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000009b 	.word	0x2000009b

0800679c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32b0      	adds	r2, #176	@ 0xb0
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	32b0      	adds	r2, #176	@ 0xb0
 80067be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e018      	b.n	80067fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7c1b      	ldrb	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006804 <USBD_CDC_ReceivePacket+0x68>)
 80067d4:	7819      	ldrb	r1, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f001 ffeb 	bl	80087bc <USBD_LL_PrepareReceive>
 80067e6:	e008      	b.n	80067fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <USBD_CDC_ReceivePacket+0x68>)
 80067ea:	7819      	ldrb	r1, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067f2:	2340      	movs	r3, #64	@ 0x40
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 ffe1 	bl	80087bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	2000009c 	.word	0x2000009c

08006808 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	e01f      	b.n	8006860 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	79fa      	ldrb	r2, [r7, #7]
 8006852:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f001 fe5b 	bl	8008510 <USBD_LL_Init>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	e025      	b.n	80068cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32ae      	adds	r2, #174	@ 0xae
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00f      	beq.n	80068bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	32ae      	adds	r2, #174	@ 0xae
 80068a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	f107 020e 	add.w	r2, r7, #14
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	4602      	mov	r2, r0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fe63 	bl	80085a8 <USBD_LL_Start>
 80068e2:	4603      	mov	r3, r0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	460b      	mov	r3, r1
 800690c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	78fa      	ldrb	r2, [r7, #3]
 8006926:	4611      	mov	r1, r2
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006930:	7bfb      	ldrb	r3, [r7, #15]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	4611      	mov	r1, r2
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006960:	2303      	movs	r3, #3
 8006962:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f90c 	bl	8007b9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d01a      	beq.n	80069e0 <USBD_LL_SetupStage+0x72>
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d822      	bhi.n	80069f4 <USBD_LL_SetupStage+0x86>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <USBD_LL_SetupStage+0x4a>
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d00a      	beq.n	80069cc <USBD_LL_SetupStage+0x5e>
 80069b6:	e01d      	b.n	80069f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fb63 	bl	800708c <USBD_StdDevReq>
 80069c6:	4603      	mov	r3, r0
 80069c8:	73fb      	strb	r3, [r7, #15]
      break;
 80069ca:	e020      	b.n	8006a0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fbcb 	bl	8007170 <USBD_StdItfReq>
 80069da:	4603      	mov	r3, r0
 80069dc:	73fb      	strb	r3, [r7, #15]
      break;
 80069de:	e016      	b.n	8006a0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fc2d 	bl	8007248 <USBD_StdEPReq>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]
      break;
 80069f2:	e00c      	b.n	8006a0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fe30 	bl	8008668 <USBD_LL_StallEP>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a0c:	bf00      	nop
  }

  return ret;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	460b      	mov	r3, r1
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d16e      	bne.n	8006b0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006a36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	f040 8098 	bne.w	8006b74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d913      	bls.n	8006a78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	1ad2      	subs	r2, r2, r3
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bf28      	it	cs
 8006a6a:	4613      	movcs	r3, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f001 f994 	bl	8007d9e <USBD_CtlContinueRx>
 8006a76:	e07d      	b.n	8006b74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d014      	beq.n	8006ab0 <USBD_LL_DataOutStage+0x98>
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d81d      	bhi.n	8006ac6 <USBD_LL_DataOutStage+0xae>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <USBD_LL_DataOutStage+0x7c>
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d003      	beq.n	8006a9a <USBD_LL_DataOutStage+0x82>
 8006a92:	e018      	b.n	8006ac6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	75bb      	strb	r3, [r7, #22]
            break;
 8006a98:	e018      	b.n	8006acc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fa64 	bl	8006f72 <USBD_CoreFindIF>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	75bb      	strb	r3, [r7, #22]
            break;
 8006aae:	e00d      	b.n	8006acc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	4619      	mov	r1, r3
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fa66 	bl	8006f8c <USBD_CoreFindEP>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ac4:	e002      	b.n	8006acc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75bb      	strb	r3, [r7, #22]
            break;
 8006aca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006acc:	7dbb      	ldrb	r3, [r7, #22]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d119      	bne.n	8006b06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d113      	bne.n	8006b06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006ade:	7dba      	ldrb	r2, [r7, #22]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	32ae      	adds	r2, #174	@ 0xae
 8006ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006aee:	7dba      	ldrb	r2, [r7, #22]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006af6:	7dba      	ldrb	r2, [r7, #22]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	32ae      	adds	r2, #174	@ 0xae
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 f95a 	bl	8007dc0 <USBD_CtlSendStatus>
 8006b0c:	e032      	b.n	8006b74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	4619      	mov	r1, r3
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fa37 	bl	8006f8c <USBD_CoreFindEP>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b22:	7dbb      	ldrb	r3, [r7, #22]
 8006b24:	2bff      	cmp	r3, #255	@ 0xff
 8006b26:	d025      	beq.n	8006b74 <USBD_LL_DataOutStage+0x15c>
 8006b28:	7dbb      	ldrb	r3, [r7, #22]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d122      	bne.n	8006b74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d117      	bne.n	8006b6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b3a:	7dba      	ldrb	r2, [r7, #22]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	32ae      	adds	r2, #174	@ 0xae
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00f      	beq.n	8006b6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b4a:	7dba      	ldrb	r2, [r7, #22]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b52:	7dba      	ldrb	r2, [r7, #22]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	32ae      	adds	r2, #174	@ 0xae
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	7afa      	ldrb	r2, [r7, #11]
 8006b60:	4611      	mov	r1, r2
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	4798      	blx	r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	e000      	b.n	8006b76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	460b      	mov	r3, r1
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d16f      	bne.n	8006c72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3314      	adds	r3, #20
 8006b96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d15a      	bne.n	8006c58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d914      	bls.n	8006bd8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	1ad2      	subs	r2, r2, r3
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f001 f8bc 	bl	8007d42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2100      	movs	r1, #0
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f001 fdf3 	bl	80087bc <USBD_LL_PrepareReceive>
 8006bd6:	e03f      	b.n	8006c58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d11c      	bne.n	8006c1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d316      	bcc.n	8006c1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d20f      	bcs.n	8006c1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f001 f89d 	bl	8007d42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c10:	2300      	movs	r3, #0
 8006c12:	2200      	movs	r2, #0
 8006c14:	2100      	movs	r1, #0
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f001 fdd0 	bl	80087bc <USBD_LL_PrepareReceive>
 8006c1c:	e01c      	b.n	8006c58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d10f      	bne.n	8006c4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4a:	2180      	movs	r1, #128	@ 0x80
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f001 fd0b 	bl	8008668 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f001 f8c7 	bl	8007de6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d03a      	beq.n	8006cd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f7ff fe42 	bl	80068ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c70:	e032      	b.n	8006cd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c72:	7afb      	ldrb	r3, [r7, #11]
 8006c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f985 	bl	8006f8c <USBD_CoreFindEP>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2bff      	cmp	r3, #255	@ 0xff
 8006c8a:	d025      	beq.n	8006cd8 <USBD_LL_DataInStage+0x15a>
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d122      	bne.n	8006cd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d11c      	bne.n	8006cd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c9e:	7dfa      	ldrb	r2, [r7, #23]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	32ae      	adds	r2, #174	@ 0xae
 8006ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d014      	beq.n	8006cd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cae:	7dfa      	ldrb	r2, [r7, #23]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cb6:	7dfa      	ldrb	r2, [r7, #23]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	32ae      	adds	r2, #174	@ 0xae
 8006cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	7afa      	ldrb	r2, [r7, #11]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	4798      	blx	r3
 8006cca:	4603      	mov	r3, r0
 8006ccc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006cce:	7dbb      	ldrb	r3, [r7, #22]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006cd4:	7dbb      	ldrb	r3, [r7, #22]
 8006cd6:	e000      	b.n	8006cda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d014      	beq.n	8006d48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00e      	beq.n	8006d48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6852      	ldr	r2, [r2, #4]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	4611      	mov	r1, r2
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	4798      	blx	r3
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d48:	2340      	movs	r3, #64	@ 0x40
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fc45 	bl	80085de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2240      	movs	r2, #64	@ 0x40
 8006d60:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d64:	2340      	movs	r3, #64	@ 0x40
 8006d66:	2200      	movs	r2, #0
 8006d68:	2180      	movs	r1, #128	@ 0x80
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fc37 	bl	80085de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2240      	movs	r2, #64	@ 0x40
 8006d7a:	621a      	str	r2, [r3, #32]

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d006      	beq.n	8006dc8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2204      	movs	r2, #4
 8006dcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d106      	bne.n	8006e00 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d110      	bne.n	8006e44 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32ae      	adds	r2, #174	@ 0xae
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e01c      	b.n	8006eaa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d115      	bne.n	8006ea8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32ae      	adds	r2, #174	@ 0xae
 8006e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32ae      	adds	r2, #174	@ 0xae
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	32ae      	adds	r2, #174	@ 0xae
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e01c      	b.n	8006f0e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d115      	bne.n	8006f0c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32ae      	adds	r2, #174	@ 0xae
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	32ae      	adds	r2, #174	@ 0xae
 8006efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	78fa      	ldrb	r2, [r7, #3]
 8006f06:	4611      	mov	r1, r2
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00e      	beq.n	8006f68 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6852      	ldr	r2, [r2, #4]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	4611      	mov	r1, r2
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f64:	2303      	movs	r3, #3
 8006f66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f7e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	370c      	adds	r7, #12
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b086      	sub	sp, #24
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	7812      	ldrb	r2, [r2, #0]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d91f      	bls.n	800700c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006fd2:	e013      	b.n	8006ffc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006fd4:	f107 030a 	add.w	r3, r7, #10
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	f000 f81b 	bl	8007016 <USBD_GetNextDesc>
 8006fe0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b05      	cmp	r3, #5
 8006fe8:	d108      	bne.n	8006ffc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	789b      	ldrb	r3, [r3, #2]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d008      	beq.n	800700a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	885b      	ldrh	r3, [r3, #2]
 8007000:	b29a      	uxth	r2, r3
 8007002:	897b      	ldrh	r3, [r7, #10]
 8007004:	429a      	cmp	r2, r3
 8007006:	d8e5      	bhi.n	8006fd4 <USBD_GetEpDesc+0x2e>
 8007008:	e000      	b.n	800700c <USBD_GetEpDesc+0x66>
          break;
 800700a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800700c:	693b      	ldr	r3, [r7, #16]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	881b      	ldrh	r3, [r3, #0]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	7812      	ldrb	r2, [r2, #0]
 800702c:	4413      	add	r3, r2
 800702e:	b29a      	uxth	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4413      	add	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	3301      	adds	r3, #1
 8007064:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800706c:	8a3b      	ldrh	r3, [r7, #16]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	b21a      	sxth	r2, r3
 8007072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007076:	4313      	orrs	r3, r2
 8007078:	b21b      	sxth	r3, r3
 800707a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800707c:	89fb      	ldrh	r3, [r7, #14]
}
 800707e:	4618      	mov	r0, r3
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070a2:	2b40      	cmp	r3, #64	@ 0x40
 80070a4:	d005      	beq.n	80070b2 <USBD_StdDevReq+0x26>
 80070a6:	2b40      	cmp	r3, #64	@ 0x40
 80070a8:	d857      	bhi.n	800715a <USBD_StdDevReq+0xce>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00f      	beq.n	80070ce <USBD_StdDevReq+0x42>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d153      	bne.n	800715a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	32ae      	adds	r2, #174	@ 0xae
 80070bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
      break;
 80070cc:	e04a      	b.n	8007164 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d83b      	bhi.n	800714e <USBD_StdDevReq+0xc2>
 80070d6:	a201      	add	r2, pc, #4	@ (adr r2, 80070dc <USBD_StdDevReq+0x50>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	08007131 	.word	0x08007131
 80070e0:	08007145 	.word	0x08007145
 80070e4:	0800714f 	.word	0x0800714f
 80070e8:	0800713b 	.word	0x0800713b
 80070ec:	0800714f 	.word	0x0800714f
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	08007105 	.word	0x08007105
 80070f8:	0800714f 	.word	0x0800714f
 80070fc:	08007127 	.word	0x08007127
 8007100:	08007119 	.word	0x08007119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fa3c 	bl	8007584 <USBD_GetDescriptor>
          break;
 800710c:	e024      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fba1 	bl	8007858 <USBD_SetAddress>
          break;
 8007116:	e01f      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007118:	6839      	ldr	r1, [r7, #0]
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fbe0 	bl	80078e0 <USBD_SetConfig>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]
          break;
 8007124:	e018      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc83 	bl	8007a34 <USBD_GetConfig>
          break;
 800712e:	e013      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fcb4 	bl	8007aa0 <USBD_GetStatus>
          break;
 8007138:	e00e      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fce3 	bl	8007b08 <USBD_SetFeature>
          break;
 8007142:	e009      	b.n	8007158 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fd07 	bl	8007b5a <USBD_ClrFeature>
          break;
 800714c:	e004      	b.n	8007158 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fd5e 	bl	8007c12 <USBD_CtlError>
          break;
 8007156:	bf00      	nop
      }
      break;
 8007158:	e004      	b.n	8007164 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fd58 	bl	8007c12 <USBD_CtlError>
      break;
 8007162:	bf00      	nop
  }

  return ret;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop

08007170 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007186:	2b40      	cmp	r3, #64	@ 0x40
 8007188:	d005      	beq.n	8007196 <USBD_StdItfReq+0x26>
 800718a:	2b40      	cmp	r3, #64	@ 0x40
 800718c:	d852      	bhi.n	8007234 <USBD_StdItfReq+0xc4>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <USBD_StdItfReq+0x26>
 8007192:	2b20      	cmp	r3, #32
 8007194:	d14e      	bne.n	8007234 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719c:	b2db      	uxtb	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d840      	bhi.n	8007226 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	889b      	ldrh	r3, [r3, #4]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d836      	bhi.n	800721c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	889b      	ldrh	r3, [r3, #4]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fedb 	bl	8006f72 <USBD_CoreFindIF>
 80071bc:	4603      	mov	r3, r0
 80071be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	2bff      	cmp	r3, #255	@ 0xff
 80071c4:	d01d      	beq.n	8007202 <USBD_StdItfReq+0x92>
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d11a      	bne.n	8007202 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80071cc:	7bba      	ldrb	r2, [r7, #14]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	32ae      	adds	r2, #174	@ 0xae
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00f      	beq.n	80071fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80071dc:	7bba      	ldrb	r2, [r7, #14]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80071e4:	7bba      	ldrb	r2, [r7, #14]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32ae      	adds	r2, #174	@ 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	4798      	blx	r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80071fa:	e004      	b.n	8007206 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007200:	e001      	b.n	8007206 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007202:	2303      	movs	r3, #3
 8007204:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d110      	bne.n	8007230 <USBD_StdItfReq+0xc0>
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10d      	bne.n	8007230 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fdd3 	bl	8007dc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800721a:	e009      	b.n	8007230 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fcf7 	bl	8007c12 <USBD_CtlError>
          break;
 8007224:	e004      	b.n	8007230 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fcf2 	bl	8007c12 <USBD_CtlError>
          break;
 800722e:	e000      	b.n	8007232 <USBD_StdItfReq+0xc2>
          break;
 8007230:	bf00      	nop
      }
      break;
 8007232:	e004      	b.n	800723e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fceb 	bl	8007c12 <USBD_CtlError>
      break;
 800723c:	bf00      	nop
  }

  return ret;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	889b      	ldrh	r3, [r3, #4]
 800725a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007264:	2b40      	cmp	r3, #64	@ 0x40
 8007266:	d007      	beq.n	8007278 <USBD_StdEPReq+0x30>
 8007268:	2b40      	cmp	r3, #64	@ 0x40
 800726a:	f200 817f 	bhi.w	800756c <USBD_StdEPReq+0x324>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d02a      	beq.n	80072c8 <USBD_StdEPReq+0x80>
 8007272:	2b20      	cmp	r3, #32
 8007274:	f040 817a 	bne.w	800756c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff fe85 	bl	8006f8c <USBD_CoreFindEP>
 8007282:	4603      	mov	r3, r0
 8007284:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007286:	7b7b      	ldrb	r3, [r7, #13]
 8007288:	2bff      	cmp	r3, #255	@ 0xff
 800728a:	f000 8174 	beq.w	8007576 <USBD_StdEPReq+0x32e>
 800728e:	7b7b      	ldrb	r3, [r7, #13]
 8007290:	2b00      	cmp	r3, #0
 8007292:	f040 8170 	bne.w	8007576 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007296:	7b7a      	ldrb	r2, [r7, #13]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800729e:	7b7a      	ldrb	r2, [r7, #13]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32ae      	adds	r2, #174	@ 0xae
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8163 	beq.w	8007576 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072b0:	7b7a      	ldrb	r2, [r7, #13]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	32ae      	adds	r2, #174	@ 0xae
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072c6:	e156      	b.n	8007576 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	785b      	ldrb	r3, [r3, #1]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d008      	beq.n	80072e2 <USBD_StdEPReq+0x9a>
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	f300 8145 	bgt.w	8007560 <USBD_StdEPReq+0x318>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 809b 	beq.w	8007412 <USBD_StdEPReq+0x1ca>
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d03c      	beq.n	800735a <USBD_StdEPReq+0x112>
 80072e0:	e13e      	b.n	8007560 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d002      	beq.n	80072f4 <USBD_StdEPReq+0xac>
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d016      	beq.n	8007320 <USBD_StdEPReq+0xd8>
 80072f2:	e02c      	b.n	800734e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00d      	beq.n	8007316 <USBD_StdEPReq+0xce>
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b80      	cmp	r3, #128	@ 0x80
 80072fe:	d00a      	beq.n	8007316 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f9af 	bl	8008668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800730a:	2180      	movs	r1, #128	@ 0x80
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f9ab 	bl	8008668 <USBD_LL_StallEP>
 8007312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007314:	e020      	b.n	8007358 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc7a 	bl	8007c12 <USBD_CtlError>
              break;
 800731e:	e01b      	b.n	8007358 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	885b      	ldrh	r3, [r3, #2]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10e      	bne.n	8007346 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <USBD_StdEPReq+0xfe>
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b80      	cmp	r3, #128	@ 0x80
 8007332:	d008      	beq.n	8007346 <USBD_StdEPReq+0xfe>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	88db      	ldrh	r3, [r3, #6]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f991 	bl	8008668 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fd3a 	bl	8007dc0 <USBD_CtlSendStatus>

              break;
 800734c:	e004      	b.n	8007358 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc5e 	bl	8007c12 <USBD_CtlError>
              break;
 8007356:	bf00      	nop
          }
          break;
 8007358:	e107      	b.n	800756a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b02      	cmp	r3, #2
 8007364:	d002      	beq.n	800736c <USBD_StdEPReq+0x124>
 8007366:	2b03      	cmp	r3, #3
 8007368:	d016      	beq.n	8007398 <USBD_StdEPReq+0x150>
 800736a:	e04b      	b.n	8007404 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <USBD_StdEPReq+0x146>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b80      	cmp	r3, #128	@ 0x80
 8007376:	d00a      	beq.n	800738e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f001 f973 	bl	8008668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007382:	2180      	movs	r1, #128	@ 0x80
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f96f 	bl	8008668 <USBD_LL_StallEP>
 800738a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800738c:	e040      	b.n	8007410 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fc3e 	bl	8007c12 <USBD_CtlError>
              break;
 8007396:	e03b      	b.n	8007410 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d136      	bne.n	800740e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 f979 	bl	80086a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fd03 	bl	8007dc0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fde4 	bl	8006f8c <USBD_CoreFindEP>
 80073c4:	4603      	mov	r3, r0
 80073c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c8:	7b7b      	ldrb	r3, [r7, #13]
 80073ca:	2bff      	cmp	r3, #255	@ 0xff
 80073cc:	d01f      	beq.n	800740e <USBD_StdEPReq+0x1c6>
 80073ce:	7b7b      	ldrb	r3, [r7, #13]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d11c      	bne.n	800740e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80073d4:	7b7a      	ldrb	r2, [r7, #13]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80073dc:	7b7a      	ldrb	r2, [r7, #13]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32ae      	adds	r2, #174	@ 0xae
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d010      	beq.n	800740e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80073ec:	7b7a      	ldrb	r2, [r7, #13]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32ae      	adds	r2, #174	@ 0xae
 80073f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007402:	e004      	b.n	800740e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc03 	bl	8007c12 <USBD_CtlError>
              break;
 800740c:	e000      	b.n	8007410 <USBD_StdEPReq+0x1c8>
              break;
 800740e:	bf00      	nop
          }
          break;
 8007410:	e0ab      	b.n	800756a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d002      	beq.n	8007424 <USBD_StdEPReq+0x1dc>
 800741e:	2b03      	cmp	r3, #3
 8007420:	d032      	beq.n	8007488 <USBD_StdEPReq+0x240>
 8007422:	e097      	b.n	8007554 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <USBD_StdEPReq+0x1f2>
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b80      	cmp	r3, #128	@ 0x80
 800742e:	d004      	beq.n	800743a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fbed 	bl	8007c12 <USBD_CtlError>
                break;
 8007438:	e091      	b.n	800755e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800743a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	da0b      	bge.n	800745a <USBD_StdEPReq+0x212>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	3310      	adds	r3, #16
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	4413      	add	r3, r2
 8007456:	3304      	adds	r3, #4
 8007458:	e00b      	b.n	8007472 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2202      	movs	r2, #2
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fc43 	bl	8007d0c <USBD_CtlSendData>
              break;
 8007486:	e06a      	b.n	800755e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da11      	bge.n	80074b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	f003 020f 	and.w	r2, r3, #15
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	3324      	adds	r3, #36	@ 0x24
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d117      	bne.n	80074da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fbb0 	bl	8007c12 <USBD_CtlError>
                  break;
 80074b2:	e054      	b.n	800755e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	440b      	add	r3, r1
 80074c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb9d 	bl	8007c12 <USBD_CtlError>
                  break;
 80074d8:	e041      	b.n	800755e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	da0b      	bge.n	80074fa <USBD_StdEPReq+0x2b2>
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	3310      	adds	r3, #16
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	3304      	adds	r3, #4
 80074f8:	e00b      	b.n	8007512 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
 80074fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4413      	add	r3, r2
 8007510:	3304      	adds	r3, #4
 8007512:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <USBD_StdEPReq+0x2d8>
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b80      	cmp	r3, #128	@ 0x80
 800751e:	d103      	bne.n	8007528 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	e00e      	b.n	8007546 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f8d9 	bl	80086e4 <USBD_LL_IsStallEP>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	e002      	b.n	8007546 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	2202      	movs	r2, #2
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fbdd 	bl	8007d0c <USBD_CtlSendData>
              break;
 8007552:	e004      	b.n	800755e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fb5b 	bl	8007c12 <USBD_CtlError>
              break;
 800755c:	bf00      	nop
          }
          break;
 800755e:	e004      	b.n	800756a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb55 	bl	8007c12 <USBD_CtlError>
          break;
 8007568:	bf00      	nop
      }
      break;
 800756a:	e005      	b.n	8007578 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fb4f 	bl	8007c12 <USBD_CtlError>
      break;
 8007574:	e000      	b.n	8007578 <USBD_StdEPReq+0x330>
      break;
 8007576:	bf00      	nop
  }

  return ret;
 8007578:	7bfb      	ldrb	r3, [r7, #15]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	885b      	ldrh	r3, [r3, #2]
 800759e:	0a1b      	lsrs	r3, r3, #8
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	f200 8128 	bhi.w	80077fa <USBD_GetDescriptor+0x276>
 80075aa:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <USBD_GetDescriptor+0x2c>)
 80075ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	080075e5 	.word	0x080075e5
 80075b8:	08007625 	.word	0x08007625
 80075bc:	080077fb 	.word	0x080077fb
 80075c0:	080077fb 	.word	0x080077fb
 80075c4:	0800779b 	.word	0x0800779b
 80075c8:	080077c7 	.word	0x080077c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	7c12      	ldrb	r2, [r2, #16]
 80075d8:	f107 0108 	add.w	r1, r7, #8
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
 80075e0:	60f8      	str	r0, [r7, #12]
      break;
 80075e2:	e112      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7c1b      	ldrb	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10d      	bne.n	8007608 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	f107 0208 	add.w	r2, r7, #8
 80075f8:	4610      	mov	r0, r2
 80075fa:	4798      	blx	r3
 80075fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3301      	adds	r3, #1
 8007602:	2202      	movs	r2, #2
 8007604:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007606:	e100      	b.n	800780a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	f107 0208 	add.w	r2, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	2202      	movs	r2, #2
 8007620:	701a      	strb	r2, [r3, #0]
      break;
 8007622:	e0f2      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	885b      	ldrh	r3, [r3, #2]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b05      	cmp	r3, #5
 800762c:	f200 80ac 	bhi.w	8007788 <USBD_GetDescriptor+0x204>
 8007630:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <USBD_GetDescriptor+0xb4>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007651 	.word	0x08007651
 800763c:	08007685 	.word	0x08007685
 8007640:	080076b9 	.word	0x080076b9
 8007644:	080076ed 	.word	0x080076ed
 8007648:	08007721 	.word	0x08007721
 800764c:	08007755 	.word	0x08007755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	7c12      	ldrb	r2, [r2, #16]
 8007668:	f107 0108 	add.w	r1, r7, #8
 800766c:	4610      	mov	r0, r2
 800766e:	4798      	blx	r3
 8007670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007672:	e091      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 facb 	bl	8007c12 <USBD_CtlError>
            err++;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	3301      	adds	r3, #1
 8007680:	72fb      	strb	r3, [r7, #11]
          break;
 8007682:	e089      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e077      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fab1 	bl	8007c12 <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e06f      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076da:	e05d      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa97 	bl	8007c12 <USBD_CtlError>
            err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ea:	e055      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770e:	e043      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa7d 	bl	8007c12 <USBD_CtlError>
            err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
          break;
 800771e:	e03b      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e029      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa63 	bl	8007c12 <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e021      	b.n	8007798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007776:	e00f      	b.n	8007798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa49 	bl	8007c12 <USBD_CtlError>
            err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
          break;
 8007786:	e007      	b.n	8007798 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa41 	bl	8007c12 <USBD_CtlError>
          err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007796:	bf00      	nop
      }
      break;
 8007798:	e037      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7c1b      	ldrb	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077aa:	f107 0208 	add.w	r2, r7, #8
 80077ae:	4610      	mov	r0, r2
 80077b0:	4798      	blx	r3
 80077b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077b4:	e029      	b.n	800780a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fa2a 	bl	8007c12 <USBD_CtlError>
        err++;
 80077be:	7afb      	ldrb	r3, [r7, #11]
 80077c0:	3301      	adds	r3, #1
 80077c2:	72fb      	strb	r3, [r7, #11]
      break;
 80077c4:	e021      	b.n	800780a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7c1b      	ldrb	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10d      	bne.n	80077ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d6:	f107 0208 	add.w	r2, r7, #8
 80077da:	4610      	mov	r0, r2
 80077dc:	4798      	blx	r3
 80077de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	2207      	movs	r2, #7
 80077e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e8:	e00f      	b.n	800780a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa10 	bl	8007c12 <USBD_CtlError>
        err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
      break;
 80077f8:	e007      	b.n	800780a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa08 	bl	8007c12 <USBD_CtlError>
      err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
      break;
 8007808:	bf00      	nop
  }

  if (err != 0U)
 800780a:	7afb      	ldrb	r3, [r7, #11]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11e      	bne.n	800784e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	88db      	ldrh	r3, [r3, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d016      	beq.n	8007846 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007818:	893b      	ldrh	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	88da      	ldrh	r2, [r3, #6]
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	4293      	cmp	r3, r2
 8007826:	bf28      	it	cs
 8007828:	4613      	movcs	r3, r2
 800782a:	b29b      	uxth	r3, r3
 800782c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800782e:	893b      	ldrh	r3, [r7, #8]
 8007830:	461a      	mov	r2, r3
 8007832:	68f9      	ldr	r1, [r7, #12]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa69 	bl	8007d0c <USBD_CtlSendData>
 800783a:	e009      	b.n	8007850 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f9e7 	bl	8007c12 <USBD_CtlError>
 8007844:	e004      	b.n	8007850 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 faba 	bl	8007dc0 <USBD_CtlSendStatus>
 800784c:	e000      	b.n	8007850 <USBD_GetDescriptor+0x2cc>
    return;
 800784e:	bf00      	nop
  }
}
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop

08007858 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	889b      	ldrh	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d131      	bne.n	80078ce <USBD_SetAddress+0x76>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	88db      	ldrh	r3, [r3, #6]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d12d      	bne.n	80078ce <USBD_SetAddress+0x76>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	885b      	ldrh	r3, [r3, #2]
 8007876:	2b7f      	cmp	r3, #127	@ 0x7f
 8007878:	d829      	bhi.n	80078ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	885b      	ldrh	r3, [r3, #2]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007884:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b03      	cmp	r3, #3
 8007890:	d104      	bne.n	800789c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f9bc 	bl	8007c12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800789a:	e01d      	b.n	80078d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7bfa      	ldrb	r2, [r7, #15]
 80078a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 ff47 	bl	800873c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa86 	bl	8007dc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c2:	e009      	b.n	80078d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078cc:	e004      	b.n	80078d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f99e 	bl	8007c12 <USBD_CtlError>
  }
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	4b4e      	ldr	r3, [pc, #312]	@ (8007a30 <USBD_SetConfig+0x150>)
 80078f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007a30 <USBD_SetConfig+0x150>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d905      	bls.n	800790c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f985 	bl	8007c12 <USBD_CtlError>
    return USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	e08c      	b.n	8007a26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d002      	beq.n	800791e <USBD_SetConfig+0x3e>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d029      	beq.n	8007970 <USBD_SetConfig+0x90>
 800791c:	e075      	b.n	8007a0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800791e:	4b44      	ldr	r3, [pc, #272]	@ (8007a30 <USBD_SetConfig+0x150>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d020      	beq.n	8007968 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007926:	4b42      	ldr	r3, [pc, #264]	@ (8007a30 <USBD_SetConfig+0x150>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007930:	4b3f      	ldr	r3, [pc, #252]	@ (8007a30 <USBD_SetConfig+0x150>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7fe ffe3 	bl	8006902 <USBD_SetClassConfig>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007940:	7bfb      	ldrb	r3, [r7, #15]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f962 	bl	8007c12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007956:	e065      	b.n	8007a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa31 	bl	8007dc0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2203      	movs	r2, #3
 8007962:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007966:	e05d      	b.n	8007a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fa29 	bl	8007dc0 <USBD_CtlSendStatus>
      break;
 800796e:	e059      	b.n	8007a24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007970:	4b2f      	ldr	r3, [pc, #188]	@ (8007a30 <USBD_SetConfig+0x150>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d112      	bne.n	800799e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007980:	4b2b      	ldr	r3, [pc, #172]	@ (8007a30 <USBD_SetConfig+0x150>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800798a:	4b29      	ldr	r3, [pc, #164]	@ (8007a30 <USBD_SetConfig+0x150>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fe ffd2 	bl	800693a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa12 	bl	8007dc0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800799c:	e042      	b.n	8007a24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800799e:	4b24      	ldr	r3, [pc, #144]	@ (8007a30 <USBD_SetConfig+0x150>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d02a      	beq.n	8007a02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7fe ffc0 	bl	800693a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007a30 <USBD_SetConfig+0x150>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a30 <USBD_SetConfig+0x150>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fe ff99 	bl	8006902 <USBD_SetClassConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00f      	beq.n	80079fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f918 	bl	8007c12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fe ffa5 	bl	800693a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079f8:	e014      	b.n	8007a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f9e0 	bl	8007dc0 <USBD_CtlSendStatus>
      break;
 8007a00:	e010      	b.n	8007a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f9dc 	bl	8007dc0 <USBD_CtlSendStatus>
      break;
 8007a08:	e00c      	b.n	8007a24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f900 	bl	8007c12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a12:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <USBD_SetConfig+0x150>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fe ff8e 	bl	800693a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	73fb      	strb	r3, [r7, #15]
      break;
 8007a22:	bf00      	nop
  }

  return ret;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000350 	.word	0x20000350

08007a34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d004      	beq.n	8007a50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f8e2 	bl	8007c12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a4e:	e023      	b.n	8007a98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	dc02      	bgt.n	8007a62 <USBD_GetConfig+0x2e>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dc03      	bgt.n	8007a68 <USBD_GetConfig+0x34>
 8007a60:	e015      	b.n	8007a8e <USBD_GetConfig+0x5a>
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d00b      	beq.n	8007a7e <USBD_GetConfig+0x4a>
 8007a66:	e012      	b.n	8007a8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3308      	adds	r3, #8
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f948 	bl	8007d0c <USBD_CtlSendData>
        break;
 8007a7c:	e00c      	b.n	8007a98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2201      	movs	r2, #1
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f940 	bl	8007d0c <USBD_CtlSendData>
        break;
 8007a8c:	e004      	b.n	8007a98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8be 	bl	8007c12 <USBD_CtlError>
        break;
 8007a96:	bf00      	nop
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d81e      	bhi.n	8007af6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	88db      	ldrh	r3, [r3, #6]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d004      	beq.n	8007aca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f8a5 	bl	8007c12 <USBD_CtlError>
        break;
 8007ac8:	e01a      	b.n	8007b00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f043 0202 	orr.w	r2, r3, #2
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	2202      	movs	r2, #2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f90c 	bl	8007d0c <USBD_CtlSendData>
      break;
 8007af4:	e004      	b.n	8007b00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f88a 	bl	8007c12 <USBD_CtlError>
      break;
 8007afe:	bf00      	nop
  }
}
 8007b00:	bf00      	nop
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d107      	bne.n	8007b2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f94c 	bl	8007dc0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b28:	e013      	b.n	8007b52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d10b      	bne.n	8007b4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	889b      	ldrh	r3, [r3, #4]
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f93c 	bl	8007dc0 <USBD_CtlSendStatus>
}
 8007b48:	e003      	b.n	8007b52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f860 	bl	8007c12 <USBD_CtlError>
}
 8007b52:	bf00      	nop
 8007b54:	3708      	adds	r7, #8
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d80b      	bhi.n	8007b8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10c      	bne.n	8007b94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f91c 	bl	8007dc0 <USBD_CtlSendStatus>
      }
      break;
 8007b88:	e004      	b.n	8007b94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f840 	bl	8007c12 <USBD_CtlError>
      break;
 8007b92:	e000      	b.n	8007b96 <USBD_ClrFeature+0x3c>
      break;
 8007b94:	bf00      	nop
  }
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	781a      	ldrb	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f7ff fa40 	bl	800704e <SWAPBYTE>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff fa33 	bl	800704e <SWAPBYTE>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fa26 	bl	800704e <SWAPBYTE>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	80da      	strh	r2, [r3, #6]
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c1c:	2180      	movs	r1, #128	@ 0x80
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fd22 	bl	8008668 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c24:	2100      	movs	r1, #0
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 fd1e 	bl	8008668 <USBD_LL_StallEP>
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d042      	beq.n	8007cd0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007c4e:	6938      	ldr	r0, [r7, #16]
 8007c50:	f000 f842 	bl	8007cd8 <USBD_GetLen>
 8007c54:	4603      	mov	r3, r0
 8007c56:	3301      	adds	r3, #1
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c5e:	d808      	bhi.n	8007c72 <USBD_GetString+0x3e>
 8007c60:	6938      	ldr	r0, [r7, #16]
 8007c62:	f000 f839 	bl	8007cd8 <USBD_GetLen>
 8007c66:	4603      	mov	r3, r0
 8007c68:	3301      	adds	r3, #1
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	005b      	lsls	r3, r3, #1
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	e001      	b.n	8007c76 <USBD_GetString+0x42>
 8007c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	4413      	add	r3, r2
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	4413      	add	r3, r2
 8007c92:	2203      	movs	r2, #3
 8007c94:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c9c:	e013      	b.n	8007cc6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007c9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	3301      	adds	r3, #1
 8007cae:	613b      	str	r3, [r7, #16]
    idx++;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	4413      	add	r3, r2
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e7      	bne.n	8007c9e <USBD_GetString+0x6a>
 8007cce:	e000      	b.n	8007cd2 <USBD_GetString+0x9e>
    return;
 8007cd0:	bf00      	nop
  }
}
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007ce8:	e005      	b.n	8007cf6 <USBD_GetLen+0x1e>
  {
    len++;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	3301      	adds	r3, #1
 8007cee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f5      	bne.n	8007cea <USBD_GetLen+0x12>
  }

  return len;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	2100      	movs	r1, #0
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fd21 	bl	800877a <USBD_LL_Transmit>

  return USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	2100      	movs	r1, #0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 fd10 	bl	800877a <USBD_LL_Transmit>

  return USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2203      	movs	r2, #3
 8007d74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 fd14 	bl	80087bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	60f8      	str	r0, [r7, #12]
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	2100      	movs	r1, #0
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 fd03 	bl	80087bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fccf 	bl	800877a <USBD_LL_Transmit>

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2205      	movs	r2, #5
 8007df2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007df6:	2300      	movs	r3, #0
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fcdd 	bl	80087bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e10:	2200      	movs	r2, #0
 8007e12:	4912      	ldr	r1, [pc, #72]	@ (8007e5c <MX_USB_DEVICE_Init+0x50>)
 8007e14:	4812      	ldr	r0, [pc, #72]	@ (8007e60 <MX_USB_DEVICE_Init+0x54>)
 8007e16:	f7fe fcf7 	bl	8006808 <USBD_Init>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e20:	f7f9 f9ae 	bl	8001180 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e24:	490f      	ldr	r1, [pc, #60]	@ (8007e64 <MX_USB_DEVICE_Init+0x58>)
 8007e26:	480e      	ldr	r0, [pc, #56]	@ (8007e60 <MX_USB_DEVICE_Init+0x54>)
 8007e28:	f7fe fd1e 	bl	8006868 <USBD_RegisterClass>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e32:	f7f9 f9a5 	bl	8001180 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e36:	490c      	ldr	r1, [pc, #48]	@ (8007e68 <MX_USB_DEVICE_Init+0x5c>)
 8007e38:	4809      	ldr	r0, [pc, #36]	@ (8007e60 <MX_USB_DEVICE_Init+0x54>)
 8007e3a:	f7fe fc15 	bl	8006668 <USBD_CDC_RegisterInterface>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e44:	f7f9 f99c 	bl	8001180 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e48:	4805      	ldr	r0, [pc, #20]	@ (8007e60 <MX_USB_DEVICE_Init+0x54>)
 8007e4a:	f7fe fd43 	bl	80068d4 <USBD_Start>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e54:	f7f9 f994 	bl	8001180 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e58:	bf00      	nop
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200000b4 	.word	0x200000b4
 8007e60:	20000354 	.word	0x20000354
 8007e64:	20000020 	.word	0x20000020
 8007e68:	200000a0 	.word	0x200000a0

08007e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e70:	2200      	movs	r2, #0
 8007e72:	4905      	ldr	r1, [pc, #20]	@ (8007e88 <CDC_Init_FS+0x1c>)
 8007e74:	4805      	ldr	r0, [pc, #20]	@ (8007e8c <CDC_Init_FS+0x20>)
 8007e76:	f7fe fc11 	bl	800669c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e7a:	4905      	ldr	r1, [pc, #20]	@ (8007e90 <CDC_Init_FS+0x24>)
 8007e7c:	4803      	ldr	r0, [pc, #12]	@ (8007e8c <CDC_Init_FS+0x20>)
 8007e7e:	f7fe fc2f 	bl	80066e0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000e30 	.word	0x20000e30
 8007e8c:	20000354 	.word	0x20000354
 8007e90:	20000630 	.word	0x20000630

08007e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	  if (recData != NULL) {
 8007e98:	4b07      	ldr	r3, [pc, #28]	@ (8007eb8 <CDC_DeInit_FS+0x24>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <CDC_DeInit_FS+0x1c>
	    free(recData);
 8007ea0:	4b05      	ldr	r3, [pc, #20]	@ (8007eb8 <CDC_DeInit_FS+0x24>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fd09 	bl	80088bc <free>
	    recData = NULL;
 8007eaa:	4b03      	ldr	r3, [pc, #12]	@ (8007eb8 <CDC_DeInit_FS+0x24>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
	  }
	  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000340 	.word	0x20000340

08007ebc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	6039      	str	r1, [r7, #0]
 8007ec6:	71fb      	strb	r3, [r7, #7]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b23      	cmp	r3, #35	@ 0x23
 8007ed0:	d84a      	bhi.n	8007f68 <CDC_Control_FS+0xac>
 8007ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed8 <CDC_Control_FS+0x1c>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007f69 	.word	0x08007f69
 8007edc:	08007f69 	.word	0x08007f69
 8007ee0:	08007f69 	.word	0x08007f69
 8007ee4:	08007f69 	.word	0x08007f69
 8007ee8:	08007f69 	.word	0x08007f69
 8007eec:	08007f69 	.word	0x08007f69
 8007ef0:	08007f69 	.word	0x08007f69
 8007ef4:	08007f69 	.word	0x08007f69
 8007ef8:	08007f69 	.word	0x08007f69
 8007efc:	08007f69 	.word	0x08007f69
 8007f00:	08007f69 	.word	0x08007f69
 8007f04:	08007f69 	.word	0x08007f69
 8007f08:	08007f69 	.word	0x08007f69
 8007f0c:	08007f69 	.word	0x08007f69
 8007f10:	08007f69 	.word	0x08007f69
 8007f14:	08007f69 	.word	0x08007f69
 8007f18:	08007f69 	.word	0x08007f69
 8007f1c:	08007f69 	.word	0x08007f69
 8007f20:	08007f69 	.word	0x08007f69
 8007f24:	08007f69 	.word	0x08007f69
 8007f28:	08007f69 	.word	0x08007f69
 8007f2c:	08007f69 	.word	0x08007f69
 8007f30:	08007f69 	.word	0x08007f69
 8007f34:	08007f69 	.word	0x08007f69
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007f69 	.word	0x08007f69
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f69 	.word	0x08007f69
 8007f4c:	08007f69 	.word	0x08007f69
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f69 	.word	0x08007f69
 8007f58:	08007f69 	.word	0x08007f69
 8007f5c:	08007f69 	.word	0x08007f69
 8007f60:	08007f69 	.word	0x08007f69
 8007f64:	08007f69 	.word	0x08007f69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f68:	bf00      	nop
  }

  return (USBD_OK);
 8007f6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  if (*Len > 0) {
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d02b      	beq.n	8007fe2 <CDC_Receive_FS+0x6a>
	    if (recData != NULL) {
 8007f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8007ffc <CDC_Receive_FS+0x84>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <CDC_Receive_FS+0x24>
	      free(recData);
 8007f92:	4b1a      	ldr	r3, [pc, #104]	@ (8007ffc <CDC_Receive_FS+0x84>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fc90 	bl	80088bc <free>
	    }

	    recData = (uint8_t*)malloc(*Len + 1);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fc82 	bl	80088ac <malloc>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	461a      	mov	r2, r3
 8007fac:	4b13      	ldr	r3, [pc, #76]	@ (8007ffc <CDC_Receive_FS+0x84>)
 8007fae:	601a      	str	r2, [r3, #0]
	    if (recData == NULL) {
 8007fb0:	4b12      	ldr	r3, [pc, #72]	@ (8007ffc <CDC_Receive_FS+0x84>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <CDC_Receive_FS+0x44>
	      return USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e01a      	b.n	8007ff2 <CDC_Receive_FS+0x7a>
	    }


	    memcpy(recData, Buf, *Len);
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8007ffc <CDC_Receive_FS+0x84>)
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	f001 fb1b 	bl	8009602 <memcpy>
	    recData[*Len] = '\0';
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <CDC_Receive_FS+0x84>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	701a      	strb	r2, [r3, #0]


	    recDataSize = *Len;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a08      	ldr	r2, [pc, #32]	@ (8008000 <CDC_Receive_FS+0x88>)
 8007fe0:	6013      	str	r3, [r2, #0]
	  }

	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	4807      	ldr	r0, [pc, #28]	@ (8008004 <CDC_Receive_FS+0x8c>)
 8007fe6:	f7fe fb7b 	bl	80066e0 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fea:	4806      	ldr	r0, [pc, #24]	@ (8008004 <CDC_Receive_FS+0x8c>)
 8007fec:	f7fe fbd6 	bl	800679c <USBD_CDC_ReceivePacket>
	  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000340 	.word	0x20000340
 8008000:	20000344 	.word	0x20000344
 8008004:	20000354 	.word	0x20000354

08008008 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008018:	4b0d      	ldr	r3, [pc, #52]	@ (8008050 <CDC_Transmit_FS+0x48>)
 800801a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800801e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800802a:	2301      	movs	r3, #1
 800802c:	e00b      	b.n	8008046 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800802e:	887b      	ldrh	r3, [r7, #2]
 8008030:	461a      	mov	r2, r3
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4806      	ldr	r0, [pc, #24]	@ (8008050 <CDC_Transmit_FS+0x48>)
 8008036:	f7fe fb31 	bl	800669c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800803a:	4805      	ldr	r0, [pc, #20]	@ (8008050 <CDC_Transmit_FS+0x48>)
 800803c:	f7fe fb6e 	bl	800671c <USBD_CDC_TransmitPacket>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20000354 	.word	0x20000354

08008054 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	4613      	mov	r3, r2
 8008060:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800806a:	4618      	mov	r0, r3
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
	...

08008078 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	6039      	str	r1, [r7, #0]
 8008082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2212      	movs	r2, #18
 8008088:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800808a:	4b03      	ldr	r3, [pc, #12]	@ (8008098 <USBD_FS_DeviceDescriptor+0x20>)
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	200000d0 	.word	0x200000d0

0800809c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	6039      	str	r1, [r7, #0]
 80080a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2204      	movs	r2, #4
 80080ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	200000e4 	.word	0x200000e4

080080c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d105      	bne.n	80080de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4907      	ldr	r1, [pc, #28]	@ (80080f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80080d6:	4808      	ldr	r0, [pc, #32]	@ (80080f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80080d8:	f7ff fdac 	bl	8007c34 <USBD_GetString>
 80080dc:	e004      	b.n	80080e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4904      	ldr	r1, [pc, #16]	@ (80080f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80080e2:	4805      	ldr	r0, [pc, #20]	@ (80080f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80080e4:	f7ff fda6 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080e8:	4b02      	ldr	r3, [pc, #8]	@ (80080f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20001630 	.word	0x20001630
 80080f8:	0800b20c 	.word	0x0800b20c

080080fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008108:	683a      	ldr	r2, [r7, #0]
 800810a:	4904      	ldr	r1, [pc, #16]	@ (800811c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800810c:	4804      	ldr	r0, [pc, #16]	@ (8008120 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800810e:	f7ff fd91 	bl	8007c34 <USBD_GetString>
  return USBD_StrDesc;
 8008112:	4b02      	ldr	r3, [pc, #8]	@ (800811c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20001630 	.word	0x20001630
 8008120:	0800b224 	.word	0x0800b224

08008124 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	4603      	mov	r3, r0
 800812c:	6039      	str	r1, [r7, #0]
 800812e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	221a      	movs	r2, #26
 8008134:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008136:	f000 f843 	bl	80081c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800813a:	4b02      	ldr	r3, [pc, #8]	@ (8008144 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800813c:	4618      	mov	r0, r3
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}
 8008144:	200000e8 	.word	0x200000e8

08008148 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4907      	ldr	r1, [pc, #28]	@ (800817c <USBD_FS_ConfigStrDescriptor+0x34>)
 800815e:	4808      	ldr	r0, [pc, #32]	@ (8008180 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008160:	f7ff fd68 	bl	8007c34 <USBD_GetString>
 8008164:	e004      	b.n	8008170 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4904      	ldr	r1, [pc, #16]	@ (800817c <USBD_FS_ConfigStrDescriptor+0x34>)
 800816a:	4805      	ldr	r0, [pc, #20]	@ (8008180 <USBD_FS_ConfigStrDescriptor+0x38>)
 800816c:	f7ff fd62 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008170:	4b02      	ldr	r3, [pc, #8]	@ (800817c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20001630 	.word	0x20001630
 8008180:	0800b238 	.word	0x0800b238

08008184 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d105      	bne.n	80081a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	4907      	ldr	r1, [pc, #28]	@ (80081b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800819a:	4808      	ldr	r0, [pc, #32]	@ (80081bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800819c:	f7ff fd4a 	bl	8007c34 <USBD_GetString>
 80081a0:	e004      	b.n	80081ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	4904      	ldr	r1, [pc, #16]	@ (80081b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081a6:	4805      	ldr	r0, [pc, #20]	@ (80081bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081a8:	f7ff fd44 	bl	8007c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081ac:	4b02      	ldr	r3, [pc, #8]	@ (80081b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20001630 	.word	0x20001630
 80081bc:	0800b244 	.word	0x0800b244

080081c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80081c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <Get_SerialNum+0x44>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80081cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008208 <Get_SerialNum+0x48>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80081d2:	4b0e      	ldr	r3, [pc, #56]	@ (800820c <Get_SerialNum+0x4c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80081e6:	2208      	movs	r2, #8
 80081e8:	4909      	ldr	r1, [pc, #36]	@ (8008210 <Get_SerialNum+0x50>)
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f814 	bl	8008218 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80081f0:	2204      	movs	r2, #4
 80081f2:	4908      	ldr	r1, [pc, #32]	@ (8008214 <Get_SerialNum+0x54>)
 80081f4:	68b8      	ldr	r0, [r7, #8]
 80081f6:	f000 f80f 	bl	8008218 <IntToUnicode>
  }
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	1fff7a10 	.word	0x1fff7a10
 8008208:	1fff7a14 	.word	0x1fff7a14
 800820c:	1fff7a18 	.word	0x1fff7a18
 8008210:	200000ea 	.word	0x200000ea
 8008214:	200000fa 	.word	0x200000fa

08008218 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800822a:	2300      	movs	r3, #0
 800822c:	75fb      	strb	r3, [r7, #23]
 800822e:	e027      	b.n	8008280 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	0f1b      	lsrs	r3, r3, #28
 8008234:	2b09      	cmp	r3, #9
 8008236:	d80b      	bhi.n	8008250 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	0f1b      	lsrs	r3, r3, #28
 800823c:	b2da      	uxtb	r2, r3
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	005b      	lsls	r3, r3, #1
 8008242:	4619      	mov	r1, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	440b      	add	r3, r1
 8008248:	3230      	adds	r2, #48	@ 0x30
 800824a:	b2d2      	uxtb	r2, r2
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e00a      	b.n	8008266 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	0f1b      	lsrs	r3, r3, #28
 8008254:	b2da      	uxtb	r2, r3
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4619      	mov	r1, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	440b      	add	r3, r1
 8008260:	3237      	adds	r2, #55	@ 0x37
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	3301      	adds	r3, #1
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	4413      	add	r3, r2
 8008276:	2200      	movs	r2, #0
 8008278:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800827a:	7dfb      	ldrb	r3, [r7, #23]
 800827c:	3301      	adds	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]
 8008280:	7dfa      	ldrb	r2, [r7, #23]
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	429a      	cmp	r2, r3
 8008286:	d3d3      	bcc.n	8008230 <IntToUnicode+0x18>
  }
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	@ 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	605a      	str	r2, [r3, #4]
 80082aa:	609a      	str	r2, [r3, #8]
 80082ac:	60da      	str	r2, [r3, #12]
 80082ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082b8:	d13a      	bne.n	8008330 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ba:	2300      	movs	r3, #0
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	4b1e      	ldr	r3, [pc, #120]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 80082c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c2:	4a1d      	ldr	r2, [pc, #116]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80082ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80082d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80082da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082dc:	2302      	movs	r3, #2
 80082de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e4:	2303      	movs	r3, #3
 80082e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082e8:	230a      	movs	r3, #10
 80082ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4619      	mov	r1, r3
 80082f2:	4812      	ldr	r0, [pc, #72]	@ (800833c <HAL_PCD_MspInit+0xa4>)
 80082f4:	f7f9 fc7e 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 80082fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fc:	4a0e      	ldr	r2, [pc, #56]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 80082fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008302:	6353      	str	r3, [r2, #52]	@ 0x34
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	4b0b      	ldr	r3, [pc, #44]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 800830a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800830c:	4a0a      	ldr	r2, [pc, #40]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 800830e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008312:	6453      	str	r3, [r2, #68]	@ 0x44
 8008314:	4b08      	ldr	r3, [pc, #32]	@ (8008338 <HAL_PCD_MspInit+0xa0>)
 8008316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008318:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008320:	2200      	movs	r2, #0
 8008322:	2100      	movs	r1, #0
 8008324:	2043      	movs	r0, #67	@ 0x43
 8008326:	f7f9 fc2e 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800832a:	2043      	movs	r0, #67	@ 0x43
 800832c:	f7f9 fc47 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008330:	bf00      	nop
 8008332:	3728      	adds	r7, #40	@ 0x28
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	40023800 	.word	0x40023800
 800833c:	40020000 	.word	0x40020000

08008340 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7fe fb09 	bl	800696e <USBD_LL_SetupStage>
}
 800835c:	bf00      	nop
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	00db      	lsls	r3, r3, #3
 800837e:	4413      	add	r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	4619      	mov	r1, r3
 800838e:	f7fe fb43 	bl	8006a18 <USBD_LL_DataOutStage>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	460b      	mov	r3, r1
 80083a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	6879      	ldr	r1, [r7, #4]
 80083b0:	4613      	mov	r3, r2
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	3320      	adds	r3, #32
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	4619      	mov	r1, r3
 80083c2:	f7fe fbdc 	bl	8006b7e <USBD_LL_DataInStage>
}
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fd16 	bl	8006e0e <USBD_LL_SOF>
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083f2:	2301      	movs	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	79db      	ldrb	r3, [r3, #7]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d001      	beq.n	8008402 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083fe:	f7f8 febf 	bl	8001180 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008408:	7bfa      	ldrb	r2, [r7, #15]
 800840a:	4611      	mov	r1, r2
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe fcba 	bl	8006d86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fc62 	bl	8006ce2 <USBD_LL_Reset>
}
 800841e:	bf00      	nop
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fcb5 	bl	8006da6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7adb      	ldrb	r3, [r3, #11]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800845c:	4b04      	ldr	r3, [pc, #16]	@ (8008470 <HAL_PCD_SuspendCallback+0x48>)
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	4a03      	ldr	r2, [pc, #12]	@ (8008470 <HAL_PCD_SuspendCallback+0x48>)
 8008462:	f043 0306 	orr.w	r3, r3, #6
 8008466:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fcab 	bl	8006dde <USBD_LL_Resume>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084a2:	78fa      	ldrb	r2, [r7, #3]
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fe fd03 	bl	8006eb2 <USBD_LL_IsoOUTIncomplete>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	4611      	mov	r1, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe fcbf 	bl	8006e4e <USBD_LL_IsoINIncomplete>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fd15 	bl	8006f16 <USBD_LL_DevConnected>
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fd12 	bl	8006f2c <USBD_LL_DevDisconnected>
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d13c      	bne.n	800859a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008520:	4a20      	ldr	r2, [pc, #128]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	4a1e      	ldr	r2, [pc, #120]	@ (80085a4 <USBD_LL_Init+0x94>)
 800852c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008530:	4b1c      	ldr	r3, [pc, #112]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008532:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008536:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008538:	4b1a      	ldr	r3, [pc, #104]	@ (80085a4 <USBD_LL_Init+0x94>)
 800853a:	2204      	movs	r2, #4
 800853c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800853e:	4b19      	ldr	r3, [pc, #100]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008540:	2202      	movs	r2, #2
 8008542:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008544:	4b17      	ldr	r3, [pc, #92]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008546:	2200      	movs	r2, #0
 8008548:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800854a:	4b16      	ldr	r3, [pc, #88]	@ (80085a4 <USBD_LL_Init+0x94>)
 800854c:	2202      	movs	r2, #2
 800854e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008550:	4b14      	ldr	r3, [pc, #80]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008552:	2200      	movs	r2, #0
 8008554:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008556:	4b13      	ldr	r3, [pc, #76]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008558:	2200      	movs	r2, #0
 800855a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800855c:	4b11      	ldr	r3, [pc, #68]	@ (80085a4 <USBD_LL_Init+0x94>)
 800855e:	2200      	movs	r2, #0
 8008560:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008562:	4b10      	ldr	r3, [pc, #64]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008564:	2200      	movs	r2, #0
 8008566:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008568:	4b0e      	ldr	r3, [pc, #56]	@ (80085a4 <USBD_LL_Init+0x94>)
 800856a:	2200      	movs	r2, #0
 800856c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800856e:	480d      	ldr	r0, [pc, #52]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008570:	f7f9 fcdd 	bl	8001f2e <HAL_PCD_Init>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800857a:	f7f8 fe01 	bl	8001180 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800857e:	2180      	movs	r1, #128	@ 0x80
 8008580:	4808      	ldr	r0, [pc, #32]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008582:	f7fa ff0a 	bl	800339a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008586:	2240      	movs	r2, #64	@ 0x40
 8008588:	2100      	movs	r1, #0
 800858a:	4806      	ldr	r0, [pc, #24]	@ (80085a4 <USBD_LL_Init+0x94>)
 800858c:	f7fa febe 	bl	800330c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008590:	2280      	movs	r2, #128	@ 0x80
 8008592:	2101      	movs	r1, #1
 8008594:	4803      	ldr	r0, [pc, #12]	@ (80085a4 <USBD_LL_Init+0x94>)
 8008596:	f7fa feb9 	bl	800330c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20001830 	.word	0x20001830

080085a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b4:	2300      	movs	r3, #0
 80085b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085be:	4618      	mov	r0, r3
 80085c0:	f7f9 fdc4 	bl	800214c <HAL_PCD_Start>
 80085c4:	4603      	mov	r3, r0
 80085c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f942 	bl	8008854 <USBD_Get_USB_Status>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	4608      	mov	r0, r1
 80085e8:	4611      	mov	r1, r2
 80085ea:	461a      	mov	r2, r3
 80085ec:	4603      	mov	r3, r0
 80085ee:	70fb      	strb	r3, [r7, #3]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70bb      	strb	r3, [r7, #2]
 80085f4:	4613      	mov	r3, r2
 80085f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008606:	78bb      	ldrb	r3, [r7, #2]
 8008608:	883a      	ldrh	r2, [r7, #0]
 800860a:	78f9      	ldrb	r1, [r7, #3]
 800860c:	f7fa fa98 	bl	8002b40 <HAL_PCD_EP_Open>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f91c 	bl	8008854 <USBD_Get_USB_Status>
 800861c:	4603      	mov	r3, r0
 800861e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008620:	7bbb      	ldrb	r3, [r7, #14]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	460b      	mov	r3, r1
 8008634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008644:	78fa      	ldrb	r2, [r7, #3]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f7fa fae3 	bl	8002c14 <HAL_PCD_EP_Close>
 800864e:	4603      	mov	r3, r0
 8008650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f8fd 	bl	8008854 <USBD_Get_USB_Status>
 800865a:	4603      	mov	r3, r0
 800865c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	4611      	mov	r1, r2
 8008686:	4618      	mov	r0, r3
 8008688:	f7fa fb9b 	bl	8002dc2 <HAL_PCD_EP_SetStall>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 f8de 	bl	8008854 <USBD_Get_USB_Status>
 8008698:	4603      	mov	r3, r0
 800869a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869c:	7bbb      	ldrb	r3, [r7, #14]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	4611      	mov	r1, r2
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fa fbdf 	bl	8002e88 <HAL_PCD_EP_ClrStall>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ce:	7bfb      	ldrb	r3, [r7, #15]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f000 f8bf 	bl	8008854 <USBD_Get_USB_Status>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086da:	7bbb      	ldrb	r3, [r7, #14]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	da0b      	bge.n	8008718 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008706:	68f9      	ldr	r1, [r7, #12]
 8008708:	4613      	mov	r3, r2
 800870a:	00db      	lsls	r3, r3, #3
 800870c:	4413      	add	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	440b      	add	r3, r1
 8008712:	3316      	adds	r3, #22
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	e00b      	b.n	8008730 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008718:	78fb      	ldrb	r3, [r7, #3]
 800871a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800871e:	68f9      	ldr	r1, [r7, #12]
 8008720:	4613      	mov	r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800872e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008756:	78fa      	ldrb	r2, [r7, #3]
 8008758:	4611      	mov	r1, r2
 800875a:	4618      	mov	r0, r3
 800875c:	f7fa f9cc 	bl	8002af8 <HAL_PCD_SetAddress>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f874 	bl	8008854 <USBD_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008770:	7bbb      	ldrb	r3, [r7, #14]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	460b      	mov	r3, r1
 8008788:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008798:	7af9      	ldrb	r1, [r7, #11]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	f7fa fad6 	bl	8002d4e <HAL_PCD_EP_Transmit>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 f853 	bl	8008854 <USBD_Get_USB_Status>
 80087ae:	4603      	mov	r3, r0
 80087b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	460b      	mov	r3, r1
 80087ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80087da:	7af9      	ldrb	r1, [r7, #11]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	f7fa fa62 	bl	8002ca8 <HAL_PCD_EP_Receive>
 80087e4:	4603      	mov	r3, r0
 80087e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f832 	bl	8008854 <USBD_Get_USB_Status>
 80087f0:	4603      	mov	r3, r0
 80087f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008810:	78fa      	ldrb	r2, [r7, #3]
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f7fa fa82 	bl	8002d1e <HAL_PCD_EP_GetRxCount>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800882c:	4b03      	ldr	r3, [pc, #12]	@ (800883c <USBD_static_malloc+0x18>)
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20001d14 	.word	0x20001d14

08008840 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	2b03      	cmp	r3, #3
 8008866:	d817      	bhi.n	8008898 <USBD_Get_USB_Status+0x44>
 8008868:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <USBD_Get_USB_Status+0x1c>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008881 	.word	0x08008881
 8008874:	08008887 	.word	0x08008887
 8008878:	0800888d 	.word	0x0800888d
 800887c:	08008893 	.word	0x08008893
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
    break;
 8008884:	e00b      	b.n	800889e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008886:	2303      	movs	r3, #3
 8008888:	73fb      	strb	r3, [r7, #15]
    break;
 800888a:	e008      	b.n	800889e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800888c:	2301      	movs	r3, #1
 800888e:	73fb      	strb	r3, [r7, #15]
    break;
 8008890:	e005      	b.n	800889e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008892:	2303      	movs	r3, #3
 8008894:	73fb      	strb	r3, [r7, #15]
    break;
 8008896:	e002      	b.n	800889e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	73fb      	strb	r3, [r7, #15]
    break;
 800889c:	bf00      	nop
  }
  return usb_status;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <malloc>:
 80088ac:	4b02      	ldr	r3, [pc, #8]	@ (80088b8 <malloc+0xc>)
 80088ae:	4601      	mov	r1, r0
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f000 b82d 	b.w	8008910 <_malloc_r>
 80088b6:	bf00      	nop
 80088b8:	20000110 	.word	0x20000110

080088bc <free>:
 80088bc:	4b02      	ldr	r3, [pc, #8]	@ (80088c8 <free+0xc>)
 80088be:	4601      	mov	r1, r0
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	f001 bcf9 	b.w	800a2b8 <_free_r>
 80088c6:	bf00      	nop
 80088c8:	20000110 	.word	0x20000110

080088cc <sbrk_aligned>:
 80088cc:	b570      	push	{r4, r5, r6, lr}
 80088ce:	4e0f      	ldr	r6, [pc, #60]	@ (800890c <sbrk_aligned+0x40>)
 80088d0:	460c      	mov	r4, r1
 80088d2:	6831      	ldr	r1, [r6, #0]
 80088d4:	4605      	mov	r5, r0
 80088d6:	b911      	cbnz	r1, 80088de <sbrk_aligned+0x12>
 80088d8:	f000 fe44 	bl	8009564 <_sbrk_r>
 80088dc:	6030      	str	r0, [r6, #0]
 80088de:	4621      	mov	r1, r4
 80088e0:	4628      	mov	r0, r5
 80088e2:	f000 fe3f 	bl	8009564 <_sbrk_r>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d103      	bne.n	80088f2 <sbrk_aligned+0x26>
 80088ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80088ee:	4620      	mov	r0, r4
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
 80088f2:	1cc4      	adds	r4, r0, #3
 80088f4:	f024 0403 	bic.w	r4, r4, #3
 80088f8:	42a0      	cmp	r0, r4
 80088fa:	d0f8      	beq.n	80088ee <sbrk_aligned+0x22>
 80088fc:	1a21      	subs	r1, r4, r0
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 fe30 	bl	8009564 <_sbrk_r>
 8008904:	3001      	adds	r0, #1
 8008906:	d1f2      	bne.n	80088ee <sbrk_aligned+0x22>
 8008908:	e7ef      	b.n	80088ea <sbrk_aligned+0x1e>
 800890a:	bf00      	nop
 800890c:	20001f34 	.word	0x20001f34

08008910 <_malloc_r>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	1ccd      	adds	r5, r1, #3
 8008916:	f025 0503 	bic.w	r5, r5, #3
 800891a:	3508      	adds	r5, #8
 800891c:	2d0c      	cmp	r5, #12
 800891e:	bf38      	it	cc
 8008920:	250c      	movcc	r5, #12
 8008922:	2d00      	cmp	r5, #0
 8008924:	4606      	mov	r6, r0
 8008926:	db01      	blt.n	800892c <_malloc_r+0x1c>
 8008928:	42a9      	cmp	r1, r5
 800892a:	d904      	bls.n	8008936 <_malloc_r+0x26>
 800892c:	230c      	movs	r3, #12
 800892e:	6033      	str	r3, [r6, #0]
 8008930:	2000      	movs	r0, #0
 8008932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a0c <_malloc_r+0xfc>
 800893a:	f000 f869 	bl	8008a10 <__malloc_lock>
 800893e:	f8d8 3000 	ldr.w	r3, [r8]
 8008942:	461c      	mov	r4, r3
 8008944:	bb44      	cbnz	r4, 8008998 <_malloc_r+0x88>
 8008946:	4629      	mov	r1, r5
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff ffbf 	bl	80088cc <sbrk_aligned>
 800894e:	1c43      	adds	r3, r0, #1
 8008950:	4604      	mov	r4, r0
 8008952:	d158      	bne.n	8008a06 <_malloc_r+0xf6>
 8008954:	f8d8 4000 	ldr.w	r4, [r8]
 8008958:	4627      	mov	r7, r4
 800895a:	2f00      	cmp	r7, #0
 800895c:	d143      	bne.n	80089e6 <_malloc_r+0xd6>
 800895e:	2c00      	cmp	r4, #0
 8008960:	d04b      	beq.n	80089fa <_malloc_r+0xea>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	4639      	mov	r1, r7
 8008966:	4630      	mov	r0, r6
 8008968:	eb04 0903 	add.w	r9, r4, r3
 800896c:	f000 fdfa 	bl	8009564 <_sbrk_r>
 8008970:	4581      	cmp	r9, r0
 8008972:	d142      	bne.n	80089fa <_malloc_r+0xea>
 8008974:	6821      	ldr	r1, [r4, #0]
 8008976:	1a6d      	subs	r5, r5, r1
 8008978:	4629      	mov	r1, r5
 800897a:	4630      	mov	r0, r6
 800897c:	f7ff ffa6 	bl	80088cc <sbrk_aligned>
 8008980:	3001      	adds	r0, #1
 8008982:	d03a      	beq.n	80089fa <_malloc_r+0xea>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	442b      	add	r3, r5
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	f8d8 3000 	ldr.w	r3, [r8]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	bb62      	cbnz	r2, 80089ec <_malloc_r+0xdc>
 8008992:	f8c8 7000 	str.w	r7, [r8]
 8008996:	e00f      	b.n	80089b8 <_malloc_r+0xa8>
 8008998:	6822      	ldr	r2, [r4, #0]
 800899a:	1b52      	subs	r2, r2, r5
 800899c:	d420      	bmi.n	80089e0 <_malloc_r+0xd0>
 800899e:	2a0b      	cmp	r2, #11
 80089a0:	d917      	bls.n	80089d2 <_malloc_r+0xc2>
 80089a2:	1961      	adds	r1, r4, r5
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	6025      	str	r5, [r4, #0]
 80089a8:	bf18      	it	ne
 80089aa:	6059      	strne	r1, [r3, #4]
 80089ac:	6863      	ldr	r3, [r4, #4]
 80089ae:	bf08      	it	eq
 80089b0:	f8c8 1000 	streq.w	r1, [r8]
 80089b4:	5162      	str	r2, [r4, r5]
 80089b6:	604b      	str	r3, [r1, #4]
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 f82f 	bl	8008a1c <__malloc_unlock>
 80089be:	f104 000b 	add.w	r0, r4, #11
 80089c2:	1d23      	adds	r3, r4, #4
 80089c4:	f020 0007 	bic.w	r0, r0, #7
 80089c8:	1ac2      	subs	r2, r0, r3
 80089ca:	bf1c      	itt	ne
 80089cc:	1a1b      	subne	r3, r3, r0
 80089ce:	50a3      	strne	r3, [r4, r2]
 80089d0:	e7af      	b.n	8008932 <_malloc_r+0x22>
 80089d2:	6862      	ldr	r2, [r4, #4]
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	bf0c      	ite	eq
 80089d8:	f8c8 2000 	streq.w	r2, [r8]
 80089dc:	605a      	strne	r2, [r3, #4]
 80089de:	e7eb      	b.n	80089b8 <_malloc_r+0xa8>
 80089e0:	4623      	mov	r3, r4
 80089e2:	6864      	ldr	r4, [r4, #4]
 80089e4:	e7ae      	b.n	8008944 <_malloc_r+0x34>
 80089e6:	463c      	mov	r4, r7
 80089e8:	687f      	ldr	r7, [r7, #4]
 80089ea:	e7b6      	b.n	800895a <_malloc_r+0x4a>
 80089ec:	461a      	mov	r2, r3
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	d1fb      	bne.n	80089ec <_malloc_r+0xdc>
 80089f4:	2300      	movs	r3, #0
 80089f6:	6053      	str	r3, [r2, #4]
 80089f8:	e7de      	b.n	80089b8 <_malloc_r+0xa8>
 80089fa:	230c      	movs	r3, #12
 80089fc:	6033      	str	r3, [r6, #0]
 80089fe:	4630      	mov	r0, r6
 8008a00:	f000 f80c 	bl	8008a1c <__malloc_unlock>
 8008a04:	e794      	b.n	8008930 <_malloc_r+0x20>
 8008a06:	6005      	str	r5, [r0, #0]
 8008a08:	e7d6      	b.n	80089b8 <_malloc_r+0xa8>
 8008a0a:	bf00      	nop
 8008a0c:	20001f38 	.word	0x20001f38

08008a10 <__malloc_lock>:
 8008a10:	4801      	ldr	r0, [pc, #4]	@ (8008a18 <__malloc_lock+0x8>)
 8008a12:	f000 bdf4 	b.w	80095fe <__retarget_lock_acquire_recursive>
 8008a16:	bf00      	nop
 8008a18:	2000207c 	.word	0x2000207c

08008a1c <__malloc_unlock>:
 8008a1c:	4801      	ldr	r0, [pc, #4]	@ (8008a24 <__malloc_unlock+0x8>)
 8008a1e:	f000 bdef 	b.w	8009600 <__retarget_lock_release_recursive>
 8008a22:	bf00      	nop
 8008a24:	2000207c 	.word	0x2000207c

08008a28 <__cvt>:
 8008a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	ec57 6b10 	vmov	r6, r7, d0
 8008a30:	2f00      	cmp	r7, #0
 8008a32:	460c      	mov	r4, r1
 8008a34:	4619      	mov	r1, r3
 8008a36:	463b      	mov	r3, r7
 8008a38:	bfbb      	ittet	lt
 8008a3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008a3e:	461f      	movlt	r7, r3
 8008a40:	2300      	movge	r3, #0
 8008a42:	232d      	movlt	r3, #45	@ 0x2d
 8008a44:	700b      	strb	r3, [r1, #0]
 8008a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008a4c:	4691      	mov	r9, r2
 8008a4e:	f023 0820 	bic.w	r8, r3, #32
 8008a52:	bfbc      	itt	lt
 8008a54:	4632      	movlt	r2, r6
 8008a56:	4616      	movlt	r6, r2
 8008a58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a5c:	d005      	beq.n	8008a6a <__cvt+0x42>
 8008a5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a62:	d100      	bne.n	8008a66 <__cvt+0x3e>
 8008a64:	3401      	adds	r4, #1
 8008a66:	2102      	movs	r1, #2
 8008a68:	e000      	b.n	8008a6c <__cvt+0x44>
 8008a6a:	2103      	movs	r1, #3
 8008a6c:	ab03      	add	r3, sp, #12
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	ab02      	add	r3, sp, #8
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	ec47 6b10 	vmov	d0, r6, r7
 8008a78:	4653      	mov	r3, sl
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	f000 fe58 	bl	8009730 <_dtoa_r>
 8008a80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008a84:	4605      	mov	r5, r0
 8008a86:	d119      	bne.n	8008abc <__cvt+0x94>
 8008a88:	f019 0f01 	tst.w	r9, #1
 8008a8c:	d00e      	beq.n	8008aac <__cvt+0x84>
 8008a8e:	eb00 0904 	add.w	r9, r0, r4
 8008a92:	2200      	movs	r2, #0
 8008a94:	2300      	movs	r3, #0
 8008a96:	4630      	mov	r0, r6
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f8 f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a9e:	b108      	cbz	r0, 8008aa4 <__cvt+0x7c>
 8008aa0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008aa4:	2230      	movs	r2, #48	@ 0x30
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	454b      	cmp	r3, r9
 8008aaa:	d31e      	bcc.n	8008aea <__cvt+0xc2>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ab0:	1b5b      	subs	r3, r3, r5
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	b004      	add	sp, #16
 8008ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ac0:	eb00 0904 	add.w	r9, r0, r4
 8008ac4:	d1e5      	bne.n	8008a92 <__cvt+0x6a>
 8008ac6:	7803      	ldrb	r3, [r0, #0]
 8008ac8:	2b30      	cmp	r3, #48	@ 0x30
 8008aca:	d10a      	bne.n	8008ae2 <__cvt+0xba>
 8008acc:	2200      	movs	r2, #0
 8008ace:	2300      	movs	r3, #0
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	f7f8 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ad8:	b918      	cbnz	r0, 8008ae2 <__cvt+0xba>
 8008ada:	f1c4 0401 	rsb	r4, r4, #1
 8008ade:	f8ca 4000 	str.w	r4, [sl]
 8008ae2:	f8da 3000 	ldr.w	r3, [sl]
 8008ae6:	4499      	add	r9, r3
 8008ae8:	e7d3      	b.n	8008a92 <__cvt+0x6a>
 8008aea:	1c59      	adds	r1, r3, #1
 8008aec:	9103      	str	r1, [sp, #12]
 8008aee:	701a      	strb	r2, [r3, #0]
 8008af0:	e7d9      	b.n	8008aa6 <__cvt+0x7e>

08008af2 <__exponent>:
 8008af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008af4:	2900      	cmp	r1, #0
 8008af6:	bfba      	itte	lt
 8008af8:	4249      	neglt	r1, r1
 8008afa:	232d      	movlt	r3, #45	@ 0x2d
 8008afc:	232b      	movge	r3, #43	@ 0x2b
 8008afe:	2909      	cmp	r1, #9
 8008b00:	7002      	strb	r2, [r0, #0]
 8008b02:	7043      	strb	r3, [r0, #1]
 8008b04:	dd29      	ble.n	8008b5a <__exponent+0x68>
 8008b06:	f10d 0307 	add.w	r3, sp, #7
 8008b0a:	461d      	mov	r5, r3
 8008b0c:	270a      	movs	r7, #10
 8008b0e:	461a      	mov	r2, r3
 8008b10:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b14:	fb07 1416 	mls	r4, r7, r6, r1
 8008b18:	3430      	adds	r4, #48	@ 0x30
 8008b1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b1e:	460c      	mov	r4, r1
 8008b20:	2c63      	cmp	r4, #99	@ 0x63
 8008b22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008b26:	4631      	mov	r1, r6
 8008b28:	dcf1      	bgt.n	8008b0e <__exponent+0x1c>
 8008b2a:	3130      	adds	r1, #48	@ 0x30
 8008b2c:	1e94      	subs	r4, r2, #2
 8008b2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b32:	1c41      	adds	r1, r0, #1
 8008b34:	4623      	mov	r3, r4
 8008b36:	42ab      	cmp	r3, r5
 8008b38:	d30a      	bcc.n	8008b50 <__exponent+0x5e>
 8008b3a:	f10d 0309 	add.w	r3, sp, #9
 8008b3e:	1a9b      	subs	r3, r3, r2
 8008b40:	42ac      	cmp	r4, r5
 8008b42:	bf88      	it	hi
 8008b44:	2300      	movhi	r3, #0
 8008b46:	3302      	adds	r3, #2
 8008b48:	4403      	add	r3, r0
 8008b4a:	1a18      	subs	r0, r3, r0
 8008b4c:	b003      	add	sp, #12
 8008b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b50:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b54:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b58:	e7ed      	b.n	8008b36 <__exponent+0x44>
 8008b5a:	2330      	movs	r3, #48	@ 0x30
 8008b5c:	3130      	adds	r1, #48	@ 0x30
 8008b5e:	7083      	strb	r3, [r0, #2]
 8008b60:	70c1      	strb	r1, [r0, #3]
 8008b62:	1d03      	adds	r3, r0, #4
 8008b64:	e7f1      	b.n	8008b4a <__exponent+0x58>
	...

08008b68 <_printf_float>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	b08d      	sub	sp, #52	@ 0x34
 8008b6e:	460c      	mov	r4, r1
 8008b70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b74:	4616      	mov	r6, r2
 8008b76:	461f      	mov	r7, r3
 8008b78:	4605      	mov	r5, r0
 8008b7a:	f000 fcbb 	bl	80094f4 <_localeconv_r>
 8008b7e:	6803      	ldr	r3, [r0, #0]
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f7 fb7c 	bl	8000280 <strlen>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b90:	9005      	str	r0, [sp, #20]
 8008b92:	3307      	adds	r3, #7
 8008b94:	f023 0307 	bic.w	r3, r3, #7
 8008b98:	f103 0208 	add.w	r2, r3, #8
 8008b9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008ba0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ba4:	f8c8 2000 	str.w	r2, [r8]
 8008ba8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008bb0:	9307      	str	r3, [sp, #28]
 8008bb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8008e30 <_printf_float+0x2c8>)
 8008bc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bc4:	f7f7 ffba 	bl	8000b3c <__aeabi_dcmpun>
 8008bc8:	bb70      	cbnz	r0, 8008c28 <_printf_float+0xc0>
 8008bca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bce:	4b98      	ldr	r3, [pc, #608]	@ (8008e30 <_printf_float+0x2c8>)
 8008bd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008bd4:	f7f7 ff94 	bl	8000b00 <__aeabi_dcmple>
 8008bd8:	bb30      	cbnz	r0, 8008c28 <_printf_float+0xc0>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4640      	mov	r0, r8
 8008be0:	4649      	mov	r1, r9
 8008be2:	f7f7 ff83 	bl	8000aec <__aeabi_dcmplt>
 8008be6:	b110      	cbz	r0, 8008bee <_printf_float+0x86>
 8008be8:	232d      	movs	r3, #45	@ 0x2d
 8008bea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bee:	4a91      	ldr	r2, [pc, #580]	@ (8008e34 <_printf_float+0x2cc>)
 8008bf0:	4b91      	ldr	r3, [pc, #580]	@ (8008e38 <_printf_float+0x2d0>)
 8008bf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bf6:	bf94      	ite	ls
 8008bf8:	4690      	movls	r8, r2
 8008bfa:	4698      	movhi	r8, r3
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	6123      	str	r3, [r4, #16]
 8008c00:	f02b 0304 	bic.w	r3, fp, #4
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	f04f 0900 	mov.w	r9, #0
 8008c0a:	9700      	str	r7, [sp, #0]
 8008c0c:	4633      	mov	r3, r6
 8008c0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c10:	4621      	mov	r1, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 f9d2 	bl	8008fbc <_printf_common>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f040 808d 	bne.w	8008d38 <_printf_float+0x1d0>
 8008c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c22:	b00d      	add	sp, #52	@ 0x34
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	4642      	mov	r2, r8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4649      	mov	r1, r9
 8008c30:	f7f7 ff84 	bl	8000b3c <__aeabi_dcmpun>
 8008c34:	b140      	cbz	r0, 8008c48 <_printf_float+0xe0>
 8008c36:	464b      	mov	r3, r9
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfbc      	itt	lt
 8008c3c:	232d      	movlt	r3, #45	@ 0x2d
 8008c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c42:	4a7e      	ldr	r2, [pc, #504]	@ (8008e3c <_printf_float+0x2d4>)
 8008c44:	4b7e      	ldr	r3, [pc, #504]	@ (8008e40 <_printf_float+0x2d8>)
 8008c46:	e7d4      	b.n	8008bf2 <_printf_float+0x8a>
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008c4e:	9206      	str	r2, [sp, #24]
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	d13b      	bne.n	8008ccc <_printf_float+0x164>
 8008c54:	2306      	movs	r3, #6
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6022      	str	r2, [r4, #0]
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c64:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008c68:	ab09      	add	r3, sp, #36	@ 0x24
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	6861      	ldr	r1, [r4, #4]
 8008c6e:	ec49 8b10 	vmov	d0, r8, r9
 8008c72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c76:	4628      	mov	r0, r5
 8008c78:	f7ff fed6 	bl	8008a28 <__cvt>
 8008c7c:	9b06      	ldr	r3, [sp, #24]
 8008c7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c80:	2b47      	cmp	r3, #71	@ 0x47
 8008c82:	4680      	mov	r8, r0
 8008c84:	d129      	bne.n	8008cda <_printf_float+0x172>
 8008c86:	1cc8      	adds	r0, r1, #3
 8008c88:	db02      	blt.n	8008c90 <_printf_float+0x128>
 8008c8a:	6863      	ldr	r3, [r4, #4]
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	dd41      	ble.n	8008d14 <_printf_float+0x1ac>
 8008c90:	f1aa 0a02 	sub.w	sl, sl, #2
 8008c94:	fa5f fa8a 	uxtb.w	sl, sl
 8008c98:	3901      	subs	r1, #1
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ca0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ca2:	f7ff ff26 	bl	8008af2 <__exponent>
 8008ca6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ca8:	1813      	adds	r3, r2, r0
 8008caa:	2a01      	cmp	r2, #1
 8008cac:	4681      	mov	r9, r0
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	dc02      	bgt.n	8008cb8 <_printf_float+0x150>
 8008cb2:	6822      	ldr	r2, [r4, #0]
 8008cb4:	07d2      	lsls	r2, r2, #31
 8008cb6:	d501      	bpl.n	8008cbc <_printf_float+0x154>
 8008cb8:	3301      	adds	r3, #1
 8008cba:	6123      	str	r3, [r4, #16]
 8008cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d0a2      	beq.n	8008c0a <_printf_float+0xa2>
 8008cc4:	232d      	movs	r3, #45	@ 0x2d
 8008cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cca:	e79e      	b.n	8008c0a <_printf_float+0xa2>
 8008ccc:	9a06      	ldr	r2, [sp, #24]
 8008cce:	2a47      	cmp	r2, #71	@ 0x47
 8008cd0:	d1c2      	bne.n	8008c58 <_printf_float+0xf0>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1c0      	bne.n	8008c58 <_printf_float+0xf0>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e7bd      	b.n	8008c56 <_printf_float+0xee>
 8008cda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cde:	d9db      	bls.n	8008c98 <_printf_float+0x130>
 8008ce0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ce4:	d118      	bne.n	8008d18 <_printf_float+0x1b0>
 8008ce6:	2900      	cmp	r1, #0
 8008ce8:	6863      	ldr	r3, [r4, #4]
 8008cea:	dd0b      	ble.n	8008d04 <_printf_float+0x19c>
 8008cec:	6121      	str	r1, [r4, #16]
 8008cee:	b913      	cbnz	r3, 8008cf6 <_printf_float+0x18e>
 8008cf0:	6822      	ldr	r2, [r4, #0]
 8008cf2:	07d0      	lsls	r0, r2, #31
 8008cf4:	d502      	bpl.n	8008cfc <_printf_float+0x194>
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	440b      	add	r3, r1
 8008cfa:	6123      	str	r3, [r4, #16]
 8008cfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008cfe:	f04f 0900 	mov.w	r9, #0
 8008d02:	e7db      	b.n	8008cbc <_printf_float+0x154>
 8008d04:	b913      	cbnz	r3, 8008d0c <_printf_float+0x1a4>
 8008d06:	6822      	ldr	r2, [r4, #0]
 8008d08:	07d2      	lsls	r2, r2, #31
 8008d0a:	d501      	bpl.n	8008d10 <_printf_float+0x1a8>
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	e7f4      	b.n	8008cfa <_printf_float+0x192>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e7f2      	b.n	8008cfa <_printf_float+0x192>
 8008d14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1a:	4299      	cmp	r1, r3
 8008d1c:	db05      	blt.n	8008d2a <_printf_float+0x1c2>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	6121      	str	r1, [r4, #16]
 8008d22:	07d8      	lsls	r0, r3, #31
 8008d24:	d5ea      	bpl.n	8008cfc <_printf_float+0x194>
 8008d26:	1c4b      	adds	r3, r1, #1
 8008d28:	e7e7      	b.n	8008cfa <_printf_float+0x192>
 8008d2a:	2900      	cmp	r1, #0
 8008d2c:	bfd4      	ite	le
 8008d2e:	f1c1 0202 	rsble	r2, r1, #2
 8008d32:	2201      	movgt	r2, #1
 8008d34:	4413      	add	r3, r2
 8008d36:	e7e0      	b.n	8008cfa <_printf_float+0x192>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	055a      	lsls	r2, r3, #21
 8008d3c:	d407      	bmi.n	8008d4e <_printf_float+0x1e6>
 8008d3e:	6923      	ldr	r3, [r4, #16]
 8008d40:	4642      	mov	r2, r8
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d12b      	bne.n	8008da4 <_printf_float+0x23c>
 8008d4c:	e767      	b.n	8008c1e <_printf_float+0xb6>
 8008d4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d52:	f240 80dd 	bls.w	8008f10 <_printf_float+0x3a8>
 8008d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f7f7 febb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d033      	beq.n	8008dce <_printf_float+0x266>
 8008d66:	4a37      	ldr	r2, [pc, #220]	@ (8008e44 <_printf_float+0x2dc>)
 8008d68:	2301      	movs	r3, #1
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	f43f af54 	beq.w	8008c1e <_printf_float+0xb6>
 8008d76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d7a:	4543      	cmp	r3, r8
 8008d7c:	db02      	blt.n	8008d84 <_printf_float+0x21c>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	07d8      	lsls	r0, r3, #31
 8008d82:	d50f      	bpl.n	8008da4 <_printf_float+0x23c>
 8008d84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d88:	4631      	mov	r1, r6
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	47b8      	blx	r7
 8008d8e:	3001      	adds	r0, #1
 8008d90:	f43f af45 	beq.w	8008c1e <_printf_float+0xb6>
 8008d94:	f04f 0900 	mov.w	r9, #0
 8008d98:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008d9c:	f104 0a1a 	add.w	sl, r4, #26
 8008da0:	45c8      	cmp	r8, r9
 8008da2:	dc09      	bgt.n	8008db8 <_printf_float+0x250>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	079b      	lsls	r3, r3, #30
 8008da8:	f100 8103 	bmi.w	8008fb2 <_printf_float+0x44a>
 8008dac:	68e0      	ldr	r0, [r4, #12]
 8008dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008db0:	4298      	cmp	r0, r3
 8008db2:	bfb8      	it	lt
 8008db4:	4618      	movlt	r0, r3
 8008db6:	e734      	b.n	8008c22 <_printf_float+0xba>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4652      	mov	r2, sl
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	f43f af2b 	beq.w	8008c1e <_printf_float+0xb6>
 8008dc8:	f109 0901 	add.w	r9, r9, #1
 8008dcc:	e7e8      	b.n	8008da0 <_printf_float+0x238>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dc39      	bgt.n	8008e48 <_printf_float+0x2e0>
 8008dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8008e44 <_printf_float+0x2dc>)
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4628      	mov	r0, r5
 8008ddc:	47b8      	blx	r7
 8008dde:	3001      	adds	r0, #1
 8008de0:	f43f af1d 	beq.w	8008c1e <_printf_float+0xb6>
 8008de4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008de8:	ea59 0303 	orrs.w	r3, r9, r3
 8008dec:	d102      	bne.n	8008df4 <_printf_float+0x28c>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	07d9      	lsls	r1, r3, #31
 8008df2:	d5d7      	bpl.n	8008da4 <_printf_float+0x23c>
 8008df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	f43f af0d 	beq.w	8008c1e <_printf_float+0xb6>
 8008e04:	f04f 0a00 	mov.w	sl, #0
 8008e08:	f104 0b1a 	add.w	fp, r4, #26
 8008e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0e:	425b      	negs	r3, r3
 8008e10:	4553      	cmp	r3, sl
 8008e12:	dc01      	bgt.n	8008e18 <_printf_float+0x2b0>
 8008e14:	464b      	mov	r3, r9
 8008e16:	e793      	b.n	8008d40 <_printf_float+0x1d8>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	465a      	mov	r2, fp
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4628      	mov	r0, r5
 8008e20:	47b8      	blx	r7
 8008e22:	3001      	adds	r0, #1
 8008e24:	f43f aefb 	beq.w	8008c1e <_printf_float+0xb6>
 8008e28:	f10a 0a01 	add.w	sl, sl, #1
 8008e2c:	e7ee      	b.n	8008e0c <_printf_float+0x2a4>
 8008e2e:	bf00      	nop
 8008e30:	7fefffff 	.word	0x7fefffff
 8008e34:	0800b264 	.word	0x0800b264
 8008e38:	0800b268 	.word	0x0800b268
 8008e3c:	0800b26c 	.word	0x0800b26c
 8008e40:	0800b270 	.word	0x0800b270
 8008e44:	0800b274 	.word	0x0800b274
 8008e48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e4e:	4553      	cmp	r3, sl
 8008e50:	bfa8      	it	ge
 8008e52:	4653      	movge	r3, sl
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	4699      	mov	r9, r3
 8008e58:	dc36      	bgt.n	8008ec8 <_printf_float+0x360>
 8008e5a:	f04f 0b00 	mov.w	fp, #0
 8008e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e62:	f104 021a 	add.w	r2, r4, #26
 8008e66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e68:	9306      	str	r3, [sp, #24]
 8008e6a:	eba3 0309 	sub.w	r3, r3, r9
 8008e6e:	455b      	cmp	r3, fp
 8008e70:	dc31      	bgt.n	8008ed6 <_printf_float+0x36e>
 8008e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e74:	459a      	cmp	sl, r3
 8008e76:	dc3a      	bgt.n	8008eee <_printf_float+0x386>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	07da      	lsls	r2, r3, #31
 8008e7c:	d437      	bmi.n	8008eee <_printf_float+0x386>
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	ebaa 0903 	sub.w	r9, sl, r3
 8008e84:	9b06      	ldr	r3, [sp, #24]
 8008e86:	ebaa 0303 	sub.w	r3, sl, r3
 8008e8a:	4599      	cmp	r9, r3
 8008e8c:	bfa8      	it	ge
 8008e8e:	4699      	movge	r9, r3
 8008e90:	f1b9 0f00 	cmp.w	r9, #0
 8008e94:	dc33      	bgt.n	8008efe <_printf_float+0x396>
 8008e96:	f04f 0800 	mov.w	r8, #0
 8008e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e9e:	f104 0b1a 	add.w	fp, r4, #26
 8008ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ea8:	eba3 0309 	sub.w	r3, r3, r9
 8008eac:	4543      	cmp	r3, r8
 8008eae:	f77f af79 	ble.w	8008da4 <_printf_float+0x23c>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	465a      	mov	r2, fp
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4628      	mov	r0, r5
 8008eba:	47b8      	blx	r7
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	f43f aeae 	beq.w	8008c1e <_printf_float+0xb6>
 8008ec2:	f108 0801 	add.w	r8, r8, #1
 8008ec6:	e7ec      	b.n	8008ea2 <_printf_float+0x33a>
 8008ec8:	4642      	mov	r2, r8
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d1c2      	bne.n	8008e5a <_printf_float+0x2f2>
 8008ed4:	e6a3      	b.n	8008c1e <_printf_float+0xb6>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4631      	mov	r1, r6
 8008eda:	4628      	mov	r0, r5
 8008edc:	9206      	str	r2, [sp, #24]
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f43f ae9c 	beq.w	8008c1e <_printf_float+0xb6>
 8008ee6:	9a06      	ldr	r2, [sp, #24]
 8008ee8:	f10b 0b01 	add.w	fp, fp, #1
 8008eec:	e7bb      	b.n	8008e66 <_printf_float+0x2fe>
 8008eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b8      	blx	r7
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1c0      	bne.n	8008e7e <_printf_float+0x316>
 8008efc:	e68f      	b.n	8008c1e <_printf_float+0xb6>
 8008efe:	9a06      	ldr	r2, [sp, #24]
 8008f00:	464b      	mov	r3, r9
 8008f02:	4442      	add	r2, r8
 8008f04:	4631      	mov	r1, r6
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d1c3      	bne.n	8008e96 <_printf_float+0x32e>
 8008f0e:	e686      	b.n	8008c1e <_printf_float+0xb6>
 8008f10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f14:	f1ba 0f01 	cmp.w	sl, #1
 8008f18:	dc01      	bgt.n	8008f1e <_printf_float+0x3b6>
 8008f1a:	07db      	lsls	r3, r3, #31
 8008f1c:	d536      	bpl.n	8008f8c <_printf_float+0x424>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4642      	mov	r2, r8
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f ae78 	beq.w	8008c1e <_printf_float+0xb6>
 8008f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f43f ae70 	beq.w	8008c1e <_printf_float+0xb6>
 8008f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f42:	2200      	movs	r2, #0
 8008f44:	2300      	movs	r3, #0
 8008f46:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008f4a:	f7f7 fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f4e:	b9c0      	cbnz	r0, 8008f82 <_printf_float+0x41a>
 8008f50:	4653      	mov	r3, sl
 8008f52:	f108 0201 	add.w	r2, r8, #1
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d10c      	bne.n	8008f7a <_printf_float+0x412>
 8008f60:	e65d      	b.n	8008c1e <_printf_float+0xb6>
 8008f62:	2301      	movs	r3, #1
 8008f64:	465a      	mov	r2, fp
 8008f66:	4631      	mov	r1, r6
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f43f ae56 	beq.w	8008c1e <_printf_float+0xb6>
 8008f72:	f108 0801 	add.w	r8, r8, #1
 8008f76:	45d0      	cmp	r8, sl
 8008f78:	dbf3      	blt.n	8008f62 <_printf_float+0x3fa>
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f80:	e6df      	b.n	8008d42 <_printf_float+0x1da>
 8008f82:	f04f 0800 	mov.w	r8, #0
 8008f86:	f104 0b1a 	add.w	fp, r4, #26
 8008f8a:	e7f4      	b.n	8008f76 <_printf_float+0x40e>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4642      	mov	r2, r8
 8008f90:	e7e1      	b.n	8008f56 <_printf_float+0x3ee>
 8008f92:	2301      	movs	r3, #1
 8008f94:	464a      	mov	r2, r9
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae3e 	beq.w	8008c1e <_printf_float+0xb6>
 8008fa2:	f108 0801 	add.w	r8, r8, #1
 8008fa6:	68e3      	ldr	r3, [r4, #12]
 8008fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008faa:	1a5b      	subs	r3, r3, r1
 8008fac:	4543      	cmp	r3, r8
 8008fae:	dcf0      	bgt.n	8008f92 <_printf_float+0x42a>
 8008fb0:	e6fc      	b.n	8008dac <_printf_float+0x244>
 8008fb2:	f04f 0800 	mov.w	r8, #0
 8008fb6:	f104 0919 	add.w	r9, r4, #25
 8008fba:	e7f4      	b.n	8008fa6 <_printf_float+0x43e>

08008fbc <_printf_common>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	4698      	mov	r8, r3
 8008fc4:	688a      	ldr	r2, [r1, #8]
 8008fc6:	690b      	ldr	r3, [r1, #16]
 8008fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfb8      	it	lt
 8008fd0:	4613      	movlt	r3, r2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b10a      	cbz	r2, 8008fe2 <_printf_common+0x26>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	0699      	lsls	r1, r3, #26
 8008fe6:	bf42      	ittt	mi
 8008fe8:	6833      	ldrmi	r3, [r6, #0]
 8008fea:	3302      	addmi	r3, #2
 8008fec:	6033      	strmi	r3, [r6, #0]
 8008fee:	6825      	ldr	r5, [r4, #0]
 8008ff0:	f015 0506 	ands.w	r5, r5, #6
 8008ff4:	d106      	bne.n	8009004 <_printf_common+0x48>
 8008ff6:	f104 0a19 	add.w	sl, r4, #25
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	6832      	ldr	r2, [r6, #0]
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc26      	bgt.n	8009052 <_printf_common+0x96>
 8009004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009008:	6822      	ldr	r2, [r4, #0]
 800900a:	3b00      	subs	r3, #0
 800900c:	bf18      	it	ne
 800900e:	2301      	movne	r3, #1
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d42b      	bmi.n	800906c <_printf_common+0xb0>
 8009014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009018:	4641      	mov	r1, r8
 800901a:	4638      	mov	r0, r7
 800901c:	47c8      	blx	r9
 800901e:	3001      	adds	r0, #1
 8009020:	d01e      	beq.n	8009060 <_printf_common+0xa4>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	6922      	ldr	r2, [r4, #16]
 8009026:	f003 0306 	and.w	r3, r3, #6
 800902a:	2b04      	cmp	r3, #4
 800902c:	bf02      	ittt	eq
 800902e:	68e5      	ldreq	r5, [r4, #12]
 8009030:	6833      	ldreq	r3, [r6, #0]
 8009032:	1aed      	subeq	r5, r5, r3
 8009034:	68a3      	ldr	r3, [r4, #8]
 8009036:	bf0c      	ite	eq
 8009038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800903c:	2500      	movne	r5, #0
 800903e:	4293      	cmp	r3, r2
 8009040:	bfc4      	itt	gt
 8009042:	1a9b      	subgt	r3, r3, r2
 8009044:	18ed      	addgt	r5, r5, r3
 8009046:	2600      	movs	r6, #0
 8009048:	341a      	adds	r4, #26
 800904a:	42b5      	cmp	r5, r6
 800904c:	d11a      	bne.n	8009084 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e008      	b.n	8009064 <_printf_common+0xa8>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4641      	mov	r1, r8
 8009058:	4638      	mov	r0, r7
 800905a:	47c8      	blx	r9
 800905c:	3001      	adds	r0, #1
 800905e:	d103      	bne.n	8009068 <_printf_common+0xac>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	3501      	adds	r5, #1
 800906a:	e7c6      	b.n	8008ffa <_printf_common+0x3e>
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	2030      	movs	r0, #48	@ 0x30
 8009072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009076:	4422      	add	r2, r4
 8009078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800907c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009080:	3302      	adds	r3, #2
 8009082:	e7c7      	b.n	8009014 <_printf_common+0x58>
 8009084:	2301      	movs	r3, #1
 8009086:	4622      	mov	r2, r4
 8009088:	4641      	mov	r1, r8
 800908a:	4638      	mov	r0, r7
 800908c:	47c8      	blx	r9
 800908e:	3001      	adds	r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa4>
 8009092:	3601      	adds	r6, #1
 8009094:	e7d9      	b.n	800904a <_printf_common+0x8e>
	...

08009098 <_printf_i>:
 8009098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	7e0f      	ldrb	r7, [r1, #24]
 800909e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090a0:	2f78      	cmp	r7, #120	@ 0x78
 80090a2:	4691      	mov	r9, r2
 80090a4:	4680      	mov	r8, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	469a      	mov	sl, r3
 80090aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090ae:	d807      	bhi.n	80090c0 <_printf_i+0x28>
 80090b0:	2f62      	cmp	r7, #98	@ 0x62
 80090b2:	d80a      	bhi.n	80090ca <_printf_i+0x32>
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	f000 80d2 	beq.w	800925e <_printf_i+0x1c6>
 80090ba:	2f58      	cmp	r7, #88	@ 0x58
 80090bc:	f000 80b9 	beq.w	8009232 <_printf_i+0x19a>
 80090c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090c8:	e03a      	b.n	8009140 <_printf_i+0xa8>
 80090ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090ce:	2b15      	cmp	r3, #21
 80090d0:	d8f6      	bhi.n	80090c0 <_printf_i+0x28>
 80090d2:	a101      	add	r1, pc, #4	@ (adr r1, 80090d8 <_printf_i+0x40>)
 80090d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009145 	.word	0x08009145
 80090e0:	080090c1 	.word	0x080090c1
 80090e4:	080090c1 	.word	0x080090c1
 80090e8:	080090c1 	.word	0x080090c1
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	08009145 	.word	0x08009145
 80090f4:	080090c1 	.word	0x080090c1
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	08009245 	.word	0x08009245
 8009108:	0800916f 	.word	0x0800916f
 800910c:	080091ff 	.word	0x080091ff
 8009110:	080090c1 	.word	0x080090c1
 8009114:	080090c1 	.word	0x080090c1
 8009118:	08009267 	.word	0x08009267
 800911c:	080090c1 	.word	0x080090c1
 8009120:	0800916f 	.word	0x0800916f
 8009124:	080090c1 	.word	0x080090c1
 8009128:	080090c1 	.word	0x080090c1
 800912c:	08009207 	.word	0x08009207
 8009130:	6833      	ldr	r3, [r6, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6032      	str	r2, [r6, #0]
 8009138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800913c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009140:	2301      	movs	r3, #1
 8009142:	e09d      	b.n	8009280 <_printf_i+0x1e8>
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	6820      	ldr	r0, [r4, #0]
 8009148:	1d19      	adds	r1, r3, #4
 800914a:	6031      	str	r1, [r6, #0]
 800914c:	0606      	lsls	r6, r0, #24
 800914e:	d501      	bpl.n	8009154 <_printf_i+0xbc>
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	e003      	b.n	800915c <_printf_i+0xc4>
 8009154:	0645      	lsls	r5, r0, #25
 8009156:	d5fb      	bpl.n	8009150 <_printf_i+0xb8>
 8009158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800915c:	2d00      	cmp	r5, #0
 800915e:	da03      	bge.n	8009168 <_printf_i+0xd0>
 8009160:	232d      	movs	r3, #45	@ 0x2d
 8009162:	426d      	negs	r5, r5
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009168:	4859      	ldr	r0, [pc, #356]	@ (80092d0 <_printf_i+0x238>)
 800916a:	230a      	movs	r3, #10
 800916c:	e011      	b.n	8009192 <_printf_i+0xfa>
 800916e:	6821      	ldr	r1, [r4, #0]
 8009170:	6833      	ldr	r3, [r6, #0]
 8009172:	0608      	lsls	r0, r1, #24
 8009174:	f853 5b04 	ldr.w	r5, [r3], #4
 8009178:	d402      	bmi.n	8009180 <_printf_i+0xe8>
 800917a:	0649      	lsls	r1, r1, #25
 800917c:	bf48      	it	mi
 800917e:	b2ad      	uxthmi	r5, r5
 8009180:	2f6f      	cmp	r7, #111	@ 0x6f
 8009182:	4853      	ldr	r0, [pc, #332]	@ (80092d0 <_printf_i+0x238>)
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	bf14      	ite	ne
 8009188:	230a      	movne	r3, #10
 800918a:	2308      	moveq	r3, #8
 800918c:	2100      	movs	r1, #0
 800918e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009192:	6866      	ldr	r6, [r4, #4]
 8009194:	60a6      	str	r6, [r4, #8]
 8009196:	2e00      	cmp	r6, #0
 8009198:	bfa2      	ittt	ge
 800919a:	6821      	ldrge	r1, [r4, #0]
 800919c:	f021 0104 	bicge.w	r1, r1, #4
 80091a0:	6021      	strge	r1, [r4, #0]
 80091a2:	b90d      	cbnz	r5, 80091a8 <_printf_i+0x110>
 80091a4:	2e00      	cmp	r6, #0
 80091a6:	d04b      	beq.n	8009240 <_printf_i+0x1a8>
 80091a8:	4616      	mov	r6, r2
 80091aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80091ae:	fb03 5711 	mls	r7, r3, r1, r5
 80091b2:	5dc7      	ldrb	r7, [r0, r7]
 80091b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091b8:	462f      	mov	r7, r5
 80091ba:	42bb      	cmp	r3, r7
 80091bc:	460d      	mov	r5, r1
 80091be:	d9f4      	bls.n	80091aa <_printf_i+0x112>
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d10b      	bne.n	80091dc <_printf_i+0x144>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07df      	lsls	r7, r3, #31
 80091c8:	d508      	bpl.n	80091dc <_printf_i+0x144>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4299      	cmp	r1, r3
 80091d0:	bfde      	ittt	le
 80091d2:	2330      	movle	r3, #48	@ 0x30
 80091d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80091dc:	1b92      	subs	r2, r2, r6
 80091de:	6122      	str	r2, [r4, #16]
 80091e0:	f8cd a000 	str.w	sl, [sp]
 80091e4:	464b      	mov	r3, r9
 80091e6:	aa03      	add	r2, sp, #12
 80091e8:	4621      	mov	r1, r4
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff fee6 	bl	8008fbc <_printf_common>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d14a      	bne.n	800928a <_printf_i+0x1f2>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091f8:	b004      	add	sp, #16
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	f043 0320 	orr.w	r3, r3, #32
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	4833      	ldr	r0, [pc, #204]	@ (80092d4 <_printf_i+0x23c>)
 8009208:	2778      	movs	r7, #120	@ 0x78
 800920a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	6831      	ldr	r1, [r6, #0]
 8009212:	061f      	lsls	r7, r3, #24
 8009214:	f851 5b04 	ldr.w	r5, [r1], #4
 8009218:	d402      	bmi.n	8009220 <_printf_i+0x188>
 800921a:	065f      	lsls	r7, r3, #25
 800921c:	bf48      	it	mi
 800921e:	b2ad      	uxthmi	r5, r5
 8009220:	6031      	str	r1, [r6, #0]
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	bf44      	itt	mi
 8009226:	f043 0320 	orrmi.w	r3, r3, #32
 800922a:	6023      	strmi	r3, [r4, #0]
 800922c:	b11d      	cbz	r5, 8009236 <_printf_i+0x19e>
 800922e:	2310      	movs	r3, #16
 8009230:	e7ac      	b.n	800918c <_printf_i+0xf4>
 8009232:	4827      	ldr	r0, [pc, #156]	@ (80092d0 <_printf_i+0x238>)
 8009234:	e7e9      	b.n	800920a <_printf_i+0x172>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f023 0320 	bic.w	r3, r3, #32
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	e7f6      	b.n	800922e <_printf_i+0x196>
 8009240:	4616      	mov	r6, r2
 8009242:	e7bd      	b.n	80091c0 <_printf_i+0x128>
 8009244:	6833      	ldr	r3, [r6, #0]
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	6961      	ldr	r1, [r4, #20]
 800924a:	1d18      	adds	r0, r3, #4
 800924c:	6030      	str	r0, [r6, #0]
 800924e:	062e      	lsls	r6, r5, #24
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	d501      	bpl.n	8009258 <_printf_i+0x1c0>
 8009254:	6019      	str	r1, [r3, #0]
 8009256:	e002      	b.n	800925e <_printf_i+0x1c6>
 8009258:	0668      	lsls	r0, r5, #25
 800925a:	d5fb      	bpl.n	8009254 <_printf_i+0x1bc>
 800925c:	8019      	strh	r1, [r3, #0]
 800925e:	2300      	movs	r3, #0
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	4616      	mov	r6, r2
 8009264:	e7bc      	b.n	80091e0 <_printf_i+0x148>
 8009266:	6833      	ldr	r3, [r6, #0]
 8009268:	1d1a      	adds	r2, r3, #4
 800926a:	6032      	str	r2, [r6, #0]
 800926c:	681e      	ldr	r6, [r3, #0]
 800926e:	6862      	ldr	r2, [r4, #4]
 8009270:	2100      	movs	r1, #0
 8009272:	4630      	mov	r0, r6
 8009274:	f7f6 ffb4 	bl	80001e0 <memchr>
 8009278:	b108      	cbz	r0, 800927e <_printf_i+0x1e6>
 800927a:	1b80      	subs	r0, r0, r6
 800927c:	6060      	str	r0, [r4, #4]
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	2300      	movs	r3, #0
 8009284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009288:	e7aa      	b.n	80091e0 <_printf_i+0x148>
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	4632      	mov	r2, r6
 800928e:	4649      	mov	r1, r9
 8009290:	4640      	mov	r0, r8
 8009292:	47d0      	blx	sl
 8009294:	3001      	adds	r0, #1
 8009296:	d0ad      	beq.n	80091f4 <_printf_i+0x15c>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	079b      	lsls	r3, r3, #30
 800929c:	d413      	bmi.n	80092c6 <_printf_i+0x22e>
 800929e:	68e0      	ldr	r0, [r4, #12]
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	4298      	cmp	r0, r3
 80092a4:	bfb8      	it	lt
 80092a6:	4618      	movlt	r0, r3
 80092a8:	e7a6      	b.n	80091f8 <_printf_i+0x160>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4632      	mov	r2, r6
 80092ae:	4649      	mov	r1, r9
 80092b0:	4640      	mov	r0, r8
 80092b2:	47d0      	blx	sl
 80092b4:	3001      	adds	r0, #1
 80092b6:	d09d      	beq.n	80091f4 <_printf_i+0x15c>
 80092b8:	3501      	adds	r5, #1
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	9903      	ldr	r1, [sp, #12]
 80092be:	1a5b      	subs	r3, r3, r1
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dcf2      	bgt.n	80092aa <_printf_i+0x212>
 80092c4:	e7eb      	b.n	800929e <_printf_i+0x206>
 80092c6:	2500      	movs	r5, #0
 80092c8:	f104 0619 	add.w	r6, r4, #25
 80092cc:	e7f5      	b.n	80092ba <_printf_i+0x222>
 80092ce:	bf00      	nop
 80092d0:	0800b276 	.word	0x0800b276
 80092d4:	0800b287 	.word	0x0800b287

080092d8 <std>:
 80092d8:	2300      	movs	r3, #0
 80092da:	b510      	push	{r4, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	e9c0 3300 	strd	r3, r3, [r0]
 80092e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092e6:	6083      	str	r3, [r0, #8]
 80092e8:	8181      	strh	r1, [r0, #12]
 80092ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80092ec:	81c2      	strh	r2, [r0, #14]
 80092ee:	6183      	str	r3, [r0, #24]
 80092f0:	4619      	mov	r1, r3
 80092f2:	2208      	movs	r2, #8
 80092f4:	305c      	adds	r0, #92	@ 0x5c
 80092f6:	f000 f8f4 	bl	80094e2 <memset>
 80092fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <std+0x58>)
 80092fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80092fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009334 <std+0x5c>)
 8009300:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009302:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <std+0x60>)
 8009304:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009306:	4b0d      	ldr	r3, [pc, #52]	@ (800933c <std+0x64>)
 8009308:	6323      	str	r3, [r4, #48]	@ 0x30
 800930a:	4b0d      	ldr	r3, [pc, #52]	@ (8009340 <std+0x68>)
 800930c:	6224      	str	r4, [r4, #32]
 800930e:	429c      	cmp	r4, r3
 8009310:	d006      	beq.n	8009320 <std+0x48>
 8009312:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009316:	4294      	cmp	r4, r2
 8009318:	d002      	beq.n	8009320 <std+0x48>
 800931a:	33d0      	adds	r3, #208	@ 0xd0
 800931c:	429c      	cmp	r4, r3
 800931e:	d105      	bne.n	800932c <std+0x54>
 8009320:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009328:	f000 b968 	b.w	80095fc <__retarget_lock_init_recursive>
 800932c:	bd10      	pop	{r4, pc}
 800932e:	bf00      	nop
 8009330:	0800945d 	.word	0x0800945d
 8009334:	0800947f 	.word	0x0800947f
 8009338:	080094b7 	.word	0x080094b7
 800933c:	080094db 	.word	0x080094db
 8009340:	20001f3c 	.word	0x20001f3c

08009344 <stdio_exit_handler>:
 8009344:	4a02      	ldr	r2, [pc, #8]	@ (8009350 <stdio_exit_handler+0xc>)
 8009346:	4903      	ldr	r1, [pc, #12]	@ (8009354 <stdio_exit_handler+0x10>)
 8009348:	4803      	ldr	r0, [pc, #12]	@ (8009358 <stdio_exit_handler+0x14>)
 800934a:	f000 b869 	b.w	8009420 <_fwalk_sglue>
 800934e:	bf00      	nop
 8009350:	20000104 	.word	0x20000104
 8009354:	0800ab59 	.word	0x0800ab59
 8009358:	20000114 	.word	0x20000114

0800935c <cleanup_stdio>:
 800935c:	6841      	ldr	r1, [r0, #4]
 800935e:	4b0c      	ldr	r3, [pc, #48]	@ (8009390 <cleanup_stdio+0x34>)
 8009360:	4299      	cmp	r1, r3
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	d001      	beq.n	800936c <cleanup_stdio+0x10>
 8009368:	f001 fbf6 	bl	800ab58 <_fflush_r>
 800936c:	68a1      	ldr	r1, [r4, #8]
 800936e:	4b09      	ldr	r3, [pc, #36]	@ (8009394 <cleanup_stdio+0x38>)
 8009370:	4299      	cmp	r1, r3
 8009372:	d002      	beq.n	800937a <cleanup_stdio+0x1e>
 8009374:	4620      	mov	r0, r4
 8009376:	f001 fbef 	bl	800ab58 <_fflush_r>
 800937a:	68e1      	ldr	r1, [r4, #12]
 800937c:	4b06      	ldr	r3, [pc, #24]	@ (8009398 <cleanup_stdio+0x3c>)
 800937e:	4299      	cmp	r1, r3
 8009380:	d004      	beq.n	800938c <cleanup_stdio+0x30>
 8009382:	4620      	mov	r0, r4
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f001 bbe6 	b.w	800ab58 <_fflush_r>
 800938c:	bd10      	pop	{r4, pc}
 800938e:	bf00      	nop
 8009390:	20001f3c 	.word	0x20001f3c
 8009394:	20001fa4 	.word	0x20001fa4
 8009398:	2000200c 	.word	0x2000200c

0800939c <global_stdio_init.part.0>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4b0b      	ldr	r3, [pc, #44]	@ (80093cc <global_stdio_init.part.0+0x30>)
 80093a0:	4c0b      	ldr	r4, [pc, #44]	@ (80093d0 <global_stdio_init.part.0+0x34>)
 80093a2:	4a0c      	ldr	r2, [pc, #48]	@ (80093d4 <global_stdio_init.part.0+0x38>)
 80093a4:	601a      	str	r2, [r3, #0]
 80093a6:	4620      	mov	r0, r4
 80093a8:	2200      	movs	r2, #0
 80093aa:	2104      	movs	r1, #4
 80093ac:	f7ff ff94 	bl	80092d8 <std>
 80093b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093b4:	2201      	movs	r2, #1
 80093b6:	2109      	movs	r1, #9
 80093b8:	f7ff ff8e 	bl	80092d8 <std>
 80093bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093c0:	2202      	movs	r2, #2
 80093c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c6:	2112      	movs	r1, #18
 80093c8:	f7ff bf86 	b.w	80092d8 <std>
 80093cc:	20002074 	.word	0x20002074
 80093d0:	20001f3c 	.word	0x20001f3c
 80093d4:	08009345 	.word	0x08009345

080093d8 <__sfp_lock_acquire>:
 80093d8:	4801      	ldr	r0, [pc, #4]	@ (80093e0 <__sfp_lock_acquire+0x8>)
 80093da:	f000 b910 	b.w	80095fe <__retarget_lock_acquire_recursive>
 80093de:	bf00      	nop
 80093e0:	2000207d 	.word	0x2000207d

080093e4 <__sfp_lock_release>:
 80093e4:	4801      	ldr	r0, [pc, #4]	@ (80093ec <__sfp_lock_release+0x8>)
 80093e6:	f000 b90b 	b.w	8009600 <__retarget_lock_release_recursive>
 80093ea:	bf00      	nop
 80093ec:	2000207d 	.word	0x2000207d

080093f0 <__sinit>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	f7ff fff0 	bl	80093d8 <__sfp_lock_acquire>
 80093f8:	6a23      	ldr	r3, [r4, #32]
 80093fa:	b11b      	cbz	r3, 8009404 <__sinit+0x14>
 80093fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009400:	f7ff bff0 	b.w	80093e4 <__sfp_lock_release>
 8009404:	4b04      	ldr	r3, [pc, #16]	@ (8009418 <__sinit+0x28>)
 8009406:	6223      	str	r3, [r4, #32]
 8009408:	4b04      	ldr	r3, [pc, #16]	@ (800941c <__sinit+0x2c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f5      	bne.n	80093fc <__sinit+0xc>
 8009410:	f7ff ffc4 	bl	800939c <global_stdio_init.part.0>
 8009414:	e7f2      	b.n	80093fc <__sinit+0xc>
 8009416:	bf00      	nop
 8009418:	0800935d 	.word	0x0800935d
 800941c:	20002074 	.word	0x20002074

08009420 <_fwalk_sglue>:
 8009420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009424:	4607      	mov	r7, r0
 8009426:	4688      	mov	r8, r1
 8009428:	4614      	mov	r4, r2
 800942a:	2600      	movs	r6, #0
 800942c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009430:	f1b9 0901 	subs.w	r9, r9, #1
 8009434:	d505      	bpl.n	8009442 <_fwalk_sglue+0x22>
 8009436:	6824      	ldr	r4, [r4, #0]
 8009438:	2c00      	cmp	r4, #0
 800943a:	d1f7      	bne.n	800942c <_fwalk_sglue+0xc>
 800943c:	4630      	mov	r0, r6
 800943e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009442:	89ab      	ldrh	r3, [r5, #12]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d907      	bls.n	8009458 <_fwalk_sglue+0x38>
 8009448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800944c:	3301      	adds	r3, #1
 800944e:	d003      	beq.n	8009458 <_fwalk_sglue+0x38>
 8009450:	4629      	mov	r1, r5
 8009452:	4638      	mov	r0, r7
 8009454:	47c0      	blx	r8
 8009456:	4306      	orrs	r6, r0
 8009458:	3568      	adds	r5, #104	@ 0x68
 800945a:	e7e9      	b.n	8009430 <_fwalk_sglue+0x10>

0800945c <__sread>:
 800945c:	b510      	push	{r4, lr}
 800945e:	460c      	mov	r4, r1
 8009460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009464:	f000 f86c 	bl	8009540 <_read_r>
 8009468:	2800      	cmp	r0, #0
 800946a:	bfab      	itete	ge
 800946c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800946e:	89a3      	ldrhlt	r3, [r4, #12]
 8009470:	181b      	addge	r3, r3, r0
 8009472:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009476:	bfac      	ite	ge
 8009478:	6563      	strge	r3, [r4, #84]	@ 0x54
 800947a:	81a3      	strhlt	r3, [r4, #12]
 800947c:	bd10      	pop	{r4, pc}

0800947e <__swrite>:
 800947e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009482:	461f      	mov	r7, r3
 8009484:	898b      	ldrh	r3, [r1, #12]
 8009486:	05db      	lsls	r3, r3, #23
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	4616      	mov	r6, r2
 800948e:	d505      	bpl.n	800949c <__swrite+0x1e>
 8009490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009494:	2302      	movs	r3, #2
 8009496:	2200      	movs	r2, #0
 8009498:	f000 f840 	bl	800951c <_lseek_r>
 800949c:	89a3      	ldrh	r3, [r4, #12]
 800949e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	4632      	mov	r2, r6
 80094aa:	463b      	mov	r3, r7
 80094ac:	4628      	mov	r0, r5
 80094ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094b2:	f000 b867 	b.w	8009584 <_write_r>

080094b6 <__sseek>:
 80094b6:	b510      	push	{r4, lr}
 80094b8:	460c      	mov	r4, r1
 80094ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094be:	f000 f82d 	bl	800951c <_lseek_r>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	bf15      	itete	ne
 80094c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80094ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80094ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80094d2:	81a3      	strheq	r3, [r4, #12]
 80094d4:	bf18      	it	ne
 80094d6:	81a3      	strhne	r3, [r4, #12]
 80094d8:	bd10      	pop	{r4, pc}

080094da <__sclose>:
 80094da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094de:	f000 b80d 	b.w	80094fc <_close_r>

080094e2 <memset>:
 80094e2:	4402      	add	r2, r0
 80094e4:	4603      	mov	r3, r0
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d100      	bne.n	80094ec <memset+0xa>
 80094ea:	4770      	bx	lr
 80094ec:	f803 1b01 	strb.w	r1, [r3], #1
 80094f0:	e7f9      	b.n	80094e6 <memset+0x4>
	...

080094f4 <_localeconv_r>:
 80094f4:	4800      	ldr	r0, [pc, #0]	@ (80094f8 <_localeconv_r+0x4>)
 80094f6:	4770      	bx	lr
 80094f8:	20000250 	.word	0x20000250

080094fc <_close_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d06      	ldr	r5, [pc, #24]	@ (8009518 <_close_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f8 f926 	bl	8001758 <_close>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_close_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_close_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20002078 	.word	0x20002078

0800951c <_lseek_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d07      	ldr	r5, [pc, #28]	@ (800953c <_lseek_r+0x20>)
 8009520:	4604      	mov	r4, r0
 8009522:	4608      	mov	r0, r1
 8009524:	4611      	mov	r1, r2
 8009526:	2200      	movs	r2, #0
 8009528:	602a      	str	r2, [r5, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	f7f8 f93b 	bl	80017a6 <_lseek>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_lseek_r+0x1e>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_lseek_r+0x1e>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	20002078 	.word	0x20002078

08009540 <_read_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	@ (8009560 <_read_r+0x20>)
 8009544:	4604      	mov	r4, r0
 8009546:	4608      	mov	r0, r1
 8009548:	4611      	mov	r1, r2
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	f7f8 f8c9 	bl	80016e6 <_read>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_read_r+0x1e>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_read_r+0x1e>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	20002078 	.word	0x20002078

08009564 <_sbrk_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d06      	ldr	r5, [pc, #24]	@ (8009580 <_sbrk_r+0x1c>)
 8009568:	2300      	movs	r3, #0
 800956a:	4604      	mov	r4, r0
 800956c:	4608      	mov	r0, r1
 800956e:	602b      	str	r3, [r5, #0]
 8009570:	f7f8 f926 	bl	80017c0 <_sbrk>
 8009574:	1c43      	adds	r3, r0, #1
 8009576:	d102      	bne.n	800957e <_sbrk_r+0x1a>
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	b103      	cbz	r3, 800957e <_sbrk_r+0x1a>
 800957c:	6023      	str	r3, [r4, #0]
 800957e:	bd38      	pop	{r3, r4, r5, pc}
 8009580:	20002078 	.word	0x20002078

08009584 <_write_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4d07      	ldr	r5, [pc, #28]	@ (80095a4 <_write_r+0x20>)
 8009588:	4604      	mov	r4, r0
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	2200      	movs	r2, #0
 8009590:	602a      	str	r2, [r5, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f8 f8c4 	bl	8001720 <_write>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_write_r+0x1e>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_write_r+0x1e>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20002078 	.word	0x20002078

080095a8 <__errno>:
 80095a8:	4b01      	ldr	r3, [pc, #4]	@ (80095b0 <__errno+0x8>)
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	20000110 	.word	0x20000110

080095b4 <__libc_init_array>:
 80095b4:	b570      	push	{r4, r5, r6, lr}
 80095b6:	4d0d      	ldr	r5, [pc, #52]	@ (80095ec <__libc_init_array+0x38>)
 80095b8:	4c0d      	ldr	r4, [pc, #52]	@ (80095f0 <__libc_init_array+0x3c>)
 80095ba:	1b64      	subs	r4, r4, r5
 80095bc:	10a4      	asrs	r4, r4, #2
 80095be:	2600      	movs	r6, #0
 80095c0:	42a6      	cmp	r6, r4
 80095c2:	d109      	bne.n	80095d8 <__libc_init_array+0x24>
 80095c4:	4d0b      	ldr	r5, [pc, #44]	@ (80095f4 <__libc_init_array+0x40>)
 80095c6:	4c0c      	ldr	r4, [pc, #48]	@ (80095f8 <__libc_init_array+0x44>)
 80095c8:	f001 fdf6 	bl	800b1b8 <_init>
 80095cc:	1b64      	subs	r4, r4, r5
 80095ce:	10a4      	asrs	r4, r4, #2
 80095d0:	2600      	movs	r6, #0
 80095d2:	42a6      	cmp	r6, r4
 80095d4:	d105      	bne.n	80095e2 <__libc_init_array+0x2e>
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095dc:	4798      	blx	r3
 80095de:	3601      	adds	r6, #1
 80095e0:	e7ee      	b.n	80095c0 <__libc_init_array+0xc>
 80095e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e6:	4798      	blx	r3
 80095e8:	3601      	adds	r6, #1
 80095ea:	e7f2      	b.n	80095d2 <__libc_init_array+0x1e>
 80095ec:	0800b5e0 	.word	0x0800b5e0
 80095f0:	0800b5e0 	.word	0x0800b5e0
 80095f4:	0800b5e0 	.word	0x0800b5e0
 80095f8:	0800b5e4 	.word	0x0800b5e4

080095fc <__retarget_lock_init_recursive>:
 80095fc:	4770      	bx	lr

080095fe <__retarget_lock_acquire_recursive>:
 80095fe:	4770      	bx	lr

08009600 <__retarget_lock_release_recursive>:
 8009600:	4770      	bx	lr

08009602 <memcpy>:
 8009602:	440a      	add	r2, r1
 8009604:	4291      	cmp	r1, r2
 8009606:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800960a:	d100      	bne.n	800960e <memcpy+0xc>
 800960c:	4770      	bx	lr
 800960e:	b510      	push	{r4, lr}
 8009610:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009618:	4291      	cmp	r1, r2
 800961a:	d1f9      	bne.n	8009610 <memcpy+0xe>
 800961c:	bd10      	pop	{r4, pc}

0800961e <quorem>:
 800961e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009622:	6903      	ldr	r3, [r0, #16]
 8009624:	690c      	ldr	r4, [r1, #16]
 8009626:	42a3      	cmp	r3, r4
 8009628:	4607      	mov	r7, r0
 800962a:	db7e      	blt.n	800972a <quorem+0x10c>
 800962c:	3c01      	subs	r4, #1
 800962e:	f101 0814 	add.w	r8, r1, #20
 8009632:	00a3      	lsls	r3, r4, #2
 8009634:	f100 0514 	add.w	r5, r0, #20
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009648:	3301      	adds	r3, #1
 800964a:	429a      	cmp	r2, r3
 800964c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009650:	fbb2 f6f3 	udiv	r6, r2, r3
 8009654:	d32e      	bcc.n	80096b4 <quorem+0x96>
 8009656:	f04f 0a00 	mov.w	sl, #0
 800965a:	46c4      	mov	ip, r8
 800965c:	46ae      	mov	lr, r5
 800965e:	46d3      	mov	fp, sl
 8009660:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009664:	b298      	uxth	r0, r3
 8009666:	fb06 a000 	mla	r0, r6, r0, sl
 800966a:	0c02      	lsrs	r2, r0, #16
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	fb06 2303 	mla	r3, r6, r3, r2
 8009672:	f8de 2000 	ldr.w	r2, [lr]
 8009676:	b280      	uxth	r0, r0
 8009678:	b292      	uxth	r2, r2
 800967a:	1a12      	subs	r2, r2, r0
 800967c:	445a      	add	r2, fp
 800967e:	f8de 0000 	ldr.w	r0, [lr]
 8009682:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009686:	b29b      	uxth	r3, r3
 8009688:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800968c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009690:	b292      	uxth	r2, r2
 8009692:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009696:	45e1      	cmp	r9, ip
 8009698:	f84e 2b04 	str.w	r2, [lr], #4
 800969c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096a0:	d2de      	bcs.n	8009660 <quorem+0x42>
 80096a2:	9b00      	ldr	r3, [sp, #0]
 80096a4:	58eb      	ldr	r3, [r5, r3]
 80096a6:	b92b      	cbnz	r3, 80096b4 <quorem+0x96>
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	3b04      	subs	r3, #4
 80096ac:	429d      	cmp	r5, r3
 80096ae:	461a      	mov	r2, r3
 80096b0:	d32f      	bcc.n	8009712 <quorem+0xf4>
 80096b2:	613c      	str	r4, [r7, #16]
 80096b4:	4638      	mov	r0, r7
 80096b6:	f001 f8c3 	bl	800a840 <__mcmp>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	db25      	blt.n	800970a <quorem+0xec>
 80096be:	4629      	mov	r1, r5
 80096c0:	2000      	movs	r0, #0
 80096c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80096c6:	f8d1 c000 	ldr.w	ip, [r1]
 80096ca:	fa1f fe82 	uxth.w	lr, r2
 80096ce:	fa1f f38c 	uxth.w	r3, ip
 80096d2:	eba3 030e 	sub.w	r3, r3, lr
 80096d6:	4403      	add	r3, r0
 80096d8:	0c12      	lsrs	r2, r2, #16
 80096da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096e8:	45c1      	cmp	r9, r8
 80096ea:	f841 3b04 	str.w	r3, [r1], #4
 80096ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096f2:	d2e6      	bcs.n	80096c2 <quorem+0xa4>
 80096f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096fc:	b922      	cbnz	r2, 8009708 <quorem+0xea>
 80096fe:	3b04      	subs	r3, #4
 8009700:	429d      	cmp	r5, r3
 8009702:	461a      	mov	r2, r3
 8009704:	d30b      	bcc.n	800971e <quorem+0x100>
 8009706:	613c      	str	r4, [r7, #16]
 8009708:	3601      	adds	r6, #1
 800970a:	4630      	mov	r0, r6
 800970c:	b003      	add	sp, #12
 800970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	3b04      	subs	r3, #4
 8009716:	2a00      	cmp	r2, #0
 8009718:	d1cb      	bne.n	80096b2 <quorem+0x94>
 800971a:	3c01      	subs	r4, #1
 800971c:	e7c6      	b.n	80096ac <quorem+0x8e>
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	3b04      	subs	r3, #4
 8009722:	2a00      	cmp	r2, #0
 8009724:	d1ef      	bne.n	8009706 <quorem+0xe8>
 8009726:	3c01      	subs	r4, #1
 8009728:	e7ea      	b.n	8009700 <quorem+0xe2>
 800972a:	2000      	movs	r0, #0
 800972c:	e7ee      	b.n	800970c <quorem+0xee>
	...

08009730 <_dtoa_r>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	69c7      	ldr	r7, [r0, #28]
 8009736:	b099      	sub	sp, #100	@ 0x64
 8009738:	ed8d 0b02 	vstr	d0, [sp, #8]
 800973c:	ec55 4b10 	vmov	r4, r5, d0
 8009740:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009742:	9109      	str	r1, [sp, #36]	@ 0x24
 8009744:	4683      	mov	fp, r0
 8009746:	920e      	str	r2, [sp, #56]	@ 0x38
 8009748:	9313      	str	r3, [sp, #76]	@ 0x4c
 800974a:	b97f      	cbnz	r7, 800976c <_dtoa_r+0x3c>
 800974c:	2010      	movs	r0, #16
 800974e:	f7ff f8ad 	bl	80088ac <malloc>
 8009752:	4602      	mov	r2, r0
 8009754:	f8cb 001c 	str.w	r0, [fp, #28]
 8009758:	b920      	cbnz	r0, 8009764 <_dtoa_r+0x34>
 800975a:	4ba7      	ldr	r3, [pc, #668]	@ (80099f8 <_dtoa_r+0x2c8>)
 800975c:	21ef      	movs	r1, #239	@ 0xef
 800975e:	48a7      	ldr	r0, [pc, #668]	@ (80099fc <_dtoa_r+0x2cc>)
 8009760:	f001 fa22 	bl	800aba8 <__assert_func>
 8009764:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009768:	6007      	str	r7, [r0, #0]
 800976a:	60c7      	str	r7, [r0, #12]
 800976c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009770:	6819      	ldr	r1, [r3, #0]
 8009772:	b159      	cbz	r1, 800978c <_dtoa_r+0x5c>
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	604a      	str	r2, [r1, #4]
 8009778:	2301      	movs	r3, #1
 800977a:	4093      	lsls	r3, r2
 800977c:	608b      	str	r3, [r1, #8]
 800977e:	4658      	mov	r0, fp
 8009780:	f000 fe24 	bl	800a3cc <_Bfree>
 8009784:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	1e2b      	subs	r3, r5, #0
 800978e:	bfb9      	ittee	lt
 8009790:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009794:	9303      	strlt	r3, [sp, #12]
 8009796:	2300      	movge	r3, #0
 8009798:	6033      	strge	r3, [r6, #0]
 800979a:	9f03      	ldr	r7, [sp, #12]
 800979c:	4b98      	ldr	r3, [pc, #608]	@ (8009a00 <_dtoa_r+0x2d0>)
 800979e:	bfbc      	itt	lt
 80097a0:	2201      	movlt	r2, #1
 80097a2:	6032      	strlt	r2, [r6, #0]
 80097a4:	43bb      	bics	r3, r7
 80097a6:	d112      	bne.n	80097ce <_dtoa_r+0x9e>
 80097a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097b4:	4323      	orrs	r3, r4
 80097b6:	f000 854d 	beq.w	800a254 <_dtoa_r+0xb24>
 80097ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009a14 <_dtoa_r+0x2e4>
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 854f 	beq.w	800a264 <_dtoa_r+0xb34>
 80097c6:	f10a 0303 	add.w	r3, sl, #3
 80097ca:	f000 bd49 	b.w	800a260 <_dtoa_r+0xb30>
 80097ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097d2:	2200      	movs	r2, #0
 80097d4:	ec51 0b17 	vmov	r0, r1, d7
 80097d8:	2300      	movs	r3, #0
 80097da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80097de:	f7f7 f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80097e2:	4680      	mov	r8, r0
 80097e4:	b158      	cbz	r0, 80097fe <_dtoa_r+0xce>
 80097e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097e8:	2301      	movs	r3, #1
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097ee:	b113      	cbz	r3, 80097f6 <_dtoa_r+0xc6>
 80097f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097f2:	4b84      	ldr	r3, [pc, #528]	@ (8009a04 <_dtoa_r+0x2d4>)
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009a18 <_dtoa_r+0x2e8>
 80097fa:	f000 bd33 	b.w	800a264 <_dtoa_r+0xb34>
 80097fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009802:	aa16      	add	r2, sp, #88	@ 0x58
 8009804:	a917      	add	r1, sp, #92	@ 0x5c
 8009806:	4658      	mov	r0, fp
 8009808:	f001 f8ca 	bl	800a9a0 <__d2b>
 800980c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009810:	4681      	mov	r9, r0
 8009812:	2e00      	cmp	r6, #0
 8009814:	d077      	beq.n	8009906 <_dtoa_r+0x1d6>
 8009816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009818:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800981c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009824:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009828:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800982c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009830:	4619      	mov	r1, r3
 8009832:	2200      	movs	r2, #0
 8009834:	4b74      	ldr	r3, [pc, #464]	@ (8009a08 <_dtoa_r+0x2d8>)
 8009836:	f7f6 fd2f 	bl	8000298 <__aeabi_dsub>
 800983a:	a369      	add	r3, pc, #420	@ (adr r3, 80099e0 <_dtoa_r+0x2b0>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f7f6 fee2 	bl	8000608 <__aeabi_dmul>
 8009844:	a368      	add	r3, pc, #416	@ (adr r3, 80099e8 <_dtoa_r+0x2b8>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f6 fd27 	bl	800029c <__adddf3>
 800984e:	4604      	mov	r4, r0
 8009850:	4630      	mov	r0, r6
 8009852:	460d      	mov	r5, r1
 8009854:	f7f6 fe6e 	bl	8000534 <__aeabi_i2d>
 8009858:	a365      	add	r3, pc, #404	@ (adr r3, 80099f0 <_dtoa_r+0x2c0>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fed3 	bl	8000608 <__aeabi_dmul>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f6 fd17 	bl	800029c <__adddf3>
 800986e:	4604      	mov	r4, r0
 8009870:	460d      	mov	r5, r1
 8009872:	f7f7 f979 	bl	8000b68 <__aeabi_d2iz>
 8009876:	2200      	movs	r2, #0
 8009878:	4607      	mov	r7, r0
 800987a:	2300      	movs	r3, #0
 800987c:	4620      	mov	r0, r4
 800987e:	4629      	mov	r1, r5
 8009880:	f7f7 f934 	bl	8000aec <__aeabi_dcmplt>
 8009884:	b140      	cbz	r0, 8009898 <_dtoa_r+0x168>
 8009886:	4638      	mov	r0, r7
 8009888:	f7f6 fe54 	bl	8000534 <__aeabi_i2d>
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	f7f7 f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8009894:	b900      	cbnz	r0, 8009898 <_dtoa_r+0x168>
 8009896:	3f01      	subs	r7, #1
 8009898:	2f16      	cmp	r7, #22
 800989a:	d851      	bhi.n	8009940 <_dtoa_r+0x210>
 800989c:	4b5b      	ldr	r3, [pc, #364]	@ (8009a0c <_dtoa_r+0x2dc>)
 800989e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098aa:	f7f7 f91f 	bl	8000aec <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d048      	beq.n	8009944 <_dtoa_r+0x214>
 80098b2:	3f01      	subs	r7, #1
 80098b4:	2300      	movs	r3, #0
 80098b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80098b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098ba:	1b9b      	subs	r3, r3, r6
 80098bc:	1e5a      	subs	r2, r3, #1
 80098be:	bf44      	itt	mi
 80098c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80098c4:	2300      	movmi	r3, #0
 80098c6:	9208      	str	r2, [sp, #32]
 80098c8:	bf54      	ite	pl
 80098ca:	f04f 0800 	movpl.w	r8, #0
 80098ce:	9308      	strmi	r3, [sp, #32]
 80098d0:	2f00      	cmp	r7, #0
 80098d2:	db39      	blt.n	8009948 <_dtoa_r+0x218>
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80098d8:	443b      	add	r3, r7
 80098da:	9308      	str	r3, [sp, #32]
 80098dc:	2300      	movs	r3, #0
 80098de:	930a      	str	r3, [sp, #40]	@ 0x28
 80098e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e2:	2b09      	cmp	r3, #9
 80098e4:	d864      	bhi.n	80099b0 <_dtoa_r+0x280>
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	bfc4      	itt	gt
 80098ea:	3b04      	subgt	r3, #4
 80098ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80098ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f0:	f1a3 0302 	sub.w	r3, r3, #2
 80098f4:	bfcc      	ite	gt
 80098f6:	2400      	movgt	r4, #0
 80098f8:	2401      	movle	r4, #1
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d863      	bhi.n	80099c6 <_dtoa_r+0x296>
 80098fe:	e8df f003 	tbb	[pc, r3]
 8009902:	372a      	.short	0x372a
 8009904:	5535      	.short	0x5535
 8009906:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800990a:	441e      	add	r6, r3
 800990c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009910:	2b20      	cmp	r3, #32
 8009912:	bfc1      	itttt	gt
 8009914:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009918:	409f      	lslgt	r7, r3
 800991a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800991e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009922:	bfd6      	itet	le
 8009924:	f1c3 0320 	rsble	r3, r3, #32
 8009928:	ea47 0003 	orrgt.w	r0, r7, r3
 800992c:	fa04 f003 	lslle.w	r0, r4, r3
 8009930:	f7f6 fdf0 	bl	8000514 <__aeabi_ui2d>
 8009934:	2201      	movs	r2, #1
 8009936:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800993a:	3e01      	subs	r6, #1
 800993c:	9214      	str	r2, [sp, #80]	@ 0x50
 800993e:	e777      	b.n	8009830 <_dtoa_r+0x100>
 8009940:	2301      	movs	r3, #1
 8009942:	e7b8      	b.n	80098b6 <_dtoa_r+0x186>
 8009944:	9012      	str	r0, [sp, #72]	@ 0x48
 8009946:	e7b7      	b.n	80098b8 <_dtoa_r+0x188>
 8009948:	427b      	negs	r3, r7
 800994a:	930a      	str	r3, [sp, #40]	@ 0x28
 800994c:	2300      	movs	r3, #0
 800994e:	eba8 0807 	sub.w	r8, r8, r7
 8009952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009954:	e7c4      	b.n	80098e0 <_dtoa_r+0x1b0>
 8009956:	2300      	movs	r3, #0
 8009958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800995a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800995c:	2b00      	cmp	r3, #0
 800995e:	dc35      	bgt.n	80099cc <_dtoa_r+0x29c>
 8009960:	2301      	movs	r3, #1
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	9307      	str	r3, [sp, #28]
 8009966:	461a      	mov	r2, r3
 8009968:	920e      	str	r2, [sp, #56]	@ 0x38
 800996a:	e00b      	b.n	8009984 <_dtoa_r+0x254>
 800996c:	2301      	movs	r3, #1
 800996e:	e7f3      	b.n	8009958 <_dtoa_r+0x228>
 8009970:	2300      	movs	r3, #0
 8009972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009976:	18fb      	adds	r3, r7, r3
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	3301      	adds	r3, #1
 800997c:	2b01      	cmp	r3, #1
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	bfb8      	it	lt
 8009982:	2301      	movlt	r3, #1
 8009984:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009988:	2100      	movs	r1, #0
 800998a:	2204      	movs	r2, #4
 800998c:	f102 0514 	add.w	r5, r2, #20
 8009990:	429d      	cmp	r5, r3
 8009992:	d91f      	bls.n	80099d4 <_dtoa_r+0x2a4>
 8009994:	6041      	str	r1, [r0, #4]
 8009996:	4658      	mov	r0, fp
 8009998:	f000 fcd8 	bl	800a34c <_Balloc>
 800999c:	4682      	mov	sl, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d13c      	bne.n	8009a1c <_dtoa_r+0x2ec>
 80099a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <_dtoa_r+0x2e0>)
 80099a4:	4602      	mov	r2, r0
 80099a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80099aa:	e6d8      	b.n	800975e <_dtoa_r+0x2e>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e7e0      	b.n	8009972 <_dtoa_r+0x242>
 80099b0:	2401      	movs	r4, #1
 80099b2:	2300      	movs	r3, #0
 80099b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	9307      	str	r3, [sp, #28]
 80099c0:	2200      	movs	r2, #0
 80099c2:	2312      	movs	r3, #18
 80099c4:	e7d0      	b.n	8009968 <_dtoa_r+0x238>
 80099c6:	2301      	movs	r3, #1
 80099c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099ca:	e7f5      	b.n	80099b8 <_dtoa_r+0x288>
 80099cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	e7d7      	b.n	8009984 <_dtoa_r+0x254>
 80099d4:	3101      	adds	r1, #1
 80099d6:	0052      	lsls	r2, r2, #1
 80099d8:	e7d8      	b.n	800998c <_dtoa_r+0x25c>
 80099da:	bf00      	nop
 80099dc:	f3af 8000 	nop.w
 80099e0:	636f4361 	.word	0x636f4361
 80099e4:	3fd287a7 	.word	0x3fd287a7
 80099e8:	8b60c8b3 	.word	0x8b60c8b3
 80099ec:	3fc68a28 	.word	0x3fc68a28
 80099f0:	509f79fb 	.word	0x509f79fb
 80099f4:	3fd34413 	.word	0x3fd34413
 80099f8:	0800b2a5 	.word	0x0800b2a5
 80099fc:	0800b2bc 	.word	0x0800b2bc
 8009a00:	7ff00000 	.word	0x7ff00000
 8009a04:	0800b275 	.word	0x0800b275
 8009a08:	3ff80000 	.word	0x3ff80000
 8009a0c:	0800b3b8 	.word	0x0800b3b8
 8009a10:	0800b314 	.word	0x0800b314
 8009a14:	0800b2a1 	.word	0x0800b2a1
 8009a18:	0800b274 	.word	0x0800b274
 8009a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a20:	6018      	str	r0, [r3, #0]
 8009a22:	9b07      	ldr	r3, [sp, #28]
 8009a24:	2b0e      	cmp	r3, #14
 8009a26:	f200 80a4 	bhi.w	8009b72 <_dtoa_r+0x442>
 8009a2a:	2c00      	cmp	r4, #0
 8009a2c:	f000 80a1 	beq.w	8009b72 <_dtoa_r+0x442>
 8009a30:	2f00      	cmp	r7, #0
 8009a32:	dd33      	ble.n	8009a9c <_dtoa_r+0x36c>
 8009a34:	4bad      	ldr	r3, [pc, #692]	@ (8009cec <_dtoa_r+0x5bc>)
 8009a36:	f007 020f 	and.w	r2, r7, #15
 8009a3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a3e:	ed93 7b00 	vldr	d7, [r3]
 8009a42:	05f8      	lsls	r0, r7, #23
 8009a44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a4c:	d516      	bpl.n	8009a7c <_dtoa_r+0x34c>
 8009a4e:	4ba8      	ldr	r3, [pc, #672]	@ (8009cf0 <_dtoa_r+0x5c0>)
 8009a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a58:	f7f6 ff00 	bl	800085c <__aeabi_ddiv>
 8009a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a60:	f004 040f 	and.w	r4, r4, #15
 8009a64:	2603      	movs	r6, #3
 8009a66:	4da2      	ldr	r5, [pc, #648]	@ (8009cf0 <_dtoa_r+0x5c0>)
 8009a68:	b954      	cbnz	r4, 8009a80 <_dtoa_r+0x350>
 8009a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a72:	f7f6 fef3 	bl	800085c <__aeabi_ddiv>
 8009a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7a:	e028      	b.n	8009ace <_dtoa_r+0x39e>
 8009a7c:	2602      	movs	r6, #2
 8009a7e:	e7f2      	b.n	8009a66 <_dtoa_r+0x336>
 8009a80:	07e1      	lsls	r1, r4, #31
 8009a82:	d508      	bpl.n	8009a96 <_dtoa_r+0x366>
 8009a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a8c:	f7f6 fdbc 	bl	8000608 <__aeabi_dmul>
 8009a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a94:	3601      	adds	r6, #1
 8009a96:	1064      	asrs	r4, r4, #1
 8009a98:	3508      	adds	r5, #8
 8009a9a:	e7e5      	b.n	8009a68 <_dtoa_r+0x338>
 8009a9c:	f000 80d2 	beq.w	8009c44 <_dtoa_r+0x514>
 8009aa0:	427c      	negs	r4, r7
 8009aa2:	4b92      	ldr	r3, [pc, #584]	@ (8009cec <_dtoa_r+0x5bc>)
 8009aa4:	4d92      	ldr	r5, [pc, #584]	@ (8009cf0 <_dtoa_r+0x5c0>)
 8009aa6:	f004 020f 	and.w	r2, r4, #15
 8009aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ab6:	f7f6 fda7 	bl	8000608 <__aeabi_dmul>
 8009aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009abe:	1124      	asrs	r4, r4, #4
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2602      	movs	r6, #2
 8009ac4:	2c00      	cmp	r4, #0
 8009ac6:	f040 80b2 	bne.w	8009c2e <_dtoa_r+0x4fe>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1d3      	bne.n	8009a76 <_dtoa_r+0x346>
 8009ace:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ad0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80b7 	beq.w	8009c48 <_dtoa_r+0x518>
 8009ada:	4b86      	ldr	r3, [pc, #536]	@ (8009cf4 <_dtoa_r+0x5c4>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	4620      	mov	r0, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	f7f7 f803 	bl	8000aec <__aeabi_dcmplt>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f000 80ae 	beq.w	8009c48 <_dtoa_r+0x518>
 8009aec:	9b07      	ldr	r3, [sp, #28]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f000 80aa 	beq.w	8009c48 <_dtoa_r+0x518>
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd37      	ble.n	8009b6a <_dtoa_r+0x43a>
 8009afa:	1e7b      	subs	r3, r7, #1
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	4620      	mov	r0, r4
 8009b00:	4b7d      	ldr	r3, [pc, #500]	@ (8009cf8 <_dtoa_r+0x5c8>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	4629      	mov	r1, r5
 8009b06:	f7f6 fd7f 	bl	8000608 <__aeabi_dmul>
 8009b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b0e:	9c00      	ldr	r4, [sp, #0]
 8009b10:	3601      	adds	r6, #1
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7f6 fd0e 	bl	8000534 <__aeabi_i2d>
 8009b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b1c:	f7f6 fd74 	bl	8000608 <__aeabi_dmul>
 8009b20:	4b76      	ldr	r3, [pc, #472]	@ (8009cfc <_dtoa_r+0x5cc>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	f7f6 fbba 	bl	800029c <__adddf3>
 8009b28:	4605      	mov	r5, r0
 8009b2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	f040 808d 	bne.w	8009c4e <_dtoa_r+0x51e>
 8009b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b38:	4b71      	ldr	r3, [pc, #452]	@ (8009d00 <_dtoa_r+0x5d0>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f7f6 fbac 	bl	8000298 <__aeabi_dsub>
 8009b40:	4602      	mov	r2, r0
 8009b42:	460b      	mov	r3, r1
 8009b44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b48:	462a      	mov	r2, r5
 8009b4a:	4633      	mov	r3, r6
 8009b4c:	f7f6 ffec 	bl	8000b28 <__aeabi_dcmpgt>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	f040 828b 	bne.w	800a06c <_dtoa_r+0x93c>
 8009b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b60:	f7f6 ffc4 	bl	8000aec <__aeabi_dcmplt>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f040 8128 	bne.w	8009dba <_dtoa_r+0x68a>
 8009b6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f2c0 815a 	blt.w	8009e2e <_dtoa_r+0x6fe>
 8009b7a:	2f0e      	cmp	r7, #14
 8009b7c:	f300 8157 	bgt.w	8009e2e <_dtoa_r+0x6fe>
 8009b80:	4b5a      	ldr	r3, [pc, #360]	@ (8009cec <_dtoa_r+0x5bc>)
 8009b82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b86:	ed93 7b00 	vldr	d7, [r3]
 8009b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	ed8d 7b00 	vstr	d7, [sp]
 8009b92:	da03      	bge.n	8009b9c <_dtoa_r+0x46c>
 8009b94:	9b07      	ldr	r3, [sp, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f340 8101 	ble.w	8009d9e <_dtoa_r+0x66e>
 8009b9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ba0:	4656      	mov	r6, sl
 8009ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	4629      	mov	r1, r5
 8009baa:	f7f6 fe57 	bl	800085c <__aeabi_ddiv>
 8009bae:	f7f6 ffdb 	bl	8000b68 <__aeabi_d2iz>
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	f7f6 fcbe 	bl	8000534 <__aeabi_i2d>
 8009bb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bbc:	f7f6 fd24 	bl	8000608 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009bcc:	f7f6 fb64 	bl	8000298 <__aeabi_dsub>
 8009bd0:	f806 4b01 	strb.w	r4, [r6], #1
 8009bd4:	9d07      	ldr	r5, [sp, #28]
 8009bd6:	eba6 040a 	sub.w	r4, r6, sl
 8009bda:	42a5      	cmp	r5, r4
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	f040 8117 	bne.w	8009e12 <_dtoa_r+0x6e2>
 8009be4:	f7f6 fb5a 	bl	800029c <__adddf3>
 8009be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bec:	4604      	mov	r4, r0
 8009bee:	460d      	mov	r5, r1
 8009bf0:	f7f6 ff9a 	bl	8000b28 <__aeabi_dcmpgt>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f040 80f9 	bne.w	8009dec <_dtoa_r+0x6bc>
 8009bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c06:	b118      	cbz	r0, 8009c10 <_dtoa_r+0x4e0>
 8009c08:	f018 0f01 	tst.w	r8, #1
 8009c0c:	f040 80ee 	bne.w	8009dec <_dtoa_r+0x6bc>
 8009c10:	4649      	mov	r1, r9
 8009c12:	4658      	mov	r0, fp
 8009c14:	f000 fbda 	bl	800a3cc <_Bfree>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	7033      	strb	r3, [r6, #0]
 8009c1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c1e:	3701      	adds	r7, #1
 8009c20:	601f      	str	r7, [r3, #0]
 8009c22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 831d 	beq.w	800a264 <_dtoa_r+0xb34>
 8009c2a:	601e      	str	r6, [r3, #0]
 8009c2c:	e31a      	b.n	800a264 <_dtoa_r+0xb34>
 8009c2e:	07e2      	lsls	r2, r4, #31
 8009c30:	d505      	bpl.n	8009c3e <_dtoa_r+0x50e>
 8009c32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c36:	f7f6 fce7 	bl	8000608 <__aeabi_dmul>
 8009c3a:	3601      	adds	r6, #1
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	1064      	asrs	r4, r4, #1
 8009c40:	3508      	adds	r5, #8
 8009c42:	e73f      	b.n	8009ac4 <_dtoa_r+0x394>
 8009c44:	2602      	movs	r6, #2
 8009c46:	e742      	b.n	8009ace <_dtoa_r+0x39e>
 8009c48:	9c07      	ldr	r4, [sp, #28]
 8009c4a:	9704      	str	r7, [sp, #16]
 8009c4c:	e761      	b.n	8009b12 <_dtoa_r+0x3e2>
 8009c4e:	4b27      	ldr	r3, [pc, #156]	@ (8009cec <_dtoa_r+0x5bc>)
 8009c50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c5a:	4454      	add	r4, sl
 8009c5c:	2900      	cmp	r1, #0
 8009c5e:	d053      	beq.n	8009d08 <_dtoa_r+0x5d8>
 8009c60:	4928      	ldr	r1, [pc, #160]	@ (8009d04 <_dtoa_r+0x5d4>)
 8009c62:	2000      	movs	r0, #0
 8009c64:	f7f6 fdfa 	bl	800085c <__aeabi_ddiv>
 8009c68:	4633      	mov	r3, r6
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	f7f6 fb14 	bl	8000298 <__aeabi_dsub>
 8009c70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c74:	4656      	mov	r6, sl
 8009c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c7a:	f7f6 ff75 	bl	8000b68 <__aeabi_d2iz>
 8009c7e:	4605      	mov	r5, r0
 8009c80:	f7f6 fc58 	bl	8000534 <__aeabi_i2d>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c8c:	f7f6 fb04 	bl	8000298 <__aeabi_dsub>
 8009c90:	3530      	adds	r5, #48	@ 0x30
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c9a:	f806 5b01 	strb.w	r5, [r6], #1
 8009c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ca2:	f7f6 ff23 	bl	8000aec <__aeabi_dcmplt>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d171      	bne.n	8009d8e <_dtoa_r+0x65e>
 8009caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cae:	4911      	ldr	r1, [pc, #68]	@ (8009cf4 <_dtoa_r+0x5c4>)
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	f7f6 faf1 	bl	8000298 <__aeabi_dsub>
 8009cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cba:	f7f6 ff17 	bl	8000aec <__aeabi_dcmplt>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f040 8095 	bne.w	8009dee <_dtoa_r+0x6be>
 8009cc4:	42a6      	cmp	r6, r4
 8009cc6:	f43f af50 	beq.w	8009b6a <_dtoa_r+0x43a>
 8009cca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009cce:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <_dtoa_r+0x5c8>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f7f6 fc99 	bl	8000608 <__aeabi_dmul>
 8009cd6:	4b08      	ldr	r3, [pc, #32]	@ (8009cf8 <_dtoa_r+0x5c8>)
 8009cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009cdc:	2200      	movs	r2, #0
 8009cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ce2:	f7f6 fc91 	bl	8000608 <__aeabi_dmul>
 8009ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cea:	e7c4      	b.n	8009c76 <_dtoa_r+0x546>
 8009cec:	0800b3b8 	.word	0x0800b3b8
 8009cf0:	0800b390 	.word	0x0800b390
 8009cf4:	3ff00000 	.word	0x3ff00000
 8009cf8:	40240000 	.word	0x40240000
 8009cfc:	401c0000 	.word	0x401c0000
 8009d00:	40140000 	.word	0x40140000
 8009d04:	3fe00000 	.word	0x3fe00000
 8009d08:	4631      	mov	r1, r6
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f7f6 fc7c 	bl	8000608 <__aeabi_dmul>
 8009d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d14:	9415      	str	r4, [sp, #84]	@ 0x54
 8009d16:	4656      	mov	r6, sl
 8009d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d1c:	f7f6 ff24 	bl	8000b68 <__aeabi_d2iz>
 8009d20:	4605      	mov	r5, r0
 8009d22:	f7f6 fc07 	bl	8000534 <__aeabi_i2d>
 8009d26:	4602      	mov	r2, r0
 8009d28:	460b      	mov	r3, r1
 8009d2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d2e:	f7f6 fab3 	bl	8000298 <__aeabi_dsub>
 8009d32:	3530      	adds	r5, #48	@ 0x30
 8009d34:	f806 5b01 	strb.w	r5, [r6], #1
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	42a6      	cmp	r6, r4
 8009d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d42:	f04f 0200 	mov.w	r2, #0
 8009d46:	d124      	bne.n	8009d92 <_dtoa_r+0x662>
 8009d48:	4bac      	ldr	r3, [pc, #688]	@ (8009ffc <_dtoa_r+0x8cc>)
 8009d4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d4e:	f7f6 faa5 	bl	800029c <__adddf3>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d5a:	f7f6 fee5 	bl	8000b28 <__aeabi_dcmpgt>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	d145      	bne.n	8009dee <_dtoa_r+0x6be>
 8009d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d66:	49a5      	ldr	r1, [pc, #660]	@ (8009ffc <_dtoa_r+0x8cc>)
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f7f6 fa95 	bl	8000298 <__aeabi_dsub>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d76:	f7f6 feb9 	bl	8000aec <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f43f aef5 	beq.w	8009b6a <_dtoa_r+0x43a>
 8009d80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009d82:	1e73      	subs	r3, r6, #1
 8009d84:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d8a:	2b30      	cmp	r3, #48	@ 0x30
 8009d8c:	d0f8      	beq.n	8009d80 <_dtoa_r+0x650>
 8009d8e:	9f04      	ldr	r7, [sp, #16]
 8009d90:	e73e      	b.n	8009c10 <_dtoa_r+0x4e0>
 8009d92:	4b9b      	ldr	r3, [pc, #620]	@ (800a000 <_dtoa_r+0x8d0>)
 8009d94:	f7f6 fc38 	bl	8000608 <__aeabi_dmul>
 8009d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d9c:	e7bc      	b.n	8009d18 <_dtoa_r+0x5e8>
 8009d9e:	d10c      	bne.n	8009dba <_dtoa_r+0x68a>
 8009da0:	4b98      	ldr	r3, [pc, #608]	@ (800a004 <_dtoa_r+0x8d4>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009da8:	f7f6 fc2e 	bl	8000608 <__aeabi_dmul>
 8009dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009db0:	f7f6 feb0 	bl	8000b14 <__aeabi_dcmpge>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f000 8157 	beq.w	800a068 <_dtoa_r+0x938>
 8009dba:	2400      	movs	r4, #0
 8009dbc:	4625      	mov	r5, r4
 8009dbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	4656      	mov	r6, sl
 8009dc6:	2700      	movs	r7, #0
 8009dc8:	4621      	mov	r1, r4
 8009dca:	4658      	mov	r0, fp
 8009dcc:	f000 fafe 	bl	800a3cc <_Bfree>
 8009dd0:	2d00      	cmp	r5, #0
 8009dd2:	d0dc      	beq.n	8009d8e <_dtoa_r+0x65e>
 8009dd4:	b12f      	cbz	r7, 8009de2 <_dtoa_r+0x6b2>
 8009dd6:	42af      	cmp	r7, r5
 8009dd8:	d003      	beq.n	8009de2 <_dtoa_r+0x6b2>
 8009dda:	4639      	mov	r1, r7
 8009ddc:	4658      	mov	r0, fp
 8009dde:	f000 faf5 	bl	800a3cc <_Bfree>
 8009de2:	4629      	mov	r1, r5
 8009de4:	4658      	mov	r0, fp
 8009de6:	f000 faf1 	bl	800a3cc <_Bfree>
 8009dea:	e7d0      	b.n	8009d8e <_dtoa_r+0x65e>
 8009dec:	9704      	str	r7, [sp, #16]
 8009dee:	4633      	mov	r3, r6
 8009df0:	461e      	mov	r6, r3
 8009df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009df6:	2a39      	cmp	r2, #57	@ 0x39
 8009df8:	d107      	bne.n	8009e0a <_dtoa_r+0x6da>
 8009dfa:	459a      	cmp	sl, r3
 8009dfc:	d1f8      	bne.n	8009df0 <_dtoa_r+0x6c0>
 8009dfe:	9a04      	ldr	r2, [sp, #16]
 8009e00:	3201      	adds	r2, #1
 8009e02:	9204      	str	r2, [sp, #16]
 8009e04:	2230      	movs	r2, #48	@ 0x30
 8009e06:	f88a 2000 	strb.w	r2, [sl]
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	3201      	adds	r2, #1
 8009e0e:	701a      	strb	r2, [r3, #0]
 8009e10:	e7bd      	b.n	8009d8e <_dtoa_r+0x65e>
 8009e12:	4b7b      	ldr	r3, [pc, #492]	@ (800a000 <_dtoa_r+0x8d0>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	f7f6 fbf7 	bl	8000608 <__aeabi_dmul>
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	460d      	mov	r5, r1
 8009e22:	f7f6 fe59 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	f43f aebb 	beq.w	8009ba2 <_dtoa_r+0x472>
 8009e2c:	e6f0      	b.n	8009c10 <_dtoa_r+0x4e0>
 8009e2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e30:	2a00      	cmp	r2, #0
 8009e32:	f000 80db 	beq.w	8009fec <_dtoa_r+0x8bc>
 8009e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e38:	2a01      	cmp	r2, #1
 8009e3a:	f300 80bf 	bgt.w	8009fbc <_dtoa_r+0x88c>
 8009e3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	f000 80b7 	beq.w	8009fb4 <_dtoa_r+0x884>
 8009e46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e4c:	4646      	mov	r6, r8
 8009e4e:	9a08      	ldr	r2, [sp, #32]
 8009e50:	2101      	movs	r1, #1
 8009e52:	441a      	add	r2, r3
 8009e54:	4658      	mov	r0, fp
 8009e56:	4498      	add	r8, r3
 8009e58:	9208      	str	r2, [sp, #32]
 8009e5a:	f000 fb6b 	bl	800a534 <__i2b>
 8009e5e:	4605      	mov	r5, r0
 8009e60:	b15e      	cbz	r6, 8009e7a <_dtoa_r+0x74a>
 8009e62:	9b08      	ldr	r3, [sp, #32]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd08      	ble.n	8009e7a <_dtoa_r+0x74a>
 8009e68:	42b3      	cmp	r3, r6
 8009e6a:	9a08      	ldr	r2, [sp, #32]
 8009e6c:	bfa8      	it	ge
 8009e6e:	4633      	movge	r3, r6
 8009e70:	eba8 0803 	sub.w	r8, r8, r3
 8009e74:	1af6      	subs	r6, r6, r3
 8009e76:	1ad3      	subs	r3, r2, r3
 8009e78:	9308      	str	r3, [sp, #32]
 8009e7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e7c:	b1f3      	cbz	r3, 8009ebc <_dtoa_r+0x78c>
 8009e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 80b7 	beq.w	8009ff4 <_dtoa_r+0x8c4>
 8009e86:	b18c      	cbz	r4, 8009eac <_dtoa_r+0x77c>
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	4658      	mov	r0, fp
 8009e8e:	f000 fc11 	bl	800a6b4 <__pow5mult>
 8009e92:	464a      	mov	r2, r9
 8009e94:	4601      	mov	r1, r0
 8009e96:	4605      	mov	r5, r0
 8009e98:	4658      	mov	r0, fp
 8009e9a:	f000 fb61 	bl	800a560 <__multiply>
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	9004      	str	r0, [sp, #16]
 8009ea2:	4658      	mov	r0, fp
 8009ea4:	f000 fa92 	bl	800a3cc <_Bfree>
 8009ea8:	9b04      	ldr	r3, [sp, #16]
 8009eaa:	4699      	mov	r9, r3
 8009eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eae:	1b1a      	subs	r2, r3, r4
 8009eb0:	d004      	beq.n	8009ebc <_dtoa_r+0x78c>
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	f000 fbfd 	bl	800a6b4 <__pow5mult>
 8009eba:	4681      	mov	r9, r0
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 fb38 	bl	800a534 <__i2b>
 8009ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 81cf 	beq.w	800a26c <_dtoa_r+0xb3c>
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4601      	mov	r1, r0
 8009ed2:	4658      	mov	r0, fp
 8009ed4:	f000 fbee 	bl	800a6b4 <__pow5mult>
 8009ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	4604      	mov	r4, r0
 8009ede:	f300 8095 	bgt.w	800a00c <_dtoa_r+0x8dc>
 8009ee2:	9b02      	ldr	r3, [sp, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f040 8087 	bne.w	8009ff8 <_dtoa_r+0x8c8>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f040 8089 	bne.w	800a008 <_dtoa_r+0x8d8>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009efc:	0d1b      	lsrs	r3, r3, #20
 8009efe:	051b      	lsls	r3, r3, #20
 8009f00:	b12b      	cbz	r3, 8009f0e <_dtoa_r+0x7de>
 8009f02:	9b08      	ldr	r3, [sp, #32]
 8009f04:	3301      	adds	r3, #1
 8009f06:	9308      	str	r3, [sp, #32]
 8009f08:	f108 0801 	add.w	r8, r8, #1
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 81b0 	beq.w	800a278 <_dtoa_r+0xb48>
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f1e:	6918      	ldr	r0, [r3, #16]
 8009f20:	f000 fabc 	bl	800a49c <__hi0bits>
 8009f24:	f1c0 0020 	rsb	r0, r0, #32
 8009f28:	9b08      	ldr	r3, [sp, #32]
 8009f2a:	4418      	add	r0, r3
 8009f2c:	f010 001f 	ands.w	r0, r0, #31
 8009f30:	d077      	beq.n	800a022 <_dtoa_r+0x8f2>
 8009f32:	f1c0 0320 	rsb	r3, r0, #32
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	dd6b      	ble.n	800a012 <_dtoa_r+0x8e2>
 8009f3a:	9b08      	ldr	r3, [sp, #32]
 8009f3c:	f1c0 001c 	rsb	r0, r0, #28
 8009f40:	4403      	add	r3, r0
 8009f42:	4480      	add	r8, r0
 8009f44:	4406      	add	r6, r0
 8009f46:	9308      	str	r3, [sp, #32]
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	dd05      	ble.n	8009f5a <_dtoa_r+0x82a>
 8009f4e:	4649      	mov	r1, r9
 8009f50:	4642      	mov	r2, r8
 8009f52:	4658      	mov	r0, fp
 8009f54:	f000 fc08 	bl	800a768 <__lshift>
 8009f58:	4681      	mov	r9, r0
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd05      	ble.n	8009f6c <_dtoa_r+0x83c>
 8009f60:	4621      	mov	r1, r4
 8009f62:	461a      	mov	r2, r3
 8009f64:	4658      	mov	r0, fp
 8009f66:	f000 fbff 	bl	800a768 <__lshift>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d059      	beq.n	800a026 <_dtoa_r+0x8f6>
 8009f72:	4621      	mov	r1, r4
 8009f74:	4648      	mov	r0, r9
 8009f76:	f000 fc63 	bl	800a840 <__mcmp>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	da53      	bge.n	800a026 <_dtoa_r+0x8f6>
 8009f7e:	1e7b      	subs	r3, r7, #1
 8009f80:	9304      	str	r3, [sp, #16]
 8009f82:	4649      	mov	r1, r9
 8009f84:	2300      	movs	r3, #0
 8009f86:	220a      	movs	r2, #10
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f000 fa41 	bl	800a410 <__multadd>
 8009f8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f90:	4681      	mov	r9, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 8172 	beq.w	800a27c <_dtoa_r+0xb4c>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	220a      	movs	r2, #10
 8009f9e:	4658      	mov	r0, fp
 8009fa0:	f000 fa36 	bl	800a410 <__multadd>
 8009fa4:	9b00      	ldr	r3, [sp, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	4605      	mov	r5, r0
 8009faa:	dc67      	bgt.n	800a07c <_dtoa_r+0x94c>
 8009fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	dc41      	bgt.n	800a036 <_dtoa_r+0x906>
 8009fb2:	e063      	b.n	800a07c <_dtoa_r+0x94c>
 8009fb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009fba:	e746      	b.n	8009e4a <_dtoa_r+0x71a>
 8009fbc:	9b07      	ldr	r3, [sp, #28]
 8009fbe:	1e5c      	subs	r4, r3, #1
 8009fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	bfbf      	itttt	lt
 8009fc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009fc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009fca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009fcc:	1ae3      	sublt	r3, r4, r3
 8009fce:	bfb4      	ite	lt
 8009fd0:	18d2      	addlt	r2, r2, r3
 8009fd2:	1b1c      	subge	r4, r3, r4
 8009fd4:	9b07      	ldr	r3, [sp, #28]
 8009fd6:	bfbc      	itt	lt
 8009fd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009fda:	2400      	movlt	r4, #0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	bfb5      	itete	lt
 8009fe0:	eba8 0603 	sublt.w	r6, r8, r3
 8009fe4:	9b07      	ldrge	r3, [sp, #28]
 8009fe6:	2300      	movlt	r3, #0
 8009fe8:	4646      	movge	r6, r8
 8009fea:	e730      	b.n	8009e4e <_dtoa_r+0x71e>
 8009fec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009fee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ff0:	4646      	mov	r6, r8
 8009ff2:	e735      	b.n	8009e60 <_dtoa_r+0x730>
 8009ff4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ff6:	e75c      	b.n	8009eb2 <_dtoa_r+0x782>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	e788      	b.n	8009f0e <_dtoa_r+0x7de>
 8009ffc:	3fe00000 	.word	0x3fe00000
 800a000:	40240000 	.word	0x40240000
 800a004:	40140000 	.word	0x40140000
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	e780      	b.n	8009f0e <_dtoa_r+0x7de>
 800a00c:	2300      	movs	r3, #0
 800a00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a010:	e782      	b.n	8009f18 <_dtoa_r+0x7e8>
 800a012:	d099      	beq.n	8009f48 <_dtoa_r+0x818>
 800a014:	9a08      	ldr	r2, [sp, #32]
 800a016:	331c      	adds	r3, #28
 800a018:	441a      	add	r2, r3
 800a01a:	4498      	add	r8, r3
 800a01c:	441e      	add	r6, r3
 800a01e:	9208      	str	r2, [sp, #32]
 800a020:	e792      	b.n	8009f48 <_dtoa_r+0x818>
 800a022:	4603      	mov	r3, r0
 800a024:	e7f6      	b.n	800a014 <_dtoa_r+0x8e4>
 800a026:	9b07      	ldr	r3, [sp, #28]
 800a028:	9704      	str	r7, [sp, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	dc20      	bgt.n	800a070 <_dtoa_r+0x940>
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a032:	2b02      	cmp	r3, #2
 800a034:	dd1e      	ble.n	800a074 <_dtoa_r+0x944>
 800a036:	9b00      	ldr	r3, [sp, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f47f aec0 	bne.w	8009dbe <_dtoa_r+0x68e>
 800a03e:	4621      	mov	r1, r4
 800a040:	2205      	movs	r2, #5
 800a042:	4658      	mov	r0, fp
 800a044:	f000 f9e4 	bl	800a410 <__multadd>
 800a048:	4601      	mov	r1, r0
 800a04a:	4604      	mov	r4, r0
 800a04c:	4648      	mov	r0, r9
 800a04e:	f000 fbf7 	bl	800a840 <__mcmp>
 800a052:	2800      	cmp	r0, #0
 800a054:	f77f aeb3 	ble.w	8009dbe <_dtoa_r+0x68e>
 800a058:	4656      	mov	r6, sl
 800a05a:	2331      	movs	r3, #49	@ 0x31
 800a05c:	f806 3b01 	strb.w	r3, [r6], #1
 800a060:	9b04      	ldr	r3, [sp, #16]
 800a062:	3301      	adds	r3, #1
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	e6ae      	b.n	8009dc6 <_dtoa_r+0x696>
 800a068:	9c07      	ldr	r4, [sp, #28]
 800a06a:	9704      	str	r7, [sp, #16]
 800a06c:	4625      	mov	r5, r4
 800a06e:	e7f3      	b.n	800a058 <_dtoa_r+0x928>
 800a070:	9b07      	ldr	r3, [sp, #28]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 8104 	beq.w	800a284 <_dtoa_r+0xb54>
 800a07c:	2e00      	cmp	r6, #0
 800a07e:	dd05      	ble.n	800a08c <_dtoa_r+0x95c>
 800a080:	4629      	mov	r1, r5
 800a082:	4632      	mov	r2, r6
 800a084:	4658      	mov	r0, fp
 800a086:	f000 fb6f 	bl	800a768 <__lshift>
 800a08a:	4605      	mov	r5, r0
 800a08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d05a      	beq.n	800a148 <_dtoa_r+0xa18>
 800a092:	6869      	ldr	r1, [r5, #4]
 800a094:	4658      	mov	r0, fp
 800a096:	f000 f959 	bl	800a34c <_Balloc>
 800a09a:	4606      	mov	r6, r0
 800a09c:	b928      	cbnz	r0, 800a0aa <_dtoa_r+0x97a>
 800a09e:	4b84      	ldr	r3, [pc, #528]	@ (800a2b0 <_dtoa_r+0xb80>)
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a0a6:	f7ff bb5a 	b.w	800975e <_dtoa_r+0x2e>
 800a0aa:	692a      	ldr	r2, [r5, #16]
 800a0ac:	3202      	adds	r2, #2
 800a0ae:	0092      	lsls	r2, r2, #2
 800a0b0:	f105 010c 	add.w	r1, r5, #12
 800a0b4:	300c      	adds	r0, #12
 800a0b6:	f7ff faa4 	bl	8009602 <memcpy>
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4658      	mov	r0, fp
 800a0c0:	f000 fb52 	bl	800a768 <__lshift>
 800a0c4:	f10a 0301 	add.w	r3, sl, #1
 800a0c8:	9307      	str	r3, [sp, #28]
 800a0ca:	9b00      	ldr	r3, [sp, #0]
 800a0cc:	4453      	add	r3, sl
 800a0ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0d0:	9b02      	ldr	r3, [sp, #8]
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	462f      	mov	r7, r5
 800a0d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0da:	4605      	mov	r5, r0
 800a0dc:	9b07      	ldr	r3, [sp, #28]
 800a0de:	4621      	mov	r1, r4
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4648      	mov	r0, r9
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	f7ff fa9a 	bl	800961e <quorem>
 800a0ea:	4639      	mov	r1, r7
 800a0ec:	9002      	str	r0, [sp, #8]
 800a0ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0f2:	4648      	mov	r0, r9
 800a0f4:	f000 fba4 	bl	800a840 <__mcmp>
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	9008      	str	r0, [sp, #32]
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4658      	mov	r0, fp
 800a100:	f000 fbba 	bl	800a878 <__mdiff>
 800a104:	68c2      	ldr	r2, [r0, #12]
 800a106:	4606      	mov	r6, r0
 800a108:	bb02      	cbnz	r2, 800a14c <_dtoa_r+0xa1c>
 800a10a:	4601      	mov	r1, r0
 800a10c:	4648      	mov	r0, r9
 800a10e:	f000 fb97 	bl	800a840 <__mcmp>
 800a112:	4602      	mov	r2, r0
 800a114:	4631      	mov	r1, r6
 800a116:	4658      	mov	r0, fp
 800a118:	920e      	str	r2, [sp, #56]	@ 0x38
 800a11a:	f000 f957 	bl	800a3cc <_Bfree>
 800a11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a120:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a122:	9e07      	ldr	r6, [sp, #28]
 800a124:	ea43 0102 	orr.w	r1, r3, r2
 800a128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a12a:	4319      	orrs	r1, r3
 800a12c:	d110      	bne.n	800a150 <_dtoa_r+0xa20>
 800a12e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a132:	d029      	beq.n	800a188 <_dtoa_r+0xa58>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	dd02      	ble.n	800a140 <_dtoa_r+0xa10>
 800a13a:	9b02      	ldr	r3, [sp, #8]
 800a13c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a140:	9b00      	ldr	r3, [sp, #0]
 800a142:	f883 8000 	strb.w	r8, [r3]
 800a146:	e63f      	b.n	8009dc8 <_dtoa_r+0x698>
 800a148:	4628      	mov	r0, r5
 800a14a:	e7bb      	b.n	800a0c4 <_dtoa_r+0x994>
 800a14c:	2201      	movs	r2, #1
 800a14e:	e7e1      	b.n	800a114 <_dtoa_r+0x9e4>
 800a150:	9b08      	ldr	r3, [sp, #32]
 800a152:	2b00      	cmp	r3, #0
 800a154:	db04      	blt.n	800a160 <_dtoa_r+0xa30>
 800a156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a158:	430b      	orrs	r3, r1
 800a15a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a15c:	430b      	orrs	r3, r1
 800a15e:	d120      	bne.n	800a1a2 <_dtoa_r+0xa72>
 800a160:	2a00      	cmp	r2, #0
 800a162:	dded      	ble.n	800a140 <_dtoa_r+0xa10>
 800a164:	4649      	mov	r1, r9
 800a166:	2201      	movs	r2, #1
 800a168:	4658      	mov	r0, fp
 800a16a:	f000 fafd 	bl	800a768 <__lshift>
 800a16e:	4621      	mov	r1, r4
 800a170:	4681      	mov	r9, r0
 800a172:	f000 fb65 	bl	800a840 <__mcmp>
 800a176:	2800      	cmp	r0, #0
 800a178:	dc03      	bgt.n	800a182 <_dtoa_r+0xa52>
 800a17a:	d1e1      	bne.n	800a140 <_dtoa_r+0xa10>
 800a17c:	f018 0f01 	tst.w	r8, #1
 800a180:	d0de      	beq.n	800a140 <_dtoa_r+0xa10>
 800a182:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a186:	d1d8      	bne.n	800a13a <_dtoa_r+0xa0a>
 800a188:	9a00      	ldr	r2, [sp, #0]
 800a18a:	2339      	movs	r3, #57	@ 0x39
 800a18c:	7013      	strb	r3, [r2, #0]
 800a18e:	4633      	mov	r3, r6
 800a190:	461e      	mov	r6, r3
 800a192:	3b01      	subs	r3, #1
 800a194:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a198:	2a39      	cmp	r2, #57	@ 0x39
 800a19a:	d052      	beq.n	800a242 <_dtoa_r+0xb12>
 800a19c:	3201      	adds	r2, #1
 800a19e:	701a      	strb	r2, [r3, #0]
 800a1a0:	e612      	b.n	8009dc8 <_dtoa_r+0x698>
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	dd07      	ble.n	800a1b6 <_dtoa_r+0xa86>
 800a1a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1aa:	d0ed      	beq.n	800a188 <_dtoa_r+0xa58>
 800a1ac:	9a00      	ldr	r2, [sp, #0]
 800a1ae:	f108 0301 	add.w	r3, r8, #1
 800a1b2:	7013      	strb	r3, [r2, #0]
 800a1b4:	e608      	b.n	8009dc8 <_dtoa_r+0x698>
 800a1b6:	9b07      	ldr	r3, [sp, #28]
 800a1b8:	9a07      	ldr	r2, [sp, #28]
 800a1ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a1be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d028      	beq.n	800a216 <_dtoa_r+0xae6>
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	220a      	movs	r2, #10
 800a1ca:	4658      	mov	r0, fp
 800a1cc:	f000 f920 	bl	800a410 <__multadd>
 800a1d0:	42af      	cmp	r7, r5
 800a1d2:	4681      	mov	r9, r0
 800a1d4:	f04f 0300 	mov.w	r3, #0
 800a1d8:	f04f 020a 	mov.w	r2, #10
 800a1dc:	4639      	mov	r1, r7
 800a1de:	4658      	mov	r0, fp
 800a1e0:	d107      	bne.n	800a1f2 <_dtoa_r+0xac2>
 800a1e2:	f000 f915 	bl	800a410 <__multadd>
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	4605      	mov	r5, r0
 800a1ea:	9b07      	ldr	r3, [sp, #28]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	9307      	str	r3, [sp, #28]
 800a1f0:	e774      	b.n	800a0dc <_dtoa_r+0x9ac>
 800a1f2:	f000 f90d 	bl	800a410 <__multadd>
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4607      	mov	r7, r0
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	4658      	mov	r0, fp
 800a200:	f000 f906 	bl	800a410 <__multadd>
 800a204:	4605      	mov	r5, r0
 800a206:	e7f0      	b.n	800a1ea <_dtoa_r+0xaba>
 800a208:	9b00      	ldr	r3, [sp, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	bfcc      	ite	gt
 800a20e:	461e      	movgt	r6, r3
 800a210:	2601      	movle	r6, #1
 800a212:	4456      	add	r6, sl
 800a214:	2700      	movs	r7, #0
 800a216:	4649      	mov	r1, r9
 800a218:	2201      	movs	r2, #1
 800a21a:	4658      	mov	r0, fp
 800a21c:	f000 faa4 	bl	800a768 <__lshift>
 800a220:	4621      	mov	r1, r4
 800a222:	4681      	mov	r9, r0
 800a224:	f000 fb0c 	bl	800a840 <__mcmp>
 800a228:	2800      	cmp	r0, #0
 800a22a:	dcb0      	bgt.n	800a18e <_dtoa_r+0xa5e>
 800a22c:	d102      	bne.n	800a234 <_dtoa_r+0xb04>
 800a22e:	f018 0f01 	tst.w	r8, #1
 800a232:	d1ac      	bne.n	800a18e <_dtoa_r+0xa5e>
 800a234:	4633      	mov	r3, r6
 800a236:	461e      	mov	r6, r3
 800a238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a23c:	2a30      	cmp	r2, #48	@ 0x30
 800a23e:	d0fa      	beq.n	800a236 <_dtoa_r+0xb06>
 800a240:	e5c2      	b.n	8009dc8 <_dtoa_r+0x698>
 800a242:	459a      	cmp	sl, r3
 800a244:	d1a4      	bne.n	800a190 <_dtoa_r+0xa60>
 800a246:	9b04      	ldr	r3, [sp, #16]
 800a248:	3301      	adds	r3, #1
 800a24a:	9304      	str	r3, [sp, #16]
 800a24c:	2331      	movs	r3, #49	@ 0x31
 800a24e:	f88a 3000 	strb.w	r3, [sl]
 800a252:	e5b9      	b.n	8009dc8 <_dtoa_r+0x698>
 800a254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a256:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a2b4 <_dtoa_r+0xb84>
 800a25a:	b11b      	cbz	r3, 800a264 <_dtoa_r+0xb34>
 800a25c:	f10a 0308 	add.w	r3, sl, #8
 800a260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a262:	6013      	str	r3, [r2, #0]
 800a264:	4650      	mov	r0, sl
 800a266:	b019      	add	sp, #100	@ 0x64
 800a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a26e:	2b01      	cmp	r3, #1
 800a270:	f77f ae37 	ble.w	8009ee2 <_dtoa_r+0x7b2>
 800a274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a276:	930a      	str	r3, [sp, #40]	@ 0x28
 800a278:	2001      	movs	r0, #1
 800a27a:	e655      	b.n	8009f28 <_dtoa_r+0x7f8>
 800a27c:	9b00      	ldr	r3, [sp, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f77f aed6 	ble.w	800a030 <_dtoa_r+0x900>
 800a284:	4656      	mov	r6, sl
 800a286:	4621      	mov	r1, r4
 800a288:	4648      	mov	r0, r9
 800a28a:	f7ff f9c8 	bl	800961e <quorem>
 800a28e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a292:	f806 8b01 	strb.w	r8, [r6], #1
 800a296:	9b00      	ldr	r3, [sp, #0]
 800a298:	eba6 020a 	sub.w	r2, r6, sl
 800a29c:	4293      	cmp	r3, r2
 800a29e:	ddb3      	ble.n	800a208 <_dtoa_r+0xad8>
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	f000 f8b2 	bl	800a410 <__multadd>
 800a2ac:	4681      	mov	r9, r0
 800a2ae:	e7ea      	b.n	800a286 <_dtoa_r+0xb56>
 800a2b0:	0800b314 	.word	0x0800b314
 800a2b4:	0800b298 	.word	0x0800b298

0800a2b8 <_free_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	d041      	beq.n	800a344 <_free_r+0x8c>
 800a2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c4:	1f0c      	subs	r4, r1, #4
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	bfb8      	it	lt
 800a2ca:	18e4      	addlt	r4, r4, r3
 800a2cc:	f7fe fba0 	bl	8008a10 <__malloc_lock>
 800a2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a348 <_free_r+0x90>)
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	b933      	cbnz	r3, 800a2e4 <_free_r+0x2c>
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	6014      	str	r4, [r2, #0]
 800a2da:	4628      	mov	r0, r5
 800a2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e0:	f7fe bb9c 	b.w	8008a1c <__malloc_unlock>
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	d908      	bls.n	800a2fa <_free_r+0x42>
 800a2e8:	6820      	ldr	r0, [r4, #0]
 800a2ea:	1821      	adds	r1, r4, r0
 800a2ec:	428b      	cmp	r3, r1
 800a2ee:	bf01      	itttt	eq
 800a2f0:	6819      	ldreq	r1, [r3, #0]
 800a2f2:	685b      	ldreq	r3, [r3, #4]
 800a2f4:	1809      	addeq	r1, r1, r0
 800a2f6:	6021      	streq	r1, [r4, #0]
 800a2f8:	e7ed      	b.n	800a2d6 <_free_r+0x1e>
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	b10b      	cbz	r3, 800a304 <_free_r+0x4c>
 800a300:	42a3      	cmp	r3, r4
 800a302:	d9fa      	bls.n	800a2fa <_free_r+0x42>
 800a304:	6811      	ldr	r1, [r2, #0]
 800a306:	1850      	adds	r0, r2, r1
 800a308:	42a0      	cmp	r0, r4
 800a30a:	d10b      	bne.n	800a324 <_free_r+0x6c>
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	4401      	add	r1, r0
 800a310:	1850      	adds	r0, r2, r1
 800a312:	4283      	cmp	r3, r0
 800a314:	6011      	str	r1, [r2, #0]
 800a316:	d1e0      	bne.n	800a2da <_free_r+0x22>
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	6053      	str	r3, [r2, #4]
 800a31e:	4408      	add	r0, r1
 800a320:	6010      	str	r0, [r2, #0]
 800a322:	e7da      	b.n	800a2da <_free_r+0x22>
 800a324:	d902      	bls.n	800a32c <_free_r+0x74>
 800a326:	230c      	movs	r3, #12
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	e7d6      	b.n	800a2da <_free_r+0x22>
 800a32c:	6820      	ldr	r0, [r4, #0]
 800a32e:	1821      	adds	r1, r4, r0
 800a330:	428b      	cmp	r3, r1
 800a332:	bf04      	itt	eq
 800a334:	6819      	ldreq	r1, [r3, #0]
 800a336:	685b      	ldreq	r3, [r3, #4]
 800a338:	6063      	str	r3, [r4, #4]
 800a33a:	bf04      	itt	eq
 800a33c:	1809      	addeq	r1, r1, r0
 800a33e:	6021      	streq	r1, [r4, #0]
 800a340:	6054      	str	r4, [r2, #4]
 800a342:	e7ca      	b.n	800a2da <_free_r+0x22>
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	20001f38 	.word	0x20001f38

0800a34c <_Balloc>:
 800a34c:	b570      	push	{r4, r5, r6, lr}
 800a34e:	69c6      	ldr	r6, [r0, #28]
 800a350:	4604      	mov	r4, r0
 800a352:	460d      	mov	r5, r1
 800a354:	b976      	cbnz	r6, 800a374 <_Balloc+0x28>
 800a356:	2010      	movs	r0, #16
 800a358:	f7fe faa8 	bl	80088ac <malloc>
 800a35c:	4602      	mov	r2, r0
 800a35e:	61e0      	str	r0, [r4, #28]
 800a360:	b920      	cbnz	r0, 800a36c <_Balloc+0x20>
 800a362:	4b18      	ldr	r3, [pc, #96]	@ (800a3c4 <_Balloc+0x78>)
 800a364:	4818      	ldr	r0, [pc, #96]	@ (800a3c8 <_Balloc+0x7c>)
 800a366:	216b      	movs	r1, #107	@ 0x6b
 800a368:	f000 fc1e 	bl	800aba8 <__assert_func>
 800a36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a370:	6006      	str	r6, [r0, #0]
 800a372:	60c6      	str	r6, [r0, #12]
 800a374:	69e6      	ldr	r6, [r4, #28]
 800a376:	68f3      	ldr	r3, [r6, #12]
 800a378:	b183      	cbz	r3, 800a39c <_Balloc+0x50>
 800a37a:	69e3      	ldr	r3, [r4, #28]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a382:	b9b8      	cbnz	r0, 800a3b4 <_Balloc+0x68>
 800a384:	2101      	movs	r1, #1
 800a386:	fa01 f605 	lsl.w	r6, r1, r5
 800a38a:	1d72      	adds	r2, r6, #5
 800a38c:	0092      	lsls	r2, r2, #2
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 fc28 	bl	800abe4 <_calloc_r>
 800a394:	b160      	cbz	r0, 800a3b0 <_Balloc+0x64>
 800a396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a39a:	e00e      	b.n	800a3ba <_Balloc+0x6e>
 800a39c:	2221      	movs	r2, #33	@ 0x21
 800a39e:	2104      	movs	r1, #4
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 fc1f 	bl	800abe4 <_calloc_r>
 800a3a6:	69e3      	ldr	r3, [r4, #28]
 800a3a8:	60f0      	str	r0, [r6, #12]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e4      	bne.n	800a37a <_Balloc+0x2e>
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	6802      	ldr	r2, [r0, #0]
 800a3b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3c0:	e7f7      	b.n	800a3b2 <_Balloc+0x66>
 800a3c2:	bf00      	nop
 800a3c4:	0800b2a5 	.word	0x0800b2a5
 800a3c8:	0800b325 	.word	0x0800b325

0800a3cc <_Bfree>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	69c6      	ldr	r6, [r0, #28]
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	b976      	cbnz	r6, 800a3f4 <_Bfree+0x28>
 800a3d6:	2010      	movs	r0, #16
 800a3d8:	f7fe fa68 	bl	80088ac <malloc>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	61e8      	str	r0, [r5, #28]
 800a3e0:	b920      	cbnz	r0, 800a3ec <_Bfree+0x20>
 800a3e2:	4b09      	ldr	r3, [pc, #36]	@ (800a408 <_Bfree+0x3c>)
 800a3e4:	4809      	ldr	r0, [pc, #36]	@ (800a40c <_Bfree+0x40>)
 800a3e6:	218f      	movs	r1, #143	@ 0x8f
 800a3e8:	f000 fbde 	bl	800aba8 <__assert_func>
 800a3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f0:	6006      	str	r6, [r0, #0]
 800a3f2:	60c6      	str	r6, [r0, #12]
 800a3f4:	b13c      	cbz	r4, 800a406 <_Bfree+0x3a>
 800a3f6:	69eb      	ldr	r3, [r5, #28]
 800a3f8:	6862      	ldr	r2, [r4, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a400:	6021      	str	r1, [r4, #0]
 800a402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	0800b2a5 	.word	0x0800b2a5
 800a40c:	0800b325 	.word	0x0800b325

0800a410 <__multadd>:
 800a410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a414:	690d      	ldr	r5, [r1, #16]
 800a416:	4607      	mov	r7, r0
 800a418:	460c      	mov	r4, r1
 800a41a:	461e      	mov	r6, r3
 800a41c:	f101 0c14 	add.w	ip, r1, #20
 800a420:	2000      	movs	r0, #0
 800a422:	f8dc 3000 	ldr.w	r3, [ip]
 800a426:	b299      	uxth	r1, r3
 800a428:	fb02 6101 	mla	r1, r2, r1, r6
 800a42c:	0c1e      	lsrs	r6, r3, #16
 800a42e:	0c0b      	lsrs	r3, r1, #16
 800a430:	fb02 3306 	mla	r3, r2, r6, r3
 800a434:	b289      	uxth	r1, r1
 800a436:	3001      	adds	r0, #1
 800a438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a43c:	4285      	cmp	r5, r0
 800a43e:	f84c 1b04 	str.w	r1, [ip], #4
 800a442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a446:	dcec      	bgt.n	800a422 <__multadd+0x12>
 800a448:	b30e      	cbz	r6, 800a48e <__multadd+0x7e>
 800a44a:	68a3      	ldr	r3, [r4, #8]
 800a44c:	42ab      	cmp	r3, r5
 800a44e:	dc19      	bgt.n	800a484 <__multadd+0x74>
 800a450:	6861      	ldr	r1, [r4, #4]
 800a452:	4638      	mov	r0, r7
 800a454:	3101      	adds	r1, #1
 800a456:	f7ff ff79 	bl	800a34c <_Balloc>
 800a45a:	4680      	mov	r8, r0
 800a45c:	b928      	cbnz	r0, 800a46a <__multadd+0x5a>
 800a45e:	4602      	mov	r2, r0
 800a460:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <__multadd+0x84>)
 800a462:	480d      	ldr	r0, [pc, #52]	@ (800a498 <__multadd+0x88>)
 800a464:	21ba      	movs	r1, #186	@ 0xba
 800a466:	f000 fb9f 	bl	800aba8 <__assert_func>
 800a46a:	6922      	ldr	r2, [r4, #16]
 800a46c:	3202      	adds	r2, #2
 800a46e:	f104 010c 	add.w	r1, r4, #12
 800a472:	0092      	lsls	r2, r2, #2
 800a474:	300c      	adds	r0, #12
 800a476:	f7ff f8c4 	bl	8009602 <memcpy>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4638      	mov	r0, r7
 800a47e:	f7ff ffa5 	bl	800a3cc <_Bfree>
 800a482:	4644      	mov	r4, r8
 800a484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a488:	3501      	adds	r5, #1
 800a48a:	615e      	str	r6, [r3, #20]
 800a48c:	6125      	str	r5, [r4, #16]
 800a48e:	4620      	mov	r0, r4
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	0800b314 	.word	0x0800b314
 800a498:	0800b325 	.word	0x0800b325

0800a49c <__hi0bits>:
 800a49c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	bf36      	itet	cc
 800a4a4:	0403      	lslcc	r3, r0, #16
 800a4a6:	2000      	movcs	r0, #0
 800a4a8:	2010      	movcc	r0, #16
 800a4aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4ae:	bf3c      	itt	cc
 800a4b0:	021b      	lslcc	r3, r3, #8
 800a4b2:	3008      	addcc	r0, #8
 800a4b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4b8:	bf3c      	itt	cc
 800a4ba:	011b      	lslcc	r3, r3, #4
 800a4bc:	3004      	addcc	r0, #4
 800a4be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4c2:	bf3c      	itt	cc
 800a4c4:	009b      	lslcc	r3, r3, #2
 800a4c6:	3002      	addcc	r0, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	db05      	blt.n	800a4d8 <__hi0bits+0x3c>
 800a4cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a4d0:	f100 0001 	add.w	r0, r0, #1
 800a4d4:	bf08      	it	eq
 800a4d6:	2020      	moveq	r0, #32
 800a4d8:	4770      	bx	lr

0800a4da <__lo0bits>:
 800a4da:	6803      	ldr	r3, [r0, #0]
 800a4dc:	4602      	mov	r2, r0
 800a4de:	f013 0007 	ands.w	r0, r3, #7
 800a4e2:	d00b      	beq.n	800a4fc <__lo0bits+0x22>
 800a4e4:	07d9      	lsls	r1, r3, #31
 800a4e6:	d421      	bmi.n	800a52c <__lo0bits+0x52>
 800a4e8:	0798      	lsls	r0, r3, #30
 800a4ea:	bf49      	itett	mi
 800a4ec:	085b      	lsrmi	r3, r3, #1
 800a4ee:	089b      	lsrpl	r3, r3, #2
 800a4f0:	2001      	movmi	r0, #1
 800a4f2:	6013      	strmi	r3, [r2, #0]
 800a4f4:	bf5c      	itt	pl
 800a4f6:	6013      	strpl	r3, [r2, #0]
 800a4f8:	2002      	movpl	r0, #2
 800a4fa:	4770      	bx	lr
 800a4fc:	b299      	uxth	r1, r3
 800a4fe:	b909      	cbnz	r1, 800a504 <__lo0bits+0x2a>
 800a500:	0c1b      	lsrs	r3, r3, #16
 800a502:	2010      	movs	r0, #16
 800a504:	b2d9      	uxtb	r1, r3
 800a506:	b909      	cbnz	r1, 800a50c <__lo0bits+0x32>
 800a508:	3008      	adds	r0, #8
 800a50a:	0a1b      	lsrs	r3, r3, #8
 800a50c:	0719      	lsls	r1, r3, #28
 800a50e:	bf04      	itt	eq
 800a510:	091b      	lsreq	r3, r3, #4
 800a512:	3004      	addeq	r0, #4
 800a514:	0799      	lsls	r1, r3, #30
 800a516:	bf04      	itt	eq
 800a518:	089b      	lsreq	r3, r3, #2
 800a51a:	3002      	addeq	r0, #2
 800a51c:	07d9      	lsls	r1, r3, #31
 800a51e:	d403      	bmi.n	800a528 <__lo0bits+0x4e>
 800a520:	085b      	lsrs	r3, r3, #1
 800a522:	f100 0001 	add.w	r0, r0, #1
 800a526:	d003      	beq.n	800a530 <__lo0bits+0x56>
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	4770      	bx	lr
 800a52c:	2000      	movs	r0, #0
 800a52e:	4770      	bx	lr
 800a530:	2020      	movs	r0, #32
 800a532:	4770      	bx	lr

0800a534 <__i2b>:
 800a534:	b510      	push	{r4, lr}
 800a536:	460c      	mov	r4, r1
 800a538:	2101      	movs	r1, #1
 800a53a:	f7ff ff07 	bl	800a34c <_Balloc>
 800a53e:	4602      	mov	r2, r0
 800a540:	b928      	cbnz	r0, 800a54e <__i2b+0x1a>
 800a542:	4b05      	ldr	r3, [pc, #20]	@ (800a558 <__i2b+0x24>)
 800a544:	4805      	ldr	r0, [pc, #20]	@ (800a55c <__i2b+0x28>)
 800a546:	f240 1145 	movw	r1, #325	@ 0x145
 800a54a:	f000 fb2d 	bl	800aba8 <__assert_func>
 800a54e:	2301      	movs	r3, #1
 800a550:	6144      	str	r4, [r0, #20]
 800a552:	6103      	str	r3, [r0, #16]
 800a554:	bd10      	pop	{r4, pc}
 800a556:	bf00      	nop
 800a558:	0800b314 	.word	0x0800b314
 800a55c:	0800b325 	.word	0x0800b325

0800a560 <__multiply>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	4614      	mov	r4, r2
 800a566:	690a      	ldr	r2, [r1, #16]
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	bfa8      	it	ge
 800a56e:	4623      	movge	r3, r4
 800a570:	460f      	mov	r7, r1
 800a572:	bfa4      	itt	ge
 800a574:	460c      	movge	r4, r1
 800a576:	461f      	movge	r7, r3
 800a578:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a57c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a580:	68a3      	ldr	r3, [r4, #8]
 800a582:	6861      	ldr	r1, [r4, #4]
 800a584:	eb0a 0609 	add.w	r6, sl, r9
 800a588:	42b3      	cmp	r3, r6
 800a58a:	b085      	sub	sp, #20
 800a58c:	bfb8      	it	lt
 800a58e:	3101      	addlt	r1, #1
 800a590:	f7ff fedc 	bl	800a34c <_Balloc>
 800a594:	b930      	cbnz	r0, 800a5a4 <__multiply+0x44>
 800a596:	4602      	mov	r2, r0
 800a598:	4b44      	ldr	r3, [pc, #272]	@ (800a6ac <__multiply+0x14c>)
 800a59a:	4845      	ldr	r0, [pc, #276]	@ (800a6b0 <__multiply+0x150>)
 800a59c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5a0:	f000 fb02 	bl	800aba8 <__assert_func>
 800a5a4:	f100 0514 	add.w	r5, r0, #20
 800a5a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5ac:	462b      	mov	r3, r5
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	4543      	cmp	r3, r8
 800a5b2:	d321      	bcc.n	800a5f8 <__multiply+0x98>
 800a5b4:	f107 0114 	add.w	r1, r7, #20
 800a5b8:	f104 0214 	add.w	r2, r4, #20
 800a5bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a5c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a5c4:	9302      	str	r3, [sp, #8]
 800a5c6:	1b13      	subs	r3, r2, r4
 800a5c8:	3b15      	subs	r3, #21
 800a5ca:	f023 0303 	bic.w	r3, r3, #3
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	f104 0715 	add.w	r7, r4, #21
 800a5d4:	42ba      	cmp	r2, r7
 800a5d6:	bf38      	it	cc
 800a5d8:	2304      	movcc	r3, #4
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	9b02      	ldr	r3, [sp, #8]
 800a5de:	9103      	str	r1, [sp, #12]
 800a5e0:	428b      	cmp	r3, r1
 800a5e2:	d80c      	bhi.n	800a5fe <__multiply+0x9e>
 800a5e4:	2e00      	cmp	r6, #0
 800a5e6:	dd03      	ble.n	800a5f0 <__multiply+0x90>
 800a5e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d05b      	beq.n	800a6a8 <__multiply+0x148>
 800a5f0:	6106      	str	r6, [r0, #16]
 800a5f2:	b005      	add	sp, #20
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f8:	f843 2b04 	str.w	r2, [r3], #4
 800a5fc:	e7d8      	b.n	800a5b0 <__multiply+0x50>
 800a5fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800a602:	f1ba 0f00 	cmp.w	sl, #0
 800a606:	d024      	beq.n	800a652 <__multiply+0xf2>
 800a608:	f104 0e14 	add.w	lr, r4, #20
 800a60c:	46a9      	mov	r9, r5
 800a60e:	f04f 0c00 	mov.w	ip, #0
 800a612:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a616:	f8d9 3000 	ldr.w	r3, [r9]
 800a61a:	fa1f fb87 	uxth.w	fp, r7
 800a61e:	b29b      	uxth	r3, r3
 800a620:	fb0a 330b 	mla	r3, sl, fp, r3
 800a624:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a628:	f8d9 7000 	ldr.w	r7, [r9]
 800a62c:	4463      	add	r3, ip
 800a62e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a632:	fb0a c70b 	mla	r7, sl, fp, ip
 800a636:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a640:	4572      	cmp	r2, lr
 800a642:	f849 3b04 	str.w	r3, [r9], #4
 800a646:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a64a:	d8e2      	bhi.n	800a612 <__multiply+0xb2>
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	f845 c003 	str.w	ip, [r5, r3]
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a658:	3104      	adds	r1, #4
 800a65a:	f1b9 0f00 	cmp.w	r9, #0
 800a65e:	d021      	beq.n	800a6a4 <__multiply+0x144>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	f104 0c14 	add.w	ip, r4, #20
 800a666:	46ae      	mov	lr, r5
 800a668:	f04f 0a00 	mov.w	sl, #0
 800a66c:	f8bc b000 	ldrh.w	fp, [ip]
 800a670:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a674:	fb09 770b 	mla	r7, r9, fp, r7
 800a678:	4457      	add	r7, sl
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a680:	f84e 3b04 	str.w	r3, [lr], #4
 800a684:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a688:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a68c:	f8be 3000 	ldrh.w	r3, [lr]
 800a690:	fb09 330a 	mla	r3, r9, sl, r3
 800a694:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a698:	4562      	cmp	r2, ip
 800a69a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a69e:	d8e5      	bhi.n	800a66c <__multiply+0x10c>
 800a6a0:	9f01      	ldr	r7, [sp, #4]
 800a6a2:	51eb      	str	r3, [r5, r7]
 800a6a4:	3504      	adds	r5, #4
 800a6a6:	e799      	b.n	800a5dc <__multiply+0x7c>
 800a6a8:	3e01      	subs	r6, #1
 800a6aa:	e79b      	b.n	800a5e4 <__multiply+0x84>
 800a6ac:	0800b314 	.word	0x0800b314
 800a6b0:	0800b325 	.word	0x0800b325

0800a6b4 <__pow5mult>:
 800a6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	f012 0203 	ands.w	r2, r2, #3
 800a6be:	4607      	mov	r7, r0
 800a6c0:	460e      	mov	r6, r1
 800a6c2:	d007      	beq.n	800a6d4 <__pow5mult+0x20>
 800a6c4:	4c25      	ldr	r4, [pc, #148]	@ (800a75c <__pow5mult+0xa8>)
 800a6c6:	3a01      	subs	r2, #1
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6ce:	f7ff fe9f 	bl	800a410 <__multadd>
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	10ad      	asrs	r5, r5, #2
 800a6d6:	d03d      	beq.n	800a754 <__pow5mult+0xa0>
 800a6d8:	69fc      	ldr	r4, [r7, #28]
 800a6da:	b97c      	cbnz	r4, 800a6fc <__pow5mult+0x48>
 800a6dc:	2010      	movs	r0, #16
 800a6de:	f7fe f8e5 	bl	80088ac <malloc>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	61f8      	str	r0, [r7, #28]
 800a6e6:	b928      	cbnz	r0, 800a6f4 <__pow5mult+0x40>
 800a6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a760 <__pow5mult+0xac>)
 800a6ea:	481e      	ldr	r0, [pc, #120]	@ (800a764 <__pow5mult+0xb0>)
 800a6ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a6f0:	f000 fa5a 	bl	800aba8 <__assert_func>
 800a6f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6f8:	6004      	str	r4, [r0, #0]
 800a6fa:	60c4      	str	r4, [r0, #12]
 800a6fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a704:	b94c      	cbnz	r4, 800a71a <__pow5mult+0x66>
 800a706:	f240 2171 	movw	r1, #625	@ 0x271
 800a70a:	4638      	mov	r0, r7
 800a70c:	f7ff ff12 	bl	800a534 <__i2b>
 800a710:	2300      	movs	r3, #0
 800a712:	f8c8 0008 	str.w	r0, [r8, #8]
 800a716:	4604      	mov	r4, r0
 800a718:	6003      	str	r3, [r0, #0]
 800a71a:	f04f 0900 	mov.w	r9, #0
 800a71e:	07eb      	lsls	r3, r5, #31
 800a720:	d50a      	bpl.n	800a738 <__pow5mult+0x84>
 800a722:	4631      	mov	r1, r6
 800a724:	4622      	mov	r2, r4
 800a726:	4638      	mov	r0, r7
 800a728:	f7ff ff1a 	bl	800a560 <__multiply>
 800a72c:	4631      	mov	r1, r6
 800a72e:	4680      	mov	r8, r0
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff fe4b 	bl	800a3cc <_Bfree>
 800a736:	4646      	mov	r6, r8
 800a738:	106d      	asrs	r5, r5, #1
 800a73a:	d00b      	beq.n	800a754 <__pow5mult+0xa0>
 800a73c:	6820      	ldr	r0, [r4, #0]
 800a73e:	b938      	cbnz	r0, 800a750 <__pow5mult+0x9c>
 800a740:	4622      	mov	r2, r4
 800a742:	4621      	mov	r1, r4
 800a744:	4638      	mov	r0, r7
 800a746:	f7ff ff0b 	bl	800a560 <__multiply>
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	f8c0 9000 	str.w	r9, [r0]
 800a750:	4604      	mov	r4, r0
 800a752:	e7e4      	b.n	800a71e <__pow5mult+0x6a>
 800a754:	4630      	mov	r0, r6
 800a756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a75a:	bf00      	nop
 800a75c:	0800b380 	.word	0x0800b380
 800a760:	0800b2a5 	.word	0x0800b2a5
 800a764:	0800b325 	.word	0x0800b325

0800a768 <__lshift>:
 800a768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a76c:	460c      	mov	r4, r1
 800a76e:	6849      	ldr	r1, [r1, #4]
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a776:	68a3      	ldr	r3, [r4, #8]
 800a778:	4607      	mov	r7, r0
 800a77a:	4691      	mov	r9, r2
 800a77c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a780:	f108 0601 	add.w	r6, r8, #1
 800a784:	42b3      	cmp	r3, r6
 800a786:	db0b      	blt.n	800a7a0 <__lshift+0x38>
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff fddf 	bl	800a34c <_Balloc>
 800a78e:	4605      	mov	r5, r0
 800a790:	b948      	cbnz	r0, 800a7a6 <__lshift+0x3e>
 800a792:	4602      	mov	r2, r0
 800a794:	4b28      	ldr	r3, [pc, #160]	@ (800a838 <__lshift+0xd0>)
 800a796:	4829      	ldr	r0, [pc, #164]	@ (800a83c <__lshift+0xd4>)
 800a798:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a79c:	f000 fa04 	bl	800aba8 <__assert_func>
 800a7a0:	3101      	adds	r1, #1
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	e7ee      	b.n	800a784 <__lshift+0x1c>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f100 0114 	add.w	r1, r0, #20
 800a7ac:	f100 0210 	add.w	r2, r0, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	4553      	cmp	r3, sl
 800a7b4:	db33      	blt.n	800a81e <__lshift+0xb6>
 800a7b6:	6920      	ldr	r0, [r4, #16]
 800a7b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7bc:	f104 0314 	add.w	r3, r4, #20
 800a7c0:	f019 091f 	ands.w	r9, r9, #31
 800a7c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7cc:	d02b      	beq.n	800a826 <__lshift+0xbe>
 800a7ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a7d2:	468a      	mov	sl, r1
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a7dc:	4310      	orrs	r0, r2
 800a7de:	f84a 0b04 	str.w	r0, [sl], #4
 800a7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e6:	459c      	cmp	ip, r3
 800a7e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7ec:	d8f3      	bhi.n	800a7d6 <__lshift+0x6e>
 800a7ee:	ebac 0304 	sub.w	r3, ip, r4
 800a7f2:	3b15      	subs	r3, #21
 800a7f4:	f023 0303 	bic.w	r3, r3, #3
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	f104 0015 	add.w	r0, r4, #21
 800a7fe:	4584      	cmp	ip, r0
 800a800:	bf38      	it	cc
 800a802:	2304      	movcc	r3, #4
 800a804:	50ca      	str	r2, [r1, r3]
 800a806:	b10a      	cbz	r2, 800a80c <__lshift+0xa4>
 800a808:	f108 0602 	add.w	r6, r8, #2
 800a80c:	3e01      	subs	r6, #1
 800a80e:	4638      	mov	r0, r7
 800a810:	612e      	str	r6, [r5, #16]
 800a812:	4621      	mov	r1, r4
 800a814:	f7ff fdda 	bl	800a3cc <_Bfree>
 800a818:	4628      	mov	r0, r5
 800a81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a81e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a822:	3301      	adds	r3, #1
 800a824:	e7c5      	b.n	800a7b2 <__lshift+0x4a>
 800a826:	3904      	subs	r1, #4
 800a828:	f853 2b04 	ldr.w	r2, [r3], #4
 800a82c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a830:	459c      	cmp	ip, r3
 800a832:	d8f9      	bhi.n	800a828 <__lshift+0xc0>
 800a834:	e7ea      	b.n	800a80c <__lshift+0xa4>
 800a836:	bf00      	nop
 800a838:	0800b314 	.word	0x0800b314
 800a83c:	0800b325 	.word	0x0800b325

0800a840 <__mcmp>:
 800a840:	690a      	ldr	r2, [r1, #16]
 800a842:	4603      	mov	r3, r0
 800a844:	6900      	ldr	r0, [r0, #16]
 800a846:	1a80      	subs	r0, r0, r2
 800a848:	b530      	push	{r4, r5, lr}
 800a84a:	d10e      	bne.n	800a86a <__mcmp+0x2a>
 800a84c:	3314      	adds	r3, #20
 800a84e:	3114      	adds	r1, #20
 800a850:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a854:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a85c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a860:	4295      	cmp	r5, r2
 800a862:	d003      	beq.n	800a86c <__mcmp+0x2c>
 800a864:	d205      	bcs.n	800a872 <__mcmp+0x32>
 800a866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a86a:	bd30      	pop	{r4, r5, pc}
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	d3f3      	bcc.n	800a858 <__mcmp+0x18>
 800a870:	e7fb      	b.n	800a86a <__mcmp+0x2a>
 800a872:	2001      	movs	r0, #1
 800a874:	e7f9      	b.n	800a86a <__mcmp+0x2a>
	...

0800a878 <__mdiff>:
 800a878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	4689      	mov	r9, r1
 800a87e:	4606      	mov	r6, r0
 800a880:	4611      	mov	r1, r2
 800a882:	4648      	mov	r0, r9
 800a884:	4614      	mov	r4, r2
 800a886:	f7ff ffdb 	bl	800a840 <__mcmp>
 800a88a:	1e05      	subs	r5, r0, #0
 800a88c:	d112      	bne.n	800a8b4 <__mdiff+0x3c>
 800a88e:	4629      	mov	r1, r5
 800a890:	4630      	mov	r0, r6
 800a892:	f7ff fd5b 	bl	800a34c <_Balloc>
 800a896:	4602      	mov	r2, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <__mdiff+0x2e>
 800a89a:	4b3f      	ldr	r3, [pc, #252]	@ (800a998 <__mdiff+0x120>)
 800a89c:	f240 2137 	movw	r1, #567	@ 0x237
 800a8a0:	483e      	ldr	r0, [pc, #248]	@ (800a99c <__mdiff+0x124>)
 800a8a2:	f000 f981 	bl	800aba8 <__assert_func>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	b003      	add	sp, #12
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	bfbc      	itt	lt
 800a8b6:	464b      	movlt	r3, r9
 800a8b8:	46a1      	movlt	r9, r4
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a8c0:	bfba      	itte	lt
 800a8c2:	461c      	movlt	r4, r3
 800a8c4:	2501      	movlt	r5, #1
 800a8c6:	2500      	movge	r5, #0
 800a8c8:	f7ff fd40 	bl	800a34c <_Balloc>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	b918      	cbnz	r0, 800a8d8 <__mdiff+0x60>
 800a8d0:	4b31      	ldr	r3, [pc, #196]	@ (800a998 <__mdiff+0x120>)
 800a8d2:	f240 2145 	movw	r1, #581	@ 0x245
 800a8d6:	e7e3      	b.n	800a8a0 <__mdiff+0x28>
 800a8d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a8dc:	6926      	ldr	r6, [r4, #16]
 800a8de:	60c5      	str	r5, [r0, #12]
 800a8e0:	f109 0310 	add.w	r3, r9, #16
 800a8e4:	f109 0514 	add.w	r5, r9, #20
 800a8e8:	f104 0e14 	add.w	lr, r4, #20
 800a8ec:	f100 0b14 	add.w	fp, r0, #20
 800a8f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	46d9      	mov	r9, fp
 800a8fc:	f04f 0c00 	mov.w	ip, #0
 800a900:	9b01      	ldr	r3, [sp, #4]
 800a902:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a906:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a90a:	9301      	str	r3, [sp, #4]
 800a90c:	fa1f f38a 	uxth.w	r3, sl
 800a910:	4619      	mov	r1, r3
 800a912:	b283      	uxth	r3, r0
 800a914:	1acb      	subs	r3, r1, r3
 800a916:	0c00      	lsrs	r0, r0, #16
 800a918:	4463      	add	r3, ip
 800a91a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a91e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a922:	b29b      	uxth	r3, r3
 800a924:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a928:	4576      	cmp	r6, lr
 800a92a:	f849 3b04 	str.w	r3, [r9], #4
 800a92e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a932:	d8e5      	bhi.n	800a900 <__mdiff+0x88>
 800a934:	1b33      	subs	r3, r6, r4
 800a936:	3b15      	subs	r3, #21
 800a938:	f023 0303 	bic.w	r3, r3, #3
 800a93c:	3415      	adds	r4, #21
 800a93e:	3304      	adds	r3, #4
 800a940:	42a6      	cmp	r6, r4
 800a942:	bf38      	it	cc
 800a944:	2304      	movcc	r3, #4
 800a946:	441d      	add	r5, r3
 800a948:	445b      	add	r3, fp
 800a94a:	461e      	mov	r6, r3
 800a94c:	462c      	mov	r4, r5
 800a94e:	4544      	cmp	r4, r8
 800a950:	d30e      	bcc.n	800a970 <__mdiff+0xf8>
 800a952:	f108 0103 	add.w	r1, r8, #3
 800a956:	1b49      	subs	r1, r1, r5
 800a958:	f021 0103 	bic.w	r1, r1, #3
 800a95c:	3d03      	subs	r5, #3
 800a95e:	45a8      	cmp	r8, r5
 800a960:	bf38      	it	cc
 800a962:	2100      	movcc	r1, #0
 800a964:	440b      	add	r3, r1
 800a966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a96a:	b191      	cbz	r1, 800a992 <__mdiff+0x11a>
 800a96c:	6117      	str	r7, [r2, #16]
 800a96e:	e79d      	b.n	800a8ac <__mdiff+0x34>
 800a970:	f854 1b04 	ldr.w	r1, [r4], #4
 800a974:	46e6      	mov	lr, ip
 800a976:	0c08      	lsrs	r0, r1, #16
 800a978:	fa1c fc81 	uxtah	ip, ip, r1
 800a97c:	4471      	add	r1, lr
 800a97e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a982:	b289      	uxth	r1, r1
 800a984:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a988:	f846 1b04 	str.w	r1, [r6], #4
 800a98c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a990:	e7dd      	b.n	800a94e <__mdiff+0xd6>
 800a992:	3f01      	subs	r7, #1
 800a994:	e7e7      	b.n	800a966 <__mdiff+0xee>
 800a996:	bf00      	nop
 800a998:	0800b314 	.word	0x0800b314
 800a99c:	0800b325 	.word	0x0800b325

0800a9a0 <__d2b>:
 800a9a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	ec59 8b10 	vmov	r8, r9, d0
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	f7ff fccd 	bl	800a34c <_Balloc>
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	b930      	cbnz	r0, 800a9c4 <__d2b+0x24>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	4b23      	ldr	r3, [pc, #140]	@ (800aa48 <__d2b+0xa8>)
 800a9ba:	4824      	ldr	r0, [pc, #144]	@ (800aa4c <__d2b+0xac>)
 800a9bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9c0:	f000 f8f2 	bl	800aba8 <__assert_func>
 800a9c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9cc:	b10d      	cbz	r5, 800a9d2 <__d2b+0x32>
 800a9ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9d2:	9301      	str	r3, [sp, #4]
 800a9d4:	f1b8 0300 	subs.w	r3, r8, #0
 800a9d8:	d023      	beq.n	800aa22 <__d2b+0x82>
 800a9da:	4668      	mov	r0, sp
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	f7ff fd7c 	bl	800a4da <__lo0bits>
 800a9e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9e6:	b1d0      	cbz	r0, 800aa1e <__d2b+0x7e>
 800a9e8:	f1c0 0320 	rsb	r3, r0, #32
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	40c2      	lsrs	r2, r0
 800a9f4:	6163      	str	r3, [r4, #20]
 800a9f6:	9201      	str	r2, [sp, #4]
 800a9f8:	9b01      	ldr	r3, [sp, #4]
 800a9fa:	61a3      	str	r3, [r4, #24]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bf0c      	ite	eq
 800aa00:	2201      	moveq	r2, #1
 800aa02:	2202      	movne	r2, #2
 800aa04:	6122      	str	r2, [r4, #16]
 800aa06:	b1a5      	cbz	r5, 800aa32 <__d2b+0x92>
 800aa08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa0c:	4405      	add	r5, r0
 800aa0e:	603d      	str	r5, [r7, #0]
 800aa10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa14:	6030      	str	r0, [r6, #0]
 800aa16:	4620      	mov	r0, r4
 800aa18:	b003      	add	sp, #12
 800aa1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	6161      	str	r1, [r4, #20]
 800aa20:	e7ea      	b.n	800a9f8 <__d2b+0x58>
 800aa22:	a801      	add	r0, sp, #4
 800aa24:	f7ff fd59 	bl	800a4da <__lo0bits>
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	6163      	str	r3, [r4, #20]
 800aa2c:	3020      	adds	r0, #32
 800aa2e:	2201      	movs	r2, #1
 800aa30:	e7e8      	b.n	800aa04 <__d2b+0x64>
 800aa32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa3a:	6038      	str	r0, [r7, #0]
 800aa3c:	6918      	ldr	r0, [r3, #16]
 800aa3e:	f7ff fd2d 	bl	800a49c <__hi0bits>
 800aa42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa46:	e7e5      	b.n	800aa14 <__d2b+0x74>
 800aa48:	0800b314 	.word	0x0800b314
 800aa4c:	0800b325 	.word	0x0800b325

0800aa50 <__sflush_r>:
 800aa50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa58:	0716      	lsls	r6, r2, #28
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	d454      	bmi.n	800ab0a <__sflush_r+0xba>
 800aa60:	684b      	ldr	r3, [r1, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	dc02      	bgt.n	800aa6c <__sflush_r+0x1c>
 800aa66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	dd48      	ble.n	800aafe <__sflush_r+0xae>
 800aa6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa6e:	2e00      	cmp	r6, #0
 800aa70:	d045      	beq.n	800aafe <__sflush_r+0xae>
 800aa72:	2300      	movs	r3, #0
 800aa74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa78:	682f      	ldr	r7, [r5, #0]
 800aa7a:	6a21      	ldr	r1, [r4, #32]
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	d030      	beq.n	800aae2 <__sflush_r+0x92>
 800aa80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	0759      	lsls	r1, r3, #29
 800aa86:	d505      	bpl.n	800aa94 <__sflush_r+0x44>
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	1ad2      	subs	r2, r2, r3
 800aa8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa8e:	b10b      	cbz	r3, 800aa94 <__sflush_r+0x44>
 800aa90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa92:	1ad2      	subs	r2, r2, r3
 800aa94:	2300      	movs	r3, #0
 800aa96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa98:	6a21      	ldr	r1, [r4, #32]
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	47b0      	blx	r6
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	d106      	bne.n	800aab2 <__sflush_r+0x62>
 800aaa4:	6829      	ldr	r1, [r5, #0]
 800aaa6:	291d      	cmp	r1, #29
 800aaa8:	d82b      	bhi.n	800ab02 <__sflush_r+0xb2>
 800aaaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ab54 <__sflush_r+0x104>)
 800aaac:	410a      	asrs	r2, r1
 800aaae:	07d6      	lsls	r6, r2, #31
 800aab0:	d427      	bmi.n	800ab02 <__sflush_r+0xb2>
 800aab2:	2200      	movs	r2, #0
 800aab4:	6062      	str	r2, [r4, #4]
 800aab6:	04d9      	lsls	r1, r3, #19
 800aab8:	6922      	ldr	r2, [r4, #16]
 800aaba:	6022      	str	r2, [r4, #0]
 800aabc:	d504      	bpl.n	800aac8 <__sflush_r+0x78>
 800aabe:	1c42      	adds	r2, r0, #1
 800aac0:	d101      	bne.n	800aac6 <__sflush_r+0x76>
 800aac2:	682b      	ldr	r3, [r5, #0]
 800aac4:	b903      	cbnz	r3, 800aac8 <__sflush_r+0x78>
 800aac6:	6560      	str	r0, [r4, #84]	@ 0x54
 800aac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaca:	602f      	str	r7, [r5, #0]
 800aacc:	b1b9      	cbz	r1, 800aafe <__sflush_r+0xae>
 800aace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aad2:	4299      	cmp	r1, r3
 800aad4:	d002      	beq.n	800aadc <__sflush_r+0x8c>
 800aad6:	4628      	mov	r0, r5
 800aad8:	f7ff fbee 	bl	800a2b8 <_free_r>
 800aadc:	2300      	movs	r3, #0
 800aade:	6363      	str	r3, [r4, #52]	@ 0x34
 800aae0:	e00d      	b.n	800aafe <__sflush_r+0xae>
 800aae2:	2301      	movs	r3, #1
 800aae4:	4628      	mov	r0, r5
 800aae6:	47b0      	blx	r6
 800aae8:	4602      	mov	r2, r0
 800aaea:	1c50      	adds	r0, r2, #1
 800aaec:	d1c9      	bne.n	800aa82 <__sflush_r+0x32>
 800aaee:	682b      	ldr	r3, [r5, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d0c6      	beq.n	800aa82 <__sflush_r+0x32>
 800aaf4:	2b1d      	cmp	r3, #29
 800aaf6:	d001      	beq.n	800aafc <__sflush_r+0xac>
 800aaf8:	2b16      	cmp	r3, #22
 800aafa:	d11e      	bne.n	800ab3a <__sflush_r+0xea>
 800aafc:	602f      	str	r7, [r5, #0]
 800aafe:	2000      	movs	r0, #0
 800ab00:	e022      	b.n	800ab48 <__sflush_r+0xf8>
 800ab02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab06:	b21b      	sxth	r3, r3
 800ab08:	e01b      	b.n	800ab42 <__sflush_r+0xf2>
 800ab0a:	690f      	ldr	r7, [r1, #16]
 800ab0c:	2f00      	cmp	r7, #0
 800ab0e:	d0f6      	beq.n	800aafe <__sflush_r+0xae>
 800ab10:	0793      	lsls	r3, r2, #30
 800ab12:	680e      	ldr	r6, [r1, #0]
 800ab14:	bf08      	it	eq
 800ab16:	694b      	ldreq	r3, [r1, #20]
 800ab18:	600f      	str	r7, [r1, #0]
 800ab1a:	bf18      	it	ne
 800ab1c:	2300      	movne	r3, #0
 800ab1e:	eba6 0807 	sub.w	r8, r6, r7
 800ab22:	608b      	str	r3, [r1, #8]
 800ab24:	f1b8 0f00 	cmp.w	r8, #0
 800ab28:	dde9      	ble.n	800aafe <__sflush_r+0xae>
 800ab2a:	6a21      	ldr	r1, [r4, #32]
 800ab2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab2e:	4643      	mov	r3, r8
 800ab30:	463a      	mov	r2, r7
 800ab32:	4628      	mov	r0, r5
 800ab34:	47b0      	blx	r6
 800ab36:	2800      	cmp	r0, #0
 800ab38:	dc08      	bgt.n	800ab4c <__sflush_r+0xfc>
 800ab3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab42:	81a3      	strh	r3, [r4, #12]
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4c:	4407      	add	r7, r0
 800ab4e:	eba8 0800 	sub.w	r8, r8, r0
 800ab52:	e7e7      	b.n	800ab24 <__sflush_r+0xd4>
 800ab54:	dfbffffe 	.word	0xdfbffffe

0800ab58 <_fflush_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	690b      	ldr	r3, [r1, #16]
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	460c      	mov	r4, r1
 800ab60:	b913      	cbnz	r3, 800ab68 <_fflush_r+0x10>
 800ab62:	2500      	movs	r5, #0
 800ab64:	4628      	mov	r0, r5
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	b118      	cbz	r0, 800ab72 <_fflush_r+0x1a>
 800ab6a:	6a03      	ldr	r3, [r0, #32]
 800ab6c:	b90b      	cbnz	r3, 800ab72 <_fflush_r+0x1a>
 800ab6e:	f7fe fc3f 	bl	80093f0 <__sinit>
 800ab72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0f3      	beq.n	800ab62 <_fflush_r+0xa>
 800ab7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab7c:	07d0      	lsls	r0, r2, #31
 800ab7e:	d404      	bmi.n	800ab8a <_fflush_r+0x32>
 800ab80:	0599      	lsls	r1, r3, #22
 800ab82:	d402      	bmi.n	800ab8a <_fflush_r+0x32>
 800ab84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab86:	f7fe fd3a 	bl	80095fe <__retarget_lock_acquire_recursive>
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	4621      	mov	r1, r4
 800ab8e:	f7ff ff5f 	bl	800aa50 <__sflush_r>
 800ab92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab94:	07da      	lsls	r2, r3, #31
 800ab96:	4605      	mov	r5, r0
 800ab98:	d4e4      	bmi.n	800ab64 <_fflush_r+0xc>
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	059b      	lsls	r3, r3, #22
 800ab9e:	d4e1      	bmi.n	800ab64 <_fflush_r+0xc>
 800aba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aba2:	f7fe fd2d 	bl	8009600 <__retarget_lock_release_recursive>
 800aba6:	e7dd      	b.n	800ab64 <_fflush_r+0xc>

0800aba8 <__assert_func>:
 800aba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abaa:	4614      	mov	r4, r2
 800abac:	461a      	mov	r2, r3
 800abae:	4b09      	ldr	r3, [pc, #36]	@ (800abd4 <__assert_func+0x2c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4605      	mov	r5, r0
 800abb4:	68d8      	ldr	r0, [r3, #12]
 800abb6:	b954      	cbnz	r4, 800abce <__assert_func+0x26>
 800abb8:	4b07      	ldr	r3, [pc, #28]	@ (800abd8 <__assert_func+0x30>)
 800abba:	461c      	mov	r4, r3
 800abbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abc0:	9100      	str	r1, [sp, #0]
 800abc2:	462b      	mov	r3, r5
 800abc4:	4905      	ldr	r1, [pc, #20]	@ (800abdc <__assert_func+0x34>)
 800abc6:	f000 f841 	bl	800ac4c <fiprintf>
 800abca:	f000 f851 	bl	800ac70 <abort>
 800abce:	4b04      	ldr	r3, [pc, #16]	@ (800abe0 <__assert_func+0x38>)
 800abd0:	e7f4      	b.n	800abbc <__assert_func+0x14>
 800abd2:	bf00      	nop
 800abd4:	20000110 	.word	0x20000110
 800abd8:	0800b4c5 	.word	0x0800b4c5
 800abdc:	0800b497 	.word	0x0800b497
 800abe0:	0800b48a 	.word	0x0800b48a

0800abe4 <_calloc_r>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	fba1 5402 	umull	r5, r4, r1, r2
 800abea:	b93c      	cbnz	r4, 800abfc <_calloc_r+0x18>
 800abec:	4629      	mov	r1, r5
 800abee:	f7fd fe8f 	bl	8008910 <_malloc_r>
 800abf2:	4606      	mov	r6, r0
 800abf4:	b928      	cbnz	r0, 800ac02 <_calloc_r+0x1e>
 800abf6:	2600      	movs	r6, #0
 800abf8:	4630      	mov	r0, r6
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
 800abfc:	220c      	movs	r2, #12
 800abfe:	6002      	str	r2, [r0, #0]
 800ac00:	e7f9      	b.n	800abf6 <_calloc_r+0x12>
 800ac02:	462a      	mov	r2, r5
 800ac04:	4621      	mov	r1, r4
 800ac06:	f7fe fc6c 	bl	80094e2 <memset>
 800ac0a:	e7f5      	b.n	800abf8 <_calloc_r+0x14>

0800ac0c <__ascii_mbtowc>:
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	b901      	cbnz	r1, 800ac12 <__ascii_mbtowc+0x6>
 800ac10:	a901      	add	r1, sp, #4
 800ac12:	b142      	cbz	r2, 800ac26 <__ascii_mbtowc+0x1a>
 800ac14:	b14b      	cbz	r3, 800ac2a <__ascii_mbtowc+0x1e>
 800ac16:	7813      	ldrb	r3, [r2, #0]
 800ac18:	600b      	str	r3, [r1, #0]
 800ac1a:	7812      	ldrb	r2, [r2, #0]
 800ac1c:	1e10      	subs	r0, r2, #0
 800ac1e:	bf18      	it	ne
 800ac20:	2001      	movne	r0, #1
 800ac22:	b002      	add	sp, #8
 800ac24:	4770      	bx	lr
 800ac26:	4610      	mov	r0, r2
 800ac28:	e7fb      	b.n	800ac22 <__ascii_mbtowc+0x16>
 800ac2a:	f06f 0001 	mvn.w	r0, #1
 800ac2e:	e7f8      	b.n	800ac22 <__ascii_mbtowc+0x16>

0800ac30 <__ascii_wctomb>:
 800ac30:	4603      	mov	r3, r0
 800ac32:	4608      	mov	r0, r1
 800ac34:	b141      	cbz	r1, 800ac48 <__ascii_wctomb+0x18>
 800ac36:	2aff      	cmp	r2, #255	@ 0xff
 800ac38:	d904      	bls.n	800ac44 <__ascii_wctomb+0x14>
 800ac3a:	228a      	movs	r2, #138	@ 0x8a
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac42:	4770      	bx	lr
 800ac44:	700a      	strb	r2, [r1, #0]
 800ac46:	2001      	movs	r0, #1
 800ac48:	4770      	bx	lr
	...

0800ac4c <fiprintf>:
 800ac4c:	b40e      	push	{r1, r2, r3}
 800ac4e:	b503      	push	{r0, r1, lr}
 800ac50:	4601      	mov	r1, r0
 800ac52:	ab03      	add	r3, sp, #12
 800ac54:	4805      	ldr	r0, [pc, #20]	@ (800ac6c <fiprintf+0x20>)
 800ac56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	f000 f837 	bl	800acd0 <_vfiprintf_r>
 800ac62:	b002      	add	sp, #8
 800ac64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac68:	b003      	add	sp, #12
 800ac6a:	4770      	bx	lr
 800ac6c:	20000110 	.word	0x20000110

0800ac70 <abort>:
 800ac70:	b508      	push	{r3, lr}
 800ac72:	2006      	movs	r0, #6
 800ac74:	f000 fa00 	bl	800b078 <raise>
 800ac78:	2001      	movs	r0, #1
 800ac7a:	f7f6 fd29 	bl	80016d0 <_exit>

0800ac7e <__sfputc_r>:
 800ac7e:	6893      	ldr	r3, [r2, #8]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	b410      	push	{r4}
 800ac86:	6093      	str	r3, [r2, #8]
 800ac88:	da08      	bge.n	800ac9c <__sfputc_r+0x1e>
 800ac8a:	6994      	ldr	r4, [r2, #24]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	db01      	blt.n	800ac94 <__sfputc_r+0x16>
 800ac90:	290a      	cmp	r1, #10
 800ac92:	d103      	bne.n	800ac9c <__sfputc_r+0x1e>
 800ac94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac98:	f000 b932 	b.w	800af00 <__swbuf_r>
 800ac9c:	6813      	ldr	r3, [r2, #0]
 800ac9e:	1c58      	adds	r0, r3, #1
 800aca0:	6010      	str	r0, [r2, #0]
 800aca2:	7019      	strb	r1, [r3, #0]
 800aca4:	4608      	mov	r0, r1
 800aca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <__sfputs_r>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	4606      	mov	r6, r0
 800acb0:	460f      	mov	r7, r1
 800acb2:	4614      	mov	r4, r2
 800acb4:	18d5      	adds	r5, r2, r3
 800acb6:	42ac      	cmp	r4, r5
 800acb8:	d101      	bne.n	800acbe <__sfputs_r+0x12>
 800acba:	2000      	movs	r0, #0
 800acbc:	e007      	b.n	800acce <__sfputs_r+0x22>
 800acbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc2:	463a      	mov	r2, r7
 800acc4:	4630      	mov	r0, r6
 800acc6:	f7ff ffda 	bl	800ac7e <__sfputc_r>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	d1f3      	bne.n	800acb6 <__sfputs_r+0xa>
 800acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800acd0 <_vfiprintf_r>:
 800acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd4:	460d      	mov	r5, r1
 800acd6:	b09d      	sub	sp, #116	@ 0x74
 800acd8:	4614      	mov	r4, r2
 800acda:	4698      	mov	r8, r3
 800acdc:	4606      	mov	r6, r0
 800acde:	b118      	cbz	r0, 800ace8 <_vfiprintf_r+0x18>
 800ace0:	6a03      	ldr	r3, [r0, #32]
 800ace2:	b90b      	cbnz	r3, 800ace8 <_vfiprintf_r+0x18>
 800ace4:	f7fe fb84 	bl	80093f0 <__sinit>
 800ace8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acea:	07d9      	lsls	r1, r3, #31
 800acec:	d405      	bmi.n	800acfa <_vfiprintf_r+0x2a>
 800acee:	89ab      	ldrh	r3, [r5, #12]
 800acf0:	059a      	lsls	r2, r3, #22
 800acf2:	d402      	bmi.n	800acfa <_vfiprintf_r+0x2a>
 800acf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acf6:	f7fe fc82 	bl	80095fe <__retarget_lock_acquire_recursive>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	071b      	lsls	r3, r3, #28
 800acfe:	d501      	bpl.n	800ad04 <_vfiprintf_r+0x34>
 800ad00:	692b      	ldr	r3, [r5, #16]
 800ad02:	b99b      	cbnz	r3, 800ad2c <_vfiprintf_r+0x5c>
 800ad04:	4629      	mov	r1, r5
 800ad06:	4630      	mov	r0, r6
 800ad08:	f000 f938 	bl	800af7c <__swsetup_r>
 800ad0c:	b170      	cbz	r0, 800ad2c <_vfiprintf_r+0x5c>
 800ad0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad10:	07dc      	lsls	r4, r3, #31
 800ad12:	d504      	bpl.n	800ad1e <_vfiprintf_r+0x4e>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad18:	b01d      	add	sp, #116	@ 0x74
 800ad1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1e:	89ab      	ldrh	r3, [r5, #12]
 800ad20:	0598      	lsls	r0, r3, #22
 800ad22:	d4f7      	bmi.n	800ad14 <_vfiprintf_r+0x44>
 800ad24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad26:	f7fe fc6b 	bl	8009600 <__retarget_lock_release_recursive>
 800ad2a:	e7f3      	b.n	800ad14 <_vfiprintf_r+0x44>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad30:	2320      	movs	r3, #32
 800ad32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad3a:	2330      	movs	r3, #48	@ 0x30
 800ad3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aeec <_vfiprintf_r+0x21c>
 800ad40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad44:	f04f 0901 	mov.w	r9, #1
 800ad48:	4623      	mov	r3, r4
 800ad4a:	469a      	mov	sl, r3
 800ad4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad50:	b10a      	cbz	r2, 800ad56 <_vfiprintf_r+0x86>
 800ad52:	2a25      	cmp	r2, #37	@ 0x25
 800ad54:	d1f9      	bne.n	800ad4a <_vfiprintf_r+0x7a>
 800ad56:	ebba 0b04 	subs.w	fp, sl, r4
 800ad5a:	d00b      	beq.n	800ad74 <_vfiprintf_r+0xa4>
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	4622      	mov	r2, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7ff ffa2 	bl	800acac <__sfputs_r>
 800ad68:	3001      	adds	r0, #1
 800ad6a:	f000 80a7 	beq.w	800aebc <_vfiprintf_r+0x1ec>
 800ad6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad70:	445a      	add	r2, fp
 800ad72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad74:	f89a 3000 	ldrb.w	r3, [sl]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 809f 	beq.w	800aebc <_vfiprintf_r+0x1ec>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad88:	f10a 0a01 	add.w	sl, sl, #1
 800ad8c:	9304      	str	r3, [sp, #16]
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad96:	4654      	mov	r4, sl
 800ad98:	2205      	movs	r2, #5
 800ad9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9e:	4853      	ldr	r0, [pc, #332]	@ (800aeec <_vfiprintf_r+0x21c>)
 800ada0:	f7f5 fa1e 	bl	80001e0 <memchr>
 800ada4:	9a04      	ldr	r2, [sp, #16]
 800ada6:	b9d8      	cbnz	r0, 800ade0 <_vfiprintf_r+0x110>
 800ada8:	06d1      	lsls	r1, r2, #27
 800adaa:	bf44      	itt	mi
 800adac:	2320      	movmi	r3, #32
 800adae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adb2:	0713      	lsls	r3, r2, #28
 800adb4:	bf44      	itt	mi
 800adb6:	232b      	movmi	r3, #43	@ 0x2b
 800adb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adbc:	f89a 3000 	ldrb.w	r3, [sl]
 800adc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc2:	d015      	beq.n	800adf0 <_vfiprintf_r+0x120>
 800adc4:	9a07      	ldr	r2, [sp, #28]
 800adc6:	4654      	mov	r4, sl
 800adc8:	2000      	movs	r0, #0
 800adca:	f04f 0c0a 	mov.w	ip, #10
 800adce:	4621      	mov	r1, r4
 800add0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add4:	3b30      	subs	r3, #48	@ 0x30
 800add6:	2b09      	cmp	r3, #9
 800add8:	d94b      	bls.n	800ae72 <_vfiprintf_r+0x1a2>
 800adda:	b1b0      	cbz	r0, 800ae0a <_vfiprintf_r+0x13a>
 800addc:	9207      	str	r2, [sp, #28]
 800adde:	e014      	b.n	800ae0a <_vfiprintf_r+0x13a>
 800ade0:	eba0 0308 	sub.w	r3, r0, r8
 800ade4:	fa09 f303 	lsl.w	r3, r9, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	46a2      	mov	sl, r4
 800adee:	e7d2      	b.n	800ad96 <_vfiprintf_r+0xc6>
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	1d19      	adds	r1, r3, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	9103      	str	r1, [sp, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bfbb      	ittet	lt
 800adfc:	425b      	neglt	r3, r3
 800adfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ae02:	9307      	strge	r3, [sp, #28]
 800ae04:	9307      	strlt	r3, [sp, #28]
 800ae06:	bfb8      	it	lt
 800ae08:	9204      	strlt	r2, [sp, #16]
 800ae0a:	7823      	ldrb	r3, [r4, #0]
 800ae0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae0e:	d10a      	bne.n	800ae26 <_vfiprintf_r+0x156>
 800ae10:	7863      	ldrb	r3, [r4, #1]
 800ae12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae14:	d132      	bne.n	800ae7c <_vfiprintf_r+0x1ac>
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	1d1a      	adds	r2, r3, #4
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	9203      	str	r2, [sp, #12]
 800ae1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae22:	3402      	adds	r4, #2
 800ae24:	9305      	str	r3, [sp, #20]
 800ae26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aefc <_vfiprintf_r+0x22c>
 800ae2a:	7821      	ldrb	r1, [r4, #0]
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	4650      	mov	r0, sl
 800ae30:	f7f5 f9d6 	bl	80001e0 <memchr>
 800ae34:	b138      	cbz	r0, 800ae46 <_vfiprintf_r+0x176>
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	eba0 000a 	sub.w	r0, r0, sl
 800ae3c:	2240      	movs	r2, #64	@ 0x40
 800ae3e:	4082      	lsls	r2, r0
 800ae40:	4313      	orrs	r3, r2
 800ae42:	3401      	adds	r4, #1
 800ae44:	9304      	str	r3, [sp, #16]
 800ae46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4a:	4829      	ldr	r0, [pc, #164]	@ (800aef0 <_vfiprintf_r+0x220>)
 800ae4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae50:	2206      	movs	r2, #6
 800ae52:	f7f5 f9c5 	bl	80001e0 <memchr>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d03f      	beq.n	800aeda <_vfiprintf_r+0x20a>
 800ae5a:	4b26      	ldr	r3, [pc, #152]	@ (800aef4 <_vfiprintf_r+0x224>)
 800ae5c:	bb1b      	cbnz	r3, 800aea6 <_vfiprintf_r+0x1d6>
 800ae5e:	9b03      	ldr	r3, [sp, #12]
 800ae60:	3307      	adds	r3, #7
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	3308      	adds	r3, #8
 800ae68:	9303      	str	r3, [sp, #12]
 800ae6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6c:	443b      	add	r3, r7
 800ae6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae70:	e76a      	b.n	800ad48 <_vfiprintf_r+0x78>
 800ae72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae76:	460c      	mov	r4, r1
 800ae78:	2001      	movs	r0, #1
 800ae7a:	e7a8      	b.n	800adce <_vfiprintf_r+0xfe>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	3401      	adds	r4, #1
 800ae80:	9305      	str	r3, [sp, #20]
 800ae82:	4619      	mov	r1, r3
 800ae84:	f04f 0c0a 	mov.w	ip, #10
 800ae88:	4620      	mov	r0, r4
 800ae8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8e:	3a30      	subs	r2, #48	@ 0x30
 800ae90:	2a09      	cmp	r2, #9
 800ae92:	d903      	bls.n	800ae9c <_vfiprintf_r+0x1cc>
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0c6      	beq.n	800ae26 <_vfiprintf_r+0x156>
 800ae98:	9105      	str	r1, [sp, #20]
 800ae9a:	e7c4      	b.n	800ae26 <_vfiprintf_r+0x156>
 800ae9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aea0:	4604      	mov	r4, r0
 800aea2:	2301      	movs	r3, #1
 800aea4:	e7f0      	b.n	800ae88 <_vfiprintf_r+0x1b8>
 800aea6:	ab03      	add	r3, sp, #12
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4b12      	ldr	r3, [pc, #72]	@ (800aef8 <_vfiprintf_r+0x228>)
 800aeae:	a904      	add	r1, sp, #16
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f7fd fe59 	bl	8008b68 <_printf_float>
 800aeb6:	4607      	mov	r7, r0
 800aeb8:	1c78      	adds	r0, r7, #1
 800aeba:	d1d6      	bne.n	800ae6a <_vfiprintf_r+0x19a>
 800aebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aebe:	07d9      	lsls	r1, r3, #31
 800aec0:	d405      	bmi.n	800aece <_vfiprintf_r+0x1fe>
 800aec2:	89ab      	ldrh	r3, [r5, #12]
 800aec4:	059a      	lsls	r2, r3, #22
 800aec6:	d402      	bmi.n	800aece <_vfiprintf_r+0x1fe>
 800aec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeca:	f7fe fb99 	bl	8009600 <__retarget_lock_release_recursive>
 800aece:	89ab      	ldrh	r3, [r5, #12]
 800aed0:	065b      	lsls	r3, r3, #25
 800aed2:	f53f af1f 	bmi.w	800ad14 <_vfiprintf_r+0x44>
 800aed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aed8:	e71e      	b.n	800ad18 <_vfiprintf_r+0x48>
 800aeda:	ab03      	add	r3, sp, #12
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	462a      	mov	r2, r5
 800aee0:	4b05      	ldr	r3, [pc, #20]	@ (800aef8 <_vfiprintf_r+0x228>)
 800aee2:	a904      	add	r1, sp, #16
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7fe f8d7 	bl	8009098 <_printf_i>
 800aeea:	e7e4      	b.n	800aeb6 <_vfiprintf_r+0x1e6>
 800aeec:	0800b5c7 	.word	0x0800b5c7
 800aef0:	0800b5d1 	.word	0x0800b5d1
 800aef4:	08008b69 	.word	0x08008b69
 800aef8:	0800acad 	.word	0x0800acad
 800aefc:	0800b5cd 	.word	0x0800b5cd

0800af00 <__swbuf_r>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	460e      	mov	r6, r1
 800af04:	4614      	mov	r4, r2
 800af06:	4605      	mov	r5, r0
 800af08:	b118      	cbz	r0, 800af12 <__swbuf_r+0x12>
 800af0a:	6a03      	ldr	r3, [r0, #32]
 800af0c:	b90b      	cbnz	r3, 800af12 <__swbuf_r+0x12>
 800af0e:	f7fe fa6f 	bl	80093f0 <__sinit>
 800af12:	69a3      	ldr	r3, [r4, #24]
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	89a3      	ldrh	r3, [r4, #12]
 800af18:	071a      	lsls	r2, r3, #28
 800af1a:	d501      	bpl.n	800af20 <__swbuf_r+0x20>
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	b943      	cbnz	r3, 800af32 <__swbuf_r+0x32>
 800af20:	4621      	mov	r1, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f82a 	bl	800af7c <__swsetup_r>
 800af28:	b118      	cbz	r0, 800af32 <__swbuf_r+0x32>
 800af2a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800af2e:	4638      	mov	r0, r7
 800af30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	6922      	ldr	r2, [r4, #16]
 800af36:	1a98      	subs	r0, r3, r2
 800af38:	6963      	ldr	r3, [r4, #20]
 800af3a:	b2f6      	uxtb	r6, r6
 800af3c:	4283      	cmp	r3, r0
 800af3e:	4637      	mov	r7, r6
 800af40:	dc05      	bgt.n	800af4e <__swbuf_r+0x4e>
 800af42:	4621      	mov	r1, r4
 800af44:	4628      	mov	r0, r5
 800af46:	f7ff fe07 	bl	800ab58 <_fflush_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d1ed      	bne.n	800af2a <__swbuf_r+0x2a>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	3b01      	subs	r3, #1
 800af52:	60a3      	str	r3, [r4, #8]
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	701e      	strb	r6, [r3, #0]
 800af5c:	6962      	ldr	r2, [r4, #20]
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	429a      	cmp	r2, r3
 800af62:	d004      	beq.n	800af6e <__swbuf_r+0x6e>
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	07db      	lsls	r3, r3, #31
 800af68:	d5e1      	bpl.n	800af2e <__swbuf_r+0x2e>
 800af6a:	2e0a      	cmp	r6, #10
 800af6c:	d1df      	bne.n	800af2e <__swbuf_r+0x2e>
 800af6e:	4621      	mov	r1, r4
 800af70:	4628      	mov	r0, r5
 800af72:	f7ff fdf1 	bl	800ab58 <_fflush_r>
 800af76:	2800      	cmp	r0, #0
 800af78:	d0d9      	beq.n	800af2e <__swbuf_r+0x2e>
 800af7a:	e7d6      	b.n	800af2a <__swbuf_r+0x2a>

0800af7c <__swsetup_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4b29      	ldr	r3, [pc, #164]	@ (800b024 <__swsetup_r+0xa8>)
 800af80:	4605      	mov	r5, r0
 800af82:	6818      	ldr	r0, [r3, #0]
 800af84:	460c      	mov	r4, r1
 800af86:	b118      	cbz	r0, 800af90 <__swsetup_r+0x14>
 800af88:	6a03      	ldr	r3, [r0, #32]
 800af8a:	b90b      	cbnz	r3, 800af90 <__swsetup_r+0x14>
 800af8c:	f7fe fa30 	bl	80093f0 <__sinit>
 800af90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af94:	0719      	lsls	r1, r3, #28
 800af96:	d422      	bmi.n	800afde <__swsetup_r+0x62>
 800af98:	06da      	lsls	r2, r3, #27
 800af9a:	d407      	bmi.n	800afac <__swsetup_r+0x30>
 800af9c:	2209      	movs	r2, #9
 800af9e:	602a      	str	r2, [r5, #0]
 800afa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa4:	81a3      	strh	r3, [r4, #12]
 800afa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afaa:	e033      	b.n	800b014 <__swsetup_r+0x98>
 800afac:	0758      	lsls	r0, r3, #29
 800afae:	d512      	bpl.n	800afd6 <__swsetup_r+0x5a>
 800afb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afb2:	b141      	cbz	r1, 800afc6 <__swsetup_r+0x4a>
 800afb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afb8:	4299      	cmp	r1, r3
 800afba:	d002      	beq.n	800afc2 <__swsetup_r+0x46>
 800afbc:	4628      	mov	r0, r5
 800afbe:	f7ff f97b 	bl	800a2b8 <_free_r>
 800afc2:	2300      	movs	r3, #0
 800afc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afcc:	81a3      	strh	r3, [r4, #12]
 800afce:	2300      	movs	r3, #0
 800afd0:	6063      	str	r3, [r4, #4]
 800afd2:	6923      	ldr	r3, [r4, #16]
 800afd4:	6023      	str	r3, [r4, #0]
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f043 0308 	orr.w	r3, r3, #8
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	b94b      	cbnz	r3, 800aff6 <__swsetup_r+0x7a>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afec:	d003      	beq.n	800aff6 <__swsetup_r+0x7a>
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 f883 	bl	800b0fc <__smakebuf_r>
 800aff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800affa:	f013 0201 	ands.w	r2, r3, #1
 800affe:	d00a      	beq.n	800b016 <__swsetup_r+0x9a>
 800b000:	2200      	movs	r2, #0
 800b002:	60a2      	str	r2, [r4, #8]
 800b004:	6962      	ldr	r2, [r4, #20]
 800b006:	4252      	negs	r2, r2
 800b008:	61a2      	str	r2, [r4, #24]
 800b00a:	6922      	ldr	r2, [r4, #16]
 800b00c:	b942      	cbnz	r2, 800b020 <__swsetup_r+0xa4>
 800b00e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b012:	d1c5      	bne.n	800afa0 <__swsetup_r+0x24>
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	0799      	lsls	r1, r3, #30
 800b018:	bf58      	it	pl
 800b01a:	6962      	ldrpl	r2, [r4, #20]
 800b01c:	60a2      	str	r2, [r4, #8]
 800b01e:	e7f4      	b.n	800b00a <__swsetup_r+0x8e>
 800b020:	2000      	movs	r0, #0
 800b022:	e7f7      	b.n	800b014 <__swsetup_r+0x98>
 800b024:	20000110 	.word	0x20000110

0800b028 <_raise_r>:
 800b028:	291f      	cmp	r1, #31
 800b02a:	b538      	push	{r3, r4, r5, lr}
 800b02c:	4605      	mov	r5, r0
 800b02e:	460c      	mov	r4, r1
 800b030:	d904      	bls.n	800b03c <_raise_r+0x14>
 800b032:	2316      	movs	r3, #22
 800b034:	6003      	str	r3, [r0, #0]
 800b036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b03e:	b112      	cbz	r2, 800b046 <_raise_r+0x1e>
 800b040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b044:	b94b      	cbnz	r3, 800b05a <_raise_r+0x32>
 800b046:	4628      	mov	r0, r5
 800b048:	f000 f830 	bl	800b0ac <_getpid_r>
 800b04c:	4622      	mov	r2, r4
 800b04e:	4601      	mov	r1, r0
 800b050:	4628      	mov	r0, r5
 800b052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b056:	f000 b817 	b.w	800b088 <_kill_r>
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d00a      	beq.n	800b074 <_raise_r+0x4c>
 800b05e:	1c59      	adds	r1, r3, #1
 800b060:	d103      	bne.n	800b06a <_raise_r+0x42>
 800b062:	2316      	movs	r3, #22
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	2001      	movs	r0, #1
 800b068:	e7e7      	b.n	800b03a <_raise_r+0x12>
 800b06a:	2100      	movs	r1, #0
 800b06c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b070:	4620      	mov	r0, r4
 800b072:	4798      	blx	r3
 800b074:	2000      	movs	r0, #0
 800b076:	e7e0      	b.n	800b03a <_raise_r+0x12>

0800b078 <raise>:
 800b078:	4b02      	ldr	r3, [pc, #8]	@ (800b084 <raise+0xc>)
 800b07a:	4601      	mov	r1, r0
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	f7ff bfd3 	b.w	800b028 <_raise_r>
 800b082:	bf00      	nop
 800b084:	20000110 	.word	0x20000110

0800b088 <_kill_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d07      	ldr	r5, [pc, #28]	@ (800b0a8 <_kill_r+0x20>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	602b      	str	r3, [r5, #0]
 800b096:	f7f6 fb0b 	bl	80016b0 <_kill>
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d102      	bne.n	800b0a4 <_kill_r+0x1c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	b103      	cbz	r3, 800b0a4 <_kill_r+0x1c>
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	bd38      	pop	{r3, r4, r5, pc}
 800b0a6:	bf00      	nop
 800b0a8:	20002078 	.word	0x20002078

0800b0ac <_getpid_r>:
 800b0ac:	f7f6 baf8 	b.w	80016a0 <_getpid>

0800b0b0 <__swhatbuf_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	460c      	mov	r4, r1
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	2900      	cmp	r1, #0
 800b0ba:	b096      	sub	sp, #88	@ 0x58
 800b0bc:	4615      	mov	r5, r2
 800b0be:	461e      	mov	r6, r3
 800b0c0:	da0d      	bge.n	800b0de <__swhatbuf_r+0x2e>
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0c8:	f04f 0100 	mov.w	r1, #0
 800b0cc:	bf14      	ite	ne
 800b0ce:	2340      	movne	r3, #64	@ 0x40
 800b0d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	6031      	str	r1, [r6, #0]
 800b0d8:	602b      	str	r3, [r5, #0]
 800b0da:	b016      	add	sp, #88	@ 0x58
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f000 f848 	bl	800b174 <_fstat_r>
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	dbec      	blt.n	800b0c2 <__swhatbuf_r+0x12>
 800b0e8:	9901      	ldr	r1, [sp, #4]
 800b0ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0f2:	4259      	negs	r1, r3
 800b0f4:	4159      	adcs	r1, r3
 800b0f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0fa:	e7eb      	b.n	800b0d4 <__swhatbuf_r+0x24>

0800b0fc <__smakebuf_r>:
 800b0fc:	898b      	ldrh	r3, [r1, #12]
 800b0fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b100:	079d      	lsls	r5, r3, #30
 800b102:	4606      	mov	r6, r0
 800b104:	460c      	mov	r4, r1
 800b106:	d507      	bpl.n	800b118 <__smakebuf_r+0x1c>
 800b108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	6123      	str	r3, [r4, #16]
 800b110:	2301      	movs	r3, #1
 800b112:	6163      	str	r3, [r4, #20]
 800b114:	b003      	add	sp, #12
 800b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b118:	ab01      	add	r3, sp, #4
 800b11a:	466a      	mov	r2, sp
 800b11c:	f7ff ffc8 	bl	800b0b0 <__swhatbuf_r>
 800b120:	9f00      	ldr	r7, [sp, #0]
 800b122:	4605      	mov	r5, r0
 800b124:	4639      	mov	r1, r7
 800b126:	4630      	mov	r0, r6
 800b128:	f7fd fbf2 	bl	8008910 <_malloc_r>
 800b12c:	b948      	cbnz	r0, 800b142 <__smakebuf_r+0x46>
 800b12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b132:	059a      	lsls	r2, r3, #22
 800b134:	d4ee      	bmi.n	800b114 <__smakebuf_r+0x18>
 800b136:	f023 0303 	bic.w	r3, r3, #3
 800b13a:	f043 0302 	orr.w	r3, r3, #2
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	e7e2      	b.n	800b108 <__smakebuf_r+0xc>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	6020      	str	r0, [r4, #0]
 800b146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b14a:	81a3      	strh	r3, [r4, #12]
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b152:	b15b      	cbz	r3, 800b16c <__smakebuf_r+0x70>
 800b154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b158:	4630      	mov	r0, r6
 800b15a:	f000 f81d 	bl	800b198 <_isatty_r>
 800b15e:	b128      	cbz	r0, 800b16c <__smakebuf_r+0x70>
 800b160:	89a3      	ldrh	r3, [r4, #12]
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	81a3      	strh	r3, [r4, #12]
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	431d      	orrs	r5, r3
 800b170:	81a5      	strh	r5, [r4, #12]
 800b172:	e7cf      	b.n	800b114 <__smakebuf_r+0x18>

0800b174 <_fstat_r>:
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4d07      	ldr	r5, [pc, #28]	@ (800b194 <_fstat_r+0x20>)
 800b178:	2300      	movs	r3, #0
 800b17a:	4604      	mov	r4, r0
 800b17c:	4608      	mov	r0, r1
 800b17e:	4611      	mov	r1, r2
 800b180:	602b      	str	r3, [r5, #0]
 800b182:	f7f6 faf5 	bl	8001770 <_fstat>
 800b186:	1c43      	adds	r3, r0, #1
 800b188:	d102      	bne.n	800b190 <_fstat_r+0x1c>
 800b18a:	682b      	ldr	r3, [r5, #0]
 800b18c:	b103      	cbz	r3, 800b190 <_fstat_r+0x1c>
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	bd38      	pop	{r3, r4, r5, pc}
 800b192:	bf00      	nop
 800b194:	20002078 	.word	0x20002078

0800b198 <_isatty_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d06      	ldr	r5, [pc, #24]	@ (800b1b4 <_isatty_r+0x1c>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	f7f6 faf4 	bl	8001790 <_isatty>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_isatty_r+0x1a>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_isatty_r+0x1a>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	20002078 	.word	0x20002078

0800b1b8 <_init>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	bf00      	nop
 800b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1be:	bc08      	pop	{r3}
 800b1c0:	469e      	mov	lr, r3
 800b1c2:	4770      	bx	lr

0800b1c4 <_fini>:
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	bf00      	nop
 800b1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ca:	bc08      	pop	{r3}
 800b1cc:	469e      	mov	lr, r3
 800b1ce:	4770      	bx	lr
